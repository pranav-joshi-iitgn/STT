Type Name,Package Name,JAVA code,LCOM1,LCOM2,LCOM3,LCOM4,LCOM5,YALCOM
FloatColumnType,tech.tablesaw.columns.numbers,"'package tech.tablesaw.columns.numbers;\n/** The {@link ColumnType} for {@link FloatColumn} */\npublic class FloatColumnType extends AbstractColumnType {\n  public static final int BYTE_SIZE = 4;\n  /** Returns the default parser for {@link FloatColumn} */\n  public static final FloatParser DEFAULT_PARSER = new FloatParser(ColumnType.FLOAT);\n  private static FloatColumnType INSTANCE;\n  private FloatColumnType(int byteSize, String name, String printerFriendlyName) {\n    super(byteSize, name, printerFriendlyName);\n  }\n  /** Returns the singleton instance of FloatColumnType */\n  public static FloatColumnType instance() {\n    if (INSTANCE == null) {\n      INSTANCE = new FloatColumnType(BYTE_SIZE, ""FLOAT"", ""float"");\n    }\n    return INSTANCE;\n  }\n  /** {@inheritDoc} */\n  @Override\n  public FloatColumn create(String name) {\n    return FloatColumn.create(name);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public FloatParser customParser(ReadOptions options) {\n    return new FloatParser(this, options);\n  }\n  /** Returns true if the given value is the missing value indicator for this column type */\n  public static boolean valueIsMissing(float value) {\n    return Float.isNaN(value);\n  }\n  /** Returns the missing value indicator for this column type */\n  public static float missingValueIndicator() {\n    return Float.NaN;\n  }\n}'",15.0,0.0,6.0,6.0,1.0666666666666669,1.0
DateAggregateFunction,tech.tablesaw.aggregate,"'package tech.tablesaw.aggregate;\n/** A partial implementation of aggregate functions to summarize over a date column */\npublic abstract class DateAggregateFunction extends AggregateFunction<DateColumn, LocalDate> {\n  /**\n   * Constructs a DateAggregateFunction with the given name. The name may be used to name a column\n   * in the output when this function is used by {@link Summarizer}\n   */\n  public DateAggregateFunction(String name) {\n    super(name);\n  }\n  /**\n   * Returns an instance of LocalDate that is the result of applying this function to the given\n   * column\n   */\n  public abstract LocalDate summarize(DateColumn column);\n  /** {@inheritDoc} */\n  @Override\n  public boolean isCompatibleColumn(ColumnType type) {\n    return type.equals(ColumnType.LOCAL_DATE);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public ColumnType returnType() {\n    return ColumnType.LOCAL_DATE;\n  }\n}'",6.0,0.0,4.0,4.0,0.0,1.0
BooleanIntAggregateFunction,tech.tablesaw.aggregate,"'package tech.tablesaw.aggregate;\n/**\n * A partial implementation of an AggregateFunction that returns an Integer value when applied to a\n * Boolean Column\n */\npublic abstract class BooleanIntAggregateFunction\n    extends AggregateFunction<BooleanColumn, Integer> {\n  /**\n   * Constructs a BooleanCountFunction with the given name. The name may be used to name a column in\n   * the output when this function is used by {@link Summarizer}\n   */\n  public BooleanIntAggregateFunction(String functionName) {\n    super(functionName);\n  }\n  /** Returns an Integer as a result of applying this function to the given column */\n  @Override\n  public abstract Integer summarize(BooleanColumn column);\n  /** {@inheritDoc} */\n  @Override\n  public boolean isCompatibleColumn(ColumnType type) {\n    return type.equals(ColumnType.BOOLEAN);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public ColumnType returnType() {\n    return ColumnType.DOUBLE;\n  }\n}'",6.0,0.0,4.0,4.0,0.0,1.0
NumericAggregateFunction,tech.tablesaw.aggregate,"'package tech.tablesaw.aggregate;\n/** A partial implementation of aggregate functions to summarize over a numeric column */\npublic abstract class NumericAggregateFunction extends AggregateFunction<NumericColumn<?>, Double> {\n  /**\n   * Constructs a NumericAggregateFunction with the given name. The name may be used to name a\n   * column in the output when this function is used by {@link Summarizer}\n   */\n  public NumericAggregateFunction(String name) {\n    super(name);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public boolean isCompatibleColumn(ColumnType type) {\n    return type.equals(ColumnType.DOUBLE)\n        || type.equals(ColumnType.FLOAT)\n        || type.equals(ColumnType.INTEGER)\n        || type.equals(ColumnType.SHORT)\n        || type.equals(ColumnType.LONG);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public ColumnType returnType() {\n    return ColumnType.DOUBLE;\n  }\n}'",3.0,0.0,3.0,3.0,0.0,1.0
TimeAggregateFunction,tech.tablesaw.aggregate,"'package tech.tablesaw.aggregate;\n/** A partial implementation of aggregate functions to summarize over a time column */\npublic abstract class TimeAggregateFunction extends AggregateFunction<TimeColumn, LocalTime> {\n  /**\n   * Constructs a TimeAggregateFunction with the given name. The name is used as a column name in\n   * the output\n   */\n  public TimeAggregateFunction(String name) {\n    super(name);\n  }\n  /** Returns a LocalTime object that is the result of applying this function to the given Column */\n  public abstract LocalTime summarize(TimeColumn column);\n  /** {@inheritDoc} */\n  @Override\n  public boolean isCompatibleColumn(ColumnType type) {\n    return type.equals(ColumnType.LOCAL_TIME);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public ColumnType returnType() {\n    return ColumnType.LOCAL_TIME;\n  }\n}'",6.0,0.0,4.0,4.0,0.0,1.0
