digraph "cluster0STTLab4/cs202_miner/Flask_results/app.py.changes.cfgs/commit81:13cc69911c6b5c742489ffe6e8c6458dec32e230" {
	graph [compound=True dpi=200 fontname="DejaVu Sans Mono" label="STTLab4/cs202_miner/Flask_results/app.py.changes.cfgs/commit81:13cc69911c6b5c742489ffe6e8c6458dec32e230" pack=False rankdir=TB ranksep=0.02]
	node [fontname="DejaVu Sans Mono" fontsize=0 height=3 width=3]
	edge [fontname="DejaVu Sans Mono"]
	1 [label="\"\"\"\l    flask.app\l    ~~~~~~~~~\l\l    This module implements the central WSGI application object.\l\l    :copyright: (c) 2011 by Armin Ronacher.\l    :license: BSD, see LICENSE for more details.\l\"\"\"\limport os\limport sys\lfrom threading import Lock\lfrom datetime import timedelta\lfrom itertools import chain\lfrom functools import update_wrapper\lfrom werkzeug.datastructures import ImmutableDict\lfrom werkzeug.routing import Map, Rule, RequestRedirect, BuildError\lfrom werkzeug.exceptions import HTTPException, InternalServerError, MethodNotAllowed, BadRequest\lfrom .helpers import _PackageBoundObject, url_for, get_flashed_messages, locked_cached_property, _endpoint_from_view_func, find_package\lfrom . import json\lfrom .wrappers import Request, Response\lfrom .config import ConfigAttribute, Config\lfrom .ctx import RequestContext, AppContext, _AppCtxGlobals\lfrom .globals import _request_ctx_stack, request, session, g\lfrom .sessions import SecureCookieSessionInterface\lfrom .module import blueprint_is_module\lfrom .templating import DispatchingJinjaLoader, Environment, _default_template_ctx_processor\lfrom .signals import request_started, request_finished, got_request_exception, request_tearing_down, appcontext_tearing_down\lfrom ._compat import reraise, string_types, integer_types\l_logger_lock = Lock()\ldef _make_timedelta(value):...\ldef setupmethod(f):...\lclass Flask(_PackageBoundObject):\l    \"\"\"The flask object implements a WSGI application and acts as the central\l    object.  It is passed the name of the module or package of the\l    application.  Once it is created it will act as a central registry for\l    the view functions, the URL rules, template configuration and much more.\l\l    The name of the package is used to resolve resources from inside the\l    package or the folder the module is contained in depending on if the\l    package parameter resolves to an actual python package (a folder with\l    an `__init__.py` file inside) or a standard module (just a `.py` file).\l\l    For more information about resource loading, see :func:`open_resource`.\l\l    Usually you create a :class:`Flask` instance in your main module or\l    in the `__init__.py` file of your package like this::\l\l        from flask import Flask\l        app = Flask(__name__)\l\l    .. admonition:: About the First Parameter\l\l        The idea of the first parameter is to give Flask an idea what\l        belongs to your application.  This name is used to find resources\l        on the file system, can be used by extensions to improve debugging\l        information and a lot more.\l\l        So it's important what you provide there.  If you are using a single\l        module, `__name__` is always the correct value.  If you however are\l        using a package, it's usually recommended to hardcode the name of\l        your package there.\l\l        For example if your application is defined in `yourapplication/app.py`\l        you should create it with one of the two versions below::\l\l            app = Flask('yourapplication')\l            app = Flask(__name__.split('.')[0])\l\l        Why is that?  The application will work even with `__name__`, thanks\l        to how resources are looked up.  However it will make debugging more\l        painful.  Certain extensions can make assumptions based on the\l        import name of your application.  For example the Flask-SQLAlchemy\l        extension will look for the code in your application that triggered\l        an SQL query in debug mode.  If the import name is not properly set\l        up, that debugging information is lost.  (For example it would only\l        pick up SQL queries in `yourapplication.app` and not\l        `yourapplication.views.frontend`)\l\l    .. versionadded:: 0.7\l       The `static_url_path`, `static_folder`, and `template_folder`\l       parameters were added.\l\l    .. versionadded:: 0.8\l       The `instance_path` and `instance_relative_config` parameters were\l       added.\l\l    :param import_name: the name of the application package\l    :param static_url_path: can be used to specify a different path for the\l                            static files on the web.  Defaults to the name\l                            of the `static_folder` folder.\l    :param static_folder: the folder with static files that should be served\l                          at `static_url_path`.  Defaults to the ``'static'``\l                          folder in the root path of the application.\l    :param template_folder: the folder that contains the templates that should\l                            be used by the application.  Defaults to\l                            ``'templates'`` folder in the root path of the\l                            application.\l    :param instance_path: An alternative instance path for the application.\l                          By default the folder ``'instance'`` next to the\l                          package or module is assumed to be the instance\l                          path.\l    :param instance_relative_config: if set to `True` relative filenames\l                                     for loading the config are assumed to\l                                     be relative to the instance path instead\l                                     of the application root.\l    \"\"\"\l    request_class = Request\l    response_class = Response\l    app_ctx_globals_class = _AppCtxGlobals\l\l    def _get_request_globals_class(self):\l        return self.app_ctx_globals_class\l\l    def _set_request_globals_class(self, value):\l        from warnings import warn\l        warn(DeprecationWarning(\l            'request_globals_clas...'\l            ))\l        self.app_ctx_globals_class = value\l    request_globals_class = property(_get_request_globals_class,\l        _set_request_globals_class)\l    del _get_request_globals_class, _set_request_globals_class\l    debug = ConfigAttribute('DEBUG')\l    testing = ConfigAttribute('TESTING')\l    secret_key = ConfigAttribute('SECRET_KEY')\l    session_cookie_name = ConfigAttribute('SESSION_COOKIE_NAME')\l    permanent_session_lifetime = ConfigAttribute('PERMANENT_SESSION_LI...',\l        get_converter=_make_timedelta)\l    use_x_sendfile = ConfigAttribute('USE_X_SENDFILE')\l    logger_name = ConfigAttribute('LOGGER_NAME')\l    enable_modules = True\l    debug_log_format = ('-' * 80 + '\n' +\l        \"\"\"%(levelname)s in %(module)s [%(pathname)s:%(lineno)d]:\l\"\"\" +\l        '%(message)s\n' + '-' * 80)\l    json_encoder = json.JSONEncoder\l    json_decoder = json.JSONDecoder\l    jinja_options = ImmutableDict(extensions=['jinja2.ext.autoescap...',\l        'jinja2.ext.with_'])\l    default_config = ImmutableDict({'DEBUG': False, 'TESTING': False,\l        'PROPAGATE_EXCEPTIONS...': None, 'PRESERVE_CONTEXT_ON_...': None,\l        'SECRET_KEY': None, 'PERMANENT_SESSION_LI...': timedelta(days=31\l        ), 'USE_X_SENDFILE': False, 'LOGGER_NAME': None, 'SERVER_NAME':\l        None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session',\l        'SESSION_COOKIE_DOMAI...': None, 'SESSION_COOKIE_PATH': None,\l        'SESSION_COOKIE_HTTPO...': True, 'SESSION_COOKIE_SECUR...': False,\l        'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DE...': 12 * 60 * \l        60, 'TRAP_BAD_REQUEST_ERR...': False, 'TRAP_HTTP_EXCEPTIONS...': False,\l        'PREFERRED_URL_SCHEME...': 'http', 'JSON_AS_ASCII': True})\l    url_rule_class = Rule\l    test_client_class = None\l    session_interface = SecureCookieSessionInterface()\l\l    def __init__(self, import_name, static_path=None, static_url_path=None,\l        static_folder='static', template_folder='templates', instance_path=\l        None, instance_relative_config=False):\l        _PackageBoundObject.__init__(self, import_name, template_folder=\l            template_folder)\l        if static_path is not None:\l            from warnings import warn\l            warn(DeprecationWarning(\l                'static_path is now c...'), stacklevel=2)\l            static_url_path = static_path\l        if static_url_path is not None:\l            self.static_url_path = static_url_path\l        if static_folder is not None:\l            self.static_folder = static_folder\l        if instance_path is None:\l            instance_path = self.auto_find_instance_path()\l        elif not os.path.isabs(instance_path):\l            raise ValueError(\l                'If an instance path ...'\l                )\l        self.instance_path = instance_path\l        self.config = self.make_config(instance_relative_config)\l        self._logger = None\l        self.logger_name = self.import_name\l        self.view_functions = {}\l        self._error_handlers = {}\l        self.error_handler_spec = {None: self._error_handlers}\l        self.url_build_error_handlers = []\l        self.before_request_funcs = {}\l        self.before_first_request_funcs = []\l        self.after_request_funcs = {}\l        self.teardown_request_funcs = {}\l        self.teardown_appcontext_funcs = []\l        self.url_value_preprocessors = {}\l        self.url_default_functions = {}\l        self.template_context_processors = {None: [\l            _default_template_ctx_processor]}\l        self.blueprints = {}\l        self.extensions = {}\l        self.url_map = Map()\l        self._got_first_request = False\l        self._before_request_lock = Lock()\l        if self.has_static_folder:\l            self.add_url_rule(self.static_url_path + '/<path:filename>',\l                endpoint='static', view_func=self.send_static_file)\l\l    def _get_error_handlers(self):\l        from warnings import warn\l        warn(DeprecationWarning(\l            'error_handlers is de...'\l            ), stacklevel=1)\l        return self._error_handlers\l\l    def _set_error_handlers(self, value):\l        self._error_handlers = value\l        self.error_handler_spec[None] = value\l    error_handlers = property(_get_error_handlers, _set_error_handlers)\l    del _get_error_handlers, _set_error_handlers\l\l    @locked_cached_property\l    def name(self):\l        \"\"\"The name of the application.  This is usually the import name\l        with the difference that it's guessed from the run file if the\l        import name is main.  This name is used as a display name when\l        Flask needs the name of the application.  It can be set and overridden\l        to change the value.\l\l        .. versionadded:: 0.8\l        \"\"\"\l        if self.import_name == '__main__':\l            fn = getattr(sys.modules['__main__'], '__file__', None)\l            if fn is None:\l                return '__main__'\l            return os.path.splitext(os.path.basename(fn))[0]\l        return self.import_name\l\l    @property\l    def propagate_exceptions(self):\l        \"\"\"Returns the value of the `PROPAGATE_EXCEPTIONS` configuration\l        value in case it's set, otherwise a sensible default is returned.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        rv = self.config['PROPAGATE_EXCEPTIONS...']\l        if rv is not None:\l            return rv\l        return self.testing or self.debug\l\l    @property\l    def preserve_context_on_exception(self):\l        \"\"\"Returns the value of the `PRESERVE_CONTEXT_ON_EXCEPTION`\l        configuration value in case it's set, otherwise a sensible default\l        is returned.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        rv = self.config['PRESERVE_CONTEXT_ON_...']\l        if rv is not None:\l            return rv\l        return self.debug\l\l    @property\l    def logger(self):\l        \"\"\"A :class:`logging.Logger` object for this application.  The\l        default configuration is to log to stderr if the application is\l        in debug mode.  This logger can be used to (surprise) log messages.\l        Here some examples::\l\l            app.logger.debug('A value for debuggin...')\l            app.logger.warning('A warning occurred (...', 42)\l            app.logger.error('An error occurred')\l\l        .. versionadded:: 0.3\l        \"\"\"\l        if self._logger and self._logger.name == self.logger_name:\l            return self._logger\l        with _logger_lock:\l            if self._logger and self._logger.name == self.logger_name:\l                return self._logger\l            from flask.logging import create_logger\l            self._logger = rv = create_logger(self)\l            return rv\l\l    @locked_cached_property\l    def jinja_env(self):\l        \"\"\"The Jinja2 environme...\"\"\"\l        return self.create_jinja_environment()\l\l    @property\l    def got_first_request(self):\l        \"\"\"This attribute is set to `True` if the application started\l        handling the first request.\l\l        .. versionadded:: 0.8\l        \"\"\"\l        return self._got_first_request\l\l    def make_config(self, instance_relative=False):\l        \"\"\"Used to create the config attribute by the Flask constructor.\l        The `instance_relative` parameter is passed in from the constructor\l        of Flask (there named `instance_relative_config`) and indicates if\l        the config should be relative to the instance path or the root path\l        of the application.\l\l        .. versionadded:: 0.8\l        \"\"\"\l        root_path = self.root_path\l        if instance_relative:\l            root_path = self.instance_path\l        return Config(root_path, self.default_config)\l\l    def auto_find_instance_path(self):\l        \"\"\"Tries to locate the instance path if it was not provided to the\l        constructor of the application class.  It will basically calculate\l        the path to a folder named ``instance`` next to your main file or\l        the package.\l\l        .. versionadded:: 0.8\l        \"\"\"\l        prefix, package_path = find_package(self.import_name)\l        if prefix is None:\l            return os.path.join(package_path, 'instance')\l        return os.path.join(prefix, 'var', self.name + '-instance')\l\l    def open_instance_resource(self, resource, mode='rb'):\l        \"\"\"Opens a resource fro...'s instance folder\l        (:attr:`instance_path`).  Otherwise works like\l        :meth:`open_resource`.  Instance resources can also be opened for\l        writing.\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        :param mode: resource file opening mode, default is 'rb'.\l        \"\"\"\l        return open(os.path.join(self.instance_path, resource), mode)\l\l    def create_jinja_environment(self):\l        \"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\l        and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds\l        the Jinja2 globals and filters after initialization.  Override\l        this function to customize the behavior.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        options = dict(self.jinja_options)\l        if 'autoescape' not in options:\l            options['autoescape'] = self.select_jinja_autoescape\l        rv = Environment(self, **options)\l        rv.globals.update(url_for=url_for, get_flashed_messages=\l            get_flashed_messages, config=self.config, request=request,\l            session=session, g=g)\l        rv.filters['tojson'] = json.htmlsafe_dumps\l        return rv\l\l    def create_global_jinja_loader(self):\l        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\l        override just the loader and keeping the rest unchanged.  It's\l        discouraged to override this function.  Instead one should override\l        the :meth:`jinja_loader` function instead.\l\l        The global loader dispatches between the loaders of the application\l        and the individual blueprints.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        return DispatchingJinjaLoader(self)\l\l    def init_jinja_globals(self):\l        \"\"\"Deprecated.  Used to initialize the Jinja2 globals.\l\l        .. versionadded:: 0.5\l        .. versionchanged:: 0.7\l           This method is deprecated with 0.7.  Override\l           :meth:`create_jinja_environment` instead.\l        \"\"\"\l\l    def select_jinja_autoescape(self, filename):\l        \"\"\"Returns `True` if autoescaping should be active for the given\l        template name.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        if filename is None:\l            return False\l        return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\l\l    def update_template_context(self, context):\l        \"\"\"Update the template context with some commonly used variables.\l        This injects request, session, config and g into the template\l        context as well as everything template context processors want\l        to inject.  Note that the as of Flask 0.6, the original values\l        in the context will not be overridden if a context processor\l        decides to return a value with the same key.\l\l        :param context: the context as a dictionary that is updated in place\l                        to add extra variables.\l        \"\"\"\l        funcs = self.template_context_processors[None]\l        reqctx = _request_ctx_stack.top\l        if reqctx is not None:\l            bp = reqctx.request.blueprint\l            if bp is not None and bp in self.template_context_processors:\l                funcs = chain(funcs, self.template_context_processors[bp])\l        orig_ctx = context.copy()\l        for func in funcs:\l            context.update(func())\l        context.update(orig_ctx)\l\l    def run(self, host=None, port=None, debug=None, **options):\l        \"\"\"Runs the application on a local development server.  If the\l        :attr:`debug` flag is set the server will automatically reload\l        for code changes and show a debugger in case an exception happened.\l\l        If you want to run the application in debug mode, but disable the\l        code execution on the interactive debugger, you can pass\l        ``use_evalex=False`` as parameter.  This will keep the debugger's\l        traceback screen active, but disable code execution.\l\l        .. admonition:: Keep in Mind\l\l           Flask will suppress any server error with a generic error page\l           unless it is in debug mode.  As such to enable just the\l           interactive debugger without the code reloading, you have to\l           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\l           Setting ``use_debugger`` to `True` without being in debug mode\l           won't catch any exceptio...'t be any to\l           catch.\l\l        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\l                     have the server available externally as well. Defaults to\l                     ``'127.0.0.1'``.\l        :param port: the port of the webserver. Defaults to ``5000``.\l        :param debug: if given, enable or disable debug mode.\l                      See :attr:`debug`.\l        :param options: the options to be forwarded to the underlying\l                        Werkzeug server.  See\l                        :func:`werkzeug.serving.run_simple` for more\l                        information.\l        \"\"\"\l        from werkzeug.serving import run_simple\l        if host is None:\l            host = '127.0.0.1'\l        if port is None:\l            port = 5000\l        if debug is not None:\l            self.debug = bool(debug)\l        options.setdefault('use_reloader', self.debug)\l        options.setdefault('use_debugger', self.debug)\l        try:\l            run_simple(host, port, self, **options)\l        finally:\l            self._got_first_request = False\l\l    def test_client(self, use_cookies=True):\l        \"\"\"Creates a test client for this application.  For information\l        about unit testing head over to :ref:`testing`.\l\l        Note that if you are testing for assertions or exceptions in your\l        application code, you must set ``app.testing = True`` in order for the\l        exceptions to propagate to the test client.  Otherwise, the exception\l        will be handled by the application (not visible to the test client) and\l        the only indication of an AssertionError or other exception will be a\l        500 status code response to the test client.  See the :attr:`testing`\l        attribute.  For example::\l\l            app.testing = True\l            client = app.test_client()\l\l        The test client can be used in a `with` block to defer the closing down\l        of the context until the end of the `with` block.  This is useful if\l        you want to access the context locals for testing::\l\l            with app.test_client() as c:\l                rv = c.get('/?vodka=42')\l                assert request.args['vodka'] == '42'\l\l        See :class:`~flask.testing.FlaskClient` for more information.\l\l        .. versionchanged:: 0.4\l           added support for `with` block usage for the client.\l\l        .. versionadded:: 0.7\l           The `use_cookies` parameter was added as well as the ability\l           to override the client to be used by setting the\l           :attr:`test_client_class` attribute.\l        \"\"\"\l        cls = self.test_client_class\l        if cls is None:\l            from flask.testing import FlaskClient as cls\l        return cls(self, self.response_class, use_cookies=use_cookies)\l\l    def open_session(self, request):\l        \"\"\"Creates or opens a new session.  Default implementation stores all\l        session data in a signed cookie.  This requires that the\l        :attr:`secret_key` is set.  Instead of overriding this method\l        we recommend replacing the :class:`session_interface`.\l\l        :param request: an instance of :attr:`request_class`.\l        \"\"\"\l        return self.session_interface.open_session(self, request)\l\l    def save_session(self, session, response):\l        \"\"\"Saves the session if it needs updates.  For the default\l        implementation, check :meth:`open_session`.  Instead of overriding this\l        method we recommend replacing the :class:`session_interface`.\l\l        :param session: the session to be saved (a\l                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\l                        object)\l        :param response: an instance of :attr:`response_class`\l        \"\"\"\l        return self.session_interface.save_session(self, session, response)\l\l    def make_null_session(self):\l        \"\"\"Creates a new instance of a missing session.  Instead of overriding\l        this method we recommend replacing the :class:`session_interface`.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        return self.session_interface.make_null_session(self)\l\l    def register_module(self, module, **options):\l        \"\"\"Registers a module with this application.  The keyword argument\l        of this function are the same as the ones for the constructor of the\l        :class:`Module` class and will override the values of the module if\l        provided.\l\l        .. versionchanged:: 0.7\l           The module system was deprecated in favor for the blueprint\l           system.\l        \"\"\"\l        assert blueprint_is_module(module\l            ), 'register_module requ...'\l        if not self.enable_modules:\l            raise RuntimeError(\l                'Module support was d...'\l                 % module)\l        else:\l            from warnings import warn\l            warn(DeprecationWarning(\l                'Modules are deprecat...'\l                 % module), stacklevel=2)\l        self.register_blueprint(module, **options)\l\l    @setupmethod\l    def register_blueprint(self, blueprint, **options):\l        \"\"\"Registers a blueprint on the application.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        first_registration = False\l        if blueprint.name in self.blueprints:\l            assert self.blueprints[blueprint.name\l                ] is blueprint, 'A blueprint\'s name collision occ...\"%s\".  Blueprints that a...' % (\l                blueprint, self.blueprints[blueprint.name], blueprint.name)\l        else:\l            self.blueprints[blueprint.name] = blueprint\l            first_registration = True\l        blueprint.register(self, options, first_registration)\l\l    @setupmethod\l    def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\l        \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\l        decorator.  If a view_func is provided it will be registered with the\l        endpoint.\l\l        Basically this example::\l\l            @app.route('/')\l            def index():\l                pass\l\l        Is equivalent to the following::\l\l            def index():\l                pass\l            app.add_url_rule('/', 'index', index)\l\l        If the view_func is not provided you will need to connect the endpoint\l        to a view function like so::\l\l            app.view_functions['index'] = index\l\l        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\l        to customize the behavior via subclassing you only need to change\l        this method.\l\l        For more information refer to :ref:`url-route-registrations`.\l\l        .. versionchanged:: 0.2\l           `view_func` parameter added.\l\l        .. versionchanged:: 0.6\l           `OPTIONS` is added automatically as method.\l\l        :param rule: the URL rule as string\l        :param endpoint: the endpoint for the registered URL rule.  Flask\l                         itself assumes the name of the view function as\l                         endpoint\l        :param view_func: the function to call when serving a request to the\l                          provided endpoint\l        :param options: the options to be forwarded to the underlying\l                        :class:`~werkzeug.routing.Rule` object.  A change\l                        to Werkzeug is handling of method options.  methods\l                        is a list of methods this rule should be limited\l                        to (`GET`, `POST` etc.).  By default a rule\l                        just listens for `GET` (and implicitly `HEAD`).\l                        Starting with Flask 0.6, `OPTIONS` is implicitly\l                        added and handled by the standard request handling.\l        \"\"\"\l        if endpoint is None:\l            endpoint = _endpoint_from_view_func(view_func)\l        options['endpoint'] = endpoint\l        methods = options.pop('methods', None)\l        if methods is None:\l            methods = getattr(view_func, 'methods', None) or ('GET',)\l        methods = set(methods)\l        required_methods = set(getattr(view_func, 'required_methods', ()))\l        provide_automatic_options = getattr(view_func,\l            'provide_automatic_op...', None)\l        if provide_automatic_options is None:\l            if 'OPTIONS' not in methods:\l                provide_automatic_options = True\l                required_methods.add('OPTIONS')\l            else:\l                provide_automatic_options = False\l        methods |= required_methods\l        options['defaults'] = options.get('defaults') or None\l        rule = self.url_rule_class(rule, methods=methods, **options)\l        rule.provide_automatic_options = provide_automatic_options\l        self.url_map.add(rule)\l        if view_func is not None:\l            old_func = self.view_functions.get(endpoint)\l            if old_func is not None and old_func is not view_func:\l                raise AssertionError(\l                    'View function mappin...'\l                     % endpoint)\l            self.view_functions[endpoint] = view_func\l\l    def route(self, rule, **options):\l        \"\"\"A decorator that is used to register a view function for a\l        given URL rule.  This does the same thing as :meth:`add_url_rule`\l        but is intended for decorator usage::\l\l            @app.route('/')\l            def index():\l                return 'Hello World'\l\l        For more information refer to :ref:`url-route-registrations`.\l\l        :param rule: the URL rule as string\l        :param endpoint: the endpoint for the registered URL rule.  Flask\l                         itself assumes the name of the view function as\l                         endpoint\l        :param view_func: the function to call when serving a request to the\l                          provided endpoint\l        :param options: the options to be forwarded to the underlying\l                        :class:`~werkzeug.routing.Rule` object.  A change\l                        to Werkzeug is handling of method options.  methods\l                        is a list of methods this rule should be limited\l                        to (`GET`, `POST` etc.).  By default a rule\l                        just listens for `GET` (and implicitly `HEAD`).\l                        Starting with Flask 0.6, `OPTIONS` is implicitly\l                        added and handled by the standard request handling.\l        \"\"\"\l\l        def decorator(f):\l            endpoint = options.pop('endpoint', None)\l            self.add_url_rule(rule, endpoint, f, **options)\l            return f\l        return decorator\l\l    @setupmethod\l    def endpoint(self, endpoint):\l        \"\"\"A decorator to register a function as an endpoint.\l        Example::\l\l            @app.endpoint('example.endpoint')\l            def example():\l                return \"example\"\l\l        :param endpoint: the name of the endpoint\l        \"\"\"\l\l        def decorator(f):\l            self.view_functions[endpoint] = f\l            return f\l        return decorator\l\l    @setupmethod\l    def errorhandler(self, code_or_exception):\l        \"\"\"A decorator that is used to register a function give a given\l        error code.  Example::\l\l            @app.errorhandler(404)\l            def page_not_found(error):\l                return 'This page does not e...', 404\l\l        You can also register handlers for arbitrary exceptions::\l\l            @app.errorhandler(DatabaseError)\l            def special_exception_handler(error):\l                return 'Database connection ...', 500\l\l        You can also register a function as error handler without using\l        the :meth:`errorhandler` decorator.  The following example is\l        equivalent to the one above::\l\l            def page_not_found(error):\l                return 'This page does not e...', 404\l            app.error_handler_spec[None][404] = page_not_found\l\l        Setting error handlers via assignments to :attr:`error_handler_spec`\l        however is discouraged as it requires fiddling with nested dictionaries\l        and the special case for arbitrary exception types.\l\l        The first `None` refers to the active blueprint.  If the error\l        handler should be application wide `None` shall be used.\l\l        .. versionadded:: 0.7\l           One can now additionally also register custom exception types\l           that do not necessarily have to be a subclass of the\l           :class:`~werkzeug.exceptions.HTTPException` class.\l\l        :param code: the code as integer for the handler\l        \"\"\"\l\l        def decorator(f):\l            self._register_error_handler(None, code_or_exception, f)\l            return f\l        return decorator\l\l    def register_error_handler(self, code_or_exception, f):\l        \"\"\"Alternative error attach function to the :meth:`errorhandler`\l        decorator that is more straightforward to use for non decorator\l        usage.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        self._register_error_handler(None, code_or_exception, f)\l\l    @setupmethod\l    def _register_error_handler(self, key, code_or_exception, f):\l        if isinstance(code_or_exception, HTTPException):\l            code_or_exception = code_or_exception.code\l        if isinstance(code_or_exception, integer_types):\l            assert code_or_exception != 500 or key is None, 'It is currently not ...'\l            self.error_handler_spec.setdefault(key, {})[code_or_exception] = f\l        else:\l            self.error_handler_spec.setdefault(key, {}).setdefault(None, []\l                ).append((code_or_exception, f))\l\l    @setupmethod\l    def template_filter(self, name=None):\l        \"\"\"A decorator that is used to register custom template filter.\l        You can specify a name for the filter, otherwise the function\l        name will be used. Example::\l\l          @app.template_filter()\l          def reverse(s):\l              return s[::-1]\l\l        :param name: the optional name of the filter, otherwise the\l                     function name will be used.\l        \"\"\"\l\l        def decorator(f):\l            self.add_template_filter(f, name=name)\l            return f\l        return decorator\l\l    @setupmethod\l    def add_template_filter(self, f, name=None):\l        \"\"\"Register a custom template filter.  Works exactly like the\l        :meth:`template_filter` decorator.\l\l        :param name: the optional name of the filter, otherwise the\l                     function name will be used.\l        \"\"\"\l        self.jinja_env.filters[name or f.__name__] = f\l\l    @setupmethod\l    def template_test(self, name=None):\l        \"\"\"A decorator that is used to register custom template test.\l        You can specify a name for the test, otherwise the function\l        name will be used. Example::\l\l          @app.template_test()\l          def is_prime(n):\l              if n == 2:\l                  return True\l              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\l                  if n % i == 0:\l                      return False\l              return True\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the test, otherwise the\l                     function name will be used.\l        \"\"\"\l\l        def decorator(f):\l            self.add_template_test(f, name=name)\l            return f\l        return decorator\l\l    @setupmethod\l    def add_template_test(self, f, name=None):\l        \"\"\"Register a custom template test.  Works exactly like the\l        :meth:`template_test` decorator.\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the test, otherwise the\l                     function name will be used.\l        \"\"\"\l        self.jinja_env.tests[name or f.__name__] = f\l\l    @setupmethod\l    def template_global(self, name=None):\l        \"\"\"A decorator that is used to register a custom template global function.\l        You can specify a name for the global function, otherwise the function\l        name will be used. Example::\l\l            @app.template_global()\l            def double(n):\l                return 2 * n\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the global function, otherwise the\l                     function name will be used.\l        \"\"\"\l\l        def decorator(f):\l            self.add_template_global(f, name=name)\l            return f\l        return decorator\l\l    @setupmethod\l    def add_template_global(self, f, name=None):\l        \"\"\"Register a custom template global function. Works exactly like the\l        :meth:`template_global` decorator.\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the global function, otherwise the\l                     function name will be used.\l        \"\"\"\l        self.jinja_env.globals[name or f.__name__] = f\l\l    @setupmethod\l    def before_request(self, f):\l        \"\"\"Registers a function...\"\"\"\l        self.before_request_funcs.setdefault(None, []).append(f)\l        return f\l\l    @setupmethod\l    def before_first_request(self, f):\l        \"\"\"Registers a function to be run before the first request to this\l        instance of the application.\l\l        .. versionadded:: 0.8\l        \"\"\"\l        self.before_first_request_funcs.append(f)\l\l    @setupmethod\l    def after_request(self, f):\l        \"\"\"Register a function to be run after each request.  Your function\l        must take one parameter, a :attr:`response_class` object and return\l        a new response object or the same (see :meth:`process_response`).\l\l        As of Flask 0.7 this function might not be executed at the end of the\l        request in case an unhandled exception occurred.\l        \"\"\"\l        self.after_request_funcs.setdefault(None, []).append(f)\l        return f\l\l    @setupmethod\l    def teardown_request(self, f):\l        \"\"\"Register a function to be run at the end of each request,\l        regardless of whether there was an exception or not.  These functions\l        are executed when the request context is popped, even if not an\l        actual request was performed.\l\l        Example::\l\l            ctx = app.test_request_context()\l            ctx.push()\l            ...\l            ctx.pop()\l\l        When ``ctx.pop()`` is executed in the above example, the teardown\l        functions are called just before the request context moves from the\l        stack of active contexts.  This becomes relevant if you are using\l        such constructs in tests.\l\l        Generally teardown functions must take every necessary step to avoid\l        that they will fail.  If they do execute code that might fail they\l        will have to surround the execution of these code by try/except\l        statements and log occurring errors.\l\l        When a teardown function was called because of a exception it will\l        be passed an error object.\l\l        .. admonition:: Debug Note\l\l           In debug mode Flask will not tear down a request on an exception\l           immediately.  Instead if will keep it alive so that the interactive\l           debugger can still access it.  This behavior can be controlled\l           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\l        \"\"\"\l        self.teardown_request_funcs.setdefault(None, []).append(f)\l        return f\l\l    @setupmethod\l    def teardown_appcontext(self, f):\l        \"\"\"Registers a function to be called when the application context\l        ends.  These functions are typically also called when the request\l        context is popped.\l\l        Example::\l\l            ctx = app.app_context()\l            ctx.push()\l            ...\l            ctx.pop()\l\l        When ``ctx.pop()`` is executed in the above example, the teardown\l        functions are called just before the app context moves from the\l        stack of active contexts.  This becomes relevant if you are using\l        such constructs in tests.\l\l        Since a request context typically also manages an application\l        context it would also be called when you pop a request context.\l\l        When a teardown function was called because of an exception it will\l        be passed an error object.\l\l        .. versionadded:: 0.9\l        \"\"\"\l        self.teardown_appcontext_funcs.append(f)\l        return f\l\l    @setupmethod\l    def context_processor(self, f):\l        \"\"\"Registers a template...\"\"\"\l        self.template_context_processors[None].append(f)\l        return f\l\l    @setupmethod\l    def url_value_preprocessor(self, f):\l        \"\"\"Registers a function as URL value preprocessor for all view\l        functions of the application.  It's called before the view functions\l        are called and can modify the url values provided.\l        \"\"\"\l        self.url_value_preprocessors.setdefault(None, []).append(f)\l        return f\l\l    @setupmethod\l    def url_defaults(self, f):\l        \"\"\"Callback function for URL defaults for all view functions of the\l        application.  It's called with the endpoint and values and should\l        update the values passed in place.\l        \"\"\"\l        self.url_default_functions.setdefault(None, []).append(f)\l        return f\l\l    def handle_http_exception(self, e):\l        \"\"\"Handles an HTTP exception.  By default this will invoke the\l        registered error handlers and fall back to returning the\l        exception as response.\l\l        .. versionadded:: 0.3\l        \"\"\"\l        handlers = self.error_handler_spec.get(request.blueprint)\l        if e.code is None:\l            return e\l        if handlers and e.code in handlers:\l            handler = handlers[e.code]\l        else:\l            handler = self.error_handler_spec[None].get(e.code)\l        if handler is None:\l            return e\l        return handler(e)\l\l    def trap_http_exception(self, e):\l        \"\"\"Checks if an HTTP exception should be trapped or not.  By default\l        this will return `False` for all exceptions except for a bad request\l        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to `True`.  It\l        also returns `True` if ``TRAP_HTTP_EXCEPTIONS`` is set to `True`.\l\l        This is called for all HTTP exceptions raised by a view function.\l        If it returns `True` for any exception the error handler for this\l        exception is not called and it shows up as regular exception in the\l        traceback.  This is helpful for debugging implicitly raised HTTP\l        exceptions.\l\l        .. versionadded:: 0.8\l        \"\"\"\l        if self.config['TRAP_HTTP_EXCEPTIONS...']:\l            return True\l        if self.config['TRAP_BAD_REQUEST_ERR...']:\l            return isinstance(e, BadRequest)\l        return False\l\l    def handle_user_exception(self, e):\l        \"\"\"This method is called whenever an exception occurs that should be\l        handled.  A special case are\l        :class:`~werkzeug.exception.HTTPException`\\s which are forwarded by\l        this function to the :meth:`handle_http_exception` method.  This\l        function will either return a response value or reraise the\l        exception with the same traceback.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        exc_type, exc_value, tb = sys.exc_info()\l        assert exc_value is e\l        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\l            return self.handle_http_exception(e)\l        blueprint_handlers = ()\l        handlers = self.error_handler_spec.get(request.blueprint)\l        if handlers is not None:\l            blueprint_handlers = handlers.get(None, ())\l        app_handlers = self.error_handler_spec[None].get(None, ())\l        for typecheck, handler in chain(blueprint_handlers, app_handlers):\l            if isinstance(e, typecheck):\l                return handler(e)\l        reraise(exc_type, exc_value, tb)\l\l    def handle_exception(self, e):\l        \"\"\"Default exception handling that kicks in when an exception\l        occurs that is not caught.  In debug mode the exception will\l        be re-raised immediately, otherwise it is logged and the handler\l        for a 500 internal server error is used.  If no such handler\l        exists, a default 500 internal server error message is displayed.\l\l        .. versionadded:: 0.3\l        \"\"\"\l        exc_type, exc_value, tb = sys.exc_info()\l        got_request_exception.send(self, exception=e)\l        handler = self.error_handler_spec[None].get(500)\l        if self.propagate_exceptions:\l            if exc_value is e:\l                reraise(exc_type, exc_value, tb)\l            else:\l                raise e\l        self.log_exception((exc_type, exc_value, tb))\l        if handler is None:\l            return InternalServerError()\l        return handler(e)\l\l    def log_exception(self, exc_info):\l        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\l        if debugging is disabled and right before the handler is called.\l        The default implementation logs the exception as error on the\l        :attr:`logger`.\l\l        .. versionadded:: 0.8\l        \"\"\"\l        self.logger.error('Exception on %s [%s]...' % (request.path, request.\l            method), exc_info=exc_info)\l\l    def raise_routing_exception(self, request):\l        \"\"\"Exceptions that are recording during routing are reraised with\l        this method.  During debug we are not reraising redirect requests\l        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\l        a different error instead to help debug situations.\l\l        :internal:\l        \"\"\"\l        if not self.debug or not isinstance(request.routing_exception,\l            RequestRedirect) or request.method in ('GET', 'HEAD', 'OPTIONS'):\l            raise request.routing_exception\l        from .debughelpers import FormDataRoutingRedirect\l        raise FormDataRoutingRedirect(request)\l\l    def dispatch_request(self):\l        \"\"\"Does the request dispatching.  Matches the URL and returns the\l        return value of the view or error handler.  This does not have to\l        be a response object.  In order to convert the return value to a\l        proper response object, call :func:`make_response`.\l\l        .. versionchanged:: 0.7\l           This no longer does the exception handling, this code was\l           moved to the new :meth:`full_dispatch_request`.\l        \"\"\"\l        req = _request_ctx_stack.top.request\l        if req.routing_exception is not None:\l            self.raise_routing_exception(req)\l        rule = req.url_rule\l        if getattr(rule, 'provide_automatic_op...', False\l            ) and req.method == 'OPTIONS':\l            return self.make_default_options_response()\l        return self.view_functions[rule.endpoint](**req.view_args)\l\l    def full_dispatch_request(self):\l        \"\"\"Dispatches the request and on top of that performs request\l        pre and postprocessing as well as HTTP exception catching and\l        error handling.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        self.try_trigger_before_first_request_functions()\l        try:\l            request_started.send(self)\l            rv = self.preprocess_request()\l            if rv is None:\l                rv = self.dispatch_request()\l        except Exception as e:\l            rv = self.handle_user_exception(e)\l        response = self.make_response(rv)\l        response = self.process_response(response)\l        request_finished.send(self, response=response)\l        return response\l\l    def try_trigger_before_first_request_functions(self):\l        \"\"\"Called before each request and will ensure that it triggers\l        the :attr:`before_first_request_funcs` and only exactly once per\l        application instance (which means process usually).\l\l        :internal:\l        \"\"\"\l        if self._got_first_request:\l            return\l        with self._before_request_lock:\l            if self._got_first_request:\l                return\l            self._got_first_request = True\l            for func in self.before_first_request_funcs:\l                func()\l\l    def make_default_options_response(self):\l        \"\"\"This method is called to create the default `OPTIONS` response.\l        This can be changed through subclassing to change the default\l        behavior of `OPTIONS` responses.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        adapter = _request_ctx_stack.top.url_adapter\l        if hasattr(adapter, 'allowed_methods'):\l            methods = adapter.allowed_methods()\l        else:\l            methods = []\l            try:\l                adapter.match(method='--')\l            except MethodNotAllowed as e:\l                methods = e.valid_methods\l            except HTTPException as e:\l                pass\l        rv = self.response_class()\l        rv.allow.update(methods)\l        return rv\l\l    def make_response(self, rv):\l        \"\"\"Converts the return value from a view function to a real\l        response object that is an instance of :attr:`response_class`.\l\l        The following types are allowed for `rv`:\l\l        .. tabularcolumns:: |p{3.5cm}|p{9.5cm}|\l\l        ======================= ===========================================\l        :attr:`response_class`  the object is returned unchanged\l        :class:`str`            a response object is created with the\l                                string as body\l        :class:`unicode`        a response object is created with the\l                                string encoded to utf-8 as body\l        a WSGI function         the function is called as WSGI application\l                                and buffered as response object\l        :class:`tuple`          A tuple in the form ``(response, status,\l                                headers)`` where `response` is any of the\l                                types defined here, `status` is a string\l                                or an integer and `headers` is a list of\l                                a dictionary with header values.\l        ======================= ===========================================\l\l        :param rv: the return value from the view function\l\l        .. versionchanged:: 0.9\l           Previously a tuple was interpreted as the arguments for the\l           response object.\l        \"\"\"\l        status = headers = None\l        if isinstance(rv, tuple):\l            rv, status, headers = rv + (None,) * (3 - len(rv))\l        if rv is None:\l            raise ValueError('View function did no...')\l        if not isinstance(rv, self.response_class):\l            if isinstance(rv, string_types):\l                rv = self.response_class(rv, headers=headers, status=status)\l                headers = status = None\l            else:\l                rv = self.response_class.force_type(rv, request.environ)\l        if status is not None:\l            if isinstance(status, string_types):\l                rv.status = status\l            else:\l                rv.status_code = status\l        if headers:\l            rv.headers.extend(headers)\l        return rv\l\l    def create_url_adapter(self, request):\l        \"\"\"Creates a URL adapter for the given request.  The URL adapter\l        is created at a point where the request context is not yet set up\l        so the request is passed explicitly.\l\l        .. versionadded:: 0.6\l\l        .. versionchanged:: 0.9\l           This can now also be called without a request object when the\l           URL adapter is created for the application context.\l        \"\"\"\l        if request is not None:\l            return self.url_map.bind_to_environ(request.environ,\l                server_name=self.config['SERVER_NAME'])\l        if self.config['SERVER_NAME'] is not None:\l            return self.url_map.bind(self.config['SERVER_NAME'],\l                script_name=self.config['APPLICATION_ROOT'] or '/',\l                url_scheme=self.config['PREFERRED_URL_SCHEME...'])\l\l    def inject_url_defaults(self, endpoint, values):\l        \"\"\"Injects the URL defaults for the given endpoint directly into\l        the values dictionary passed.  This is used internally and\l        automatically called on URL building.\l\l        .. versionadded:: 0.7\l        \"\"\"\l        funcs = self.url_default_functions.get(None, ())\l        if '.' in endpoint:\l            bp = endpoint.rsplit('.', 1)[0]\l            funcs = chain(funcs, self.url_default_functions.get(bp, ()))\l        for func in funcs:\l            func(endpoint, values)\l\l    def handle_url_build_error(self, error, endpoint, values):\l        \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\l        \"\"\"\l        exc_type, exc_value, tb = sys.exc_info()\l        for handler in self.url_build_error_handlers:\l            try:\l                rv = handler(error, endpoint, values)\l                if rv is not None:\l                    return rv\l            except BuildError as error:\l                pass\l        if error is exc_value:\l            reraise(exc_type, exc_value, tb)\l        raise error\l\l    def preprocess_request(self):\l        \"\"\"Called before the actual request dispatching and will\l        call every as :meth:`before_request` decorated function.\l        If any of these function returns a value it's handled as\l        if it was the return value from the view and further\l        request handling is stopped.\l\l        This also triggers the :meth:`url_value_processor` functions before\l        the actual :meth:`before_request` functions are called.\l        \"\"\"\l        bp = _request_ctx_stack.top.request.blueprint\l        funcs = self.url_value_preprocessors.get(None, ())\l        if bp is not None and bp in self.url_value_preprocessors:\l            funcs = chain(funcs, self.url_value_preprocessors[bp])\l        for func in funcs:\l            func(request.endpoint, request.view_args)\l        funcs = self.before_request_funcs.get(None, ())\l        if bp is not None and bp in self.before_request_funcs:\l            funcs = chain(funcs, self.before_request_funcs[bp])\l        for func in funcs:\l            rv = func()\l            if rv is not None:\l                return rv\l\l    def process_response(self, response):\l        \"\"\"Can be overridden in order to modify the response object\l        before it's sent to the WSGI server.  By default this will\l        call all the :meth:`after_request` decorated functions.\l\l        .. versionchanged:: 0.5\l           As of Flask 0.5 the functions registered for after request\l           execution are called in reverse order of registration.\l\l        :param response: a :attr:`response_class` object.\l        :return: a new response object or the same, has to be an\l                 instance of :attr:`response_class`.\l        \"\"\"\l        ctx = _request_ctx_stack.top\l        bp = ctx.request.blueprint\l        funcs = ctx._after_request_functions\l        if bp is not None and bp in self.after_request_funcs:\l            funcs = chain(funcs, reversed(self.after_request_funcs[bp]))\l        if None in self.after_request_funcs:\l            funcs = chain(funcs, reversed(self.after_request_funcs[None]))\l        for handler in funcs:\l            response = handler(response)\l        if not self.session_interface.is_null_session(ctx.session):\l            self.save_session(ctx.session, response)\l        return response\l\l    def do_teardown_request(self, exc=None):\l        \"\"\"Called after the actual request dispatching and will\l        call every as :meth:`teardown_request` decorated function.  This is\l        not actually called by the :class:`Flask` object itself but is always\l        triggered when the request context is popped.  That way we have a\l        tighter control over certain resources under testing environments.\l\l        .. versionchanged:: 0.9\l           Added the `exc` argument.  Previously this was always using the\l           current exception information.\l        \"\"\"\l        if exc is None:\l            exc = sys.exc_info()[1]\l        funcs = reversed(self.teardown_request_funcs.get(None, ()))\l        bp = _request_ctx_stack.top.request.blueprint\l        if bp is not None and bp in self.teardown_request_funcs:\l            funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\l        for func in funcs:\l            rv = func(exc)\l        request_tearing_down.send(self, exc=exc)\l\l    def do_teardown_appcontext(self, exc=None):\l        \"\"\"Called when an application context is popped.  This works pretty\l        much the same as :meth:`do_teardown_request` but for the application\l        context.\l\l        .. versionadded:: 0.9\l        \"\"\"\l        if exc is None:\l            exc = sys.exc_info()[1]\l        for func in reversed(self.teardown_appcontext_funcs):\l            func(exc)\l        appcontext_tearing_down.send(self, exc=exc)\l\l    def app_context(self):\l        \"\"\"Binds the application only.  For as long as the application is bound\l        to the current context the :data:`flask.current_app` points to that\l        application.  An application context is automatically created when a\l        request context is pushed if necessary.\l\l        Example usage::\l\l            with app.app_context():\l                ...\l\l        .. versionadded:: 0.9\l        \"\"\"\l        return AppContext(self)\l\l    def request_context(self, environ):\l        \"\"\"Creates a :class:`~flask.ctx.RequestContext` from the given\l        environment and binds it to the current context.  This must be used in\l        combination with the `with` statement because the request is only bound\l        to the current context for the duration of the `with` block.\l\l        Example usage::\l\l            with app.request_context(environ):\l                do_something_with(request)\l\l        The object returned can also be used without the `with` statement\l        which is useful for working in the shell.  The example above is\l        doing exactly the same as this code::\l\l            ctx = app.request_context(environ)\l            ctx.push()\l            try:\l                do_something_with(request)\l            finally:\l                ctx.pop()\l\l        .. versionchanged:: 0.3\l           Added support for non-with statement usage and `with` statement\l           is now passed the ctx object.\l\l        :param environ: a WSGI environment\l        \"\"\"\l        return RequestContext(self, environ)\l\l    def test_request_context(self, *args, **kwargs):\l        \"\"\"Creates a WSGI environment from the given values (see\l        :func:`werkzeug.test.EnvironBuilder` for more information, this\l        function accepts the same arguments).\l        \"\"\"\l        from flask.testing import make_test_environ_builder\l        builder = make_test_environ_builder(self, *args, **kwargs)\l        try:\l            return self.request_context(builder.get_environ())\l        finally:\l            builder.close()\l\l    def wsgi_app(self, environ, start_response):\l        \"\"\"The actual WSGI application.  This is not implemented in\l        `__call__` so that middlewares can be applied without losing a\l        reference to the class.  So instead of doing this::\l\l            app = MyMiddleware(app)\l\l        It's a better idea to do this instead::\l\l            app.wsgi_app = MyMiddleware(app.wsgi_app)\l\l        Then you still have the original application object around and\l        can continue to call methods on it.\l\l        .. versionchanged:: 0.7\l           The behavior of the before and after request callbacks was changed\l           under error conditions and a new callback was added that will\l           always execute at the end of the request, independent on if an\l           error occurred or not.  See :ref:`callbacks-and-errors`.\l\l        :param environ: a WSGI environment\l        :param start_response: a callable accepting a status code,\l                               a list of headers and an optional\l                               exception context to start the response\l        \"\"\"\l        with self.request_context(environ):\l            try:\l                response = self.full_dispatch_request()\l            except Exception as e:\l                response = self.make_response(self.handle_exception(e))\l            return response(environ, start_response)\l\l    @property\l    def modules(self):\l        from warnings import warn\l        warn(DeprecationWarning(\l            'Flask.modules is dep...'),\l            stacklevel=2)\l        return self.blueprints\l\l    def __call__(self, environ, start_response):\l        \"\"\"Shortcut for :attr:`...\"\"\"\l        return self.wsgi_app(environ, start_response)\l\l    def __repr__(self):\l        return '<%s %r>' % (self.__class__.__name__, self.name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	1 -> 2 [label=calls style=dashed]
	subgraph cluster_1 {
		graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		2 [label=Lock color="#E552FF" shape=tab style=filled]
	}
	subgraph cluster0Flask {
		graph [compound=True fontname="DejaVu Sans Mono" label=Flask pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		23 [label="\"\"\"The flask object implements a WSGI application and acts as the central\l    object.  It is passed the name of the module or package of the\l    application.  Once it is created it will act as a central registry for\l    the view functions, the URL rules, template configuration and much more.\l\l    The name of the package is used to resolve resources from inside the\l    package or the folder the module is contained in depending on if the\l    package parameter resolves to an actual python package (a folder with\l    an `__init__.py` file inside) or a standard module (just a `.py` file).\l\l    For more information about resource loading, see :func:`open_resource`.\l\l    Usually you create a :class:`Flask` instance in your main module or\l    in the `__init__.py` file of your package like this::\l\l        from flask import Flask\l        app = Flask(__name__)\l\l    .. admonition:: About the First Parameter\l\l        The idea of the first parameter is to give Flask an idea what\l        belongs to your application.  This name is used to find resources\l        on the file system, can be used by extensions to improve debugging\l        information and a lot more.\l\l        So it's important what you provide there.  If you are using a single\l        module, `__name__` is always the correct value.  If you however are\l        using a package, it's usually recommended to hardcode the name of\l        your package there.\l\l        For example if your application is defined in `yourapplication/app.py`\l        you should create it with one of the two versions below::\l\l            app = Flask('yourapplication')\l            app = Flask(__name__.split('.')[0])\l\l        Why is that?  The application will work even with `__name__`, thanks\l        to how resources are looked up.  However it will make debugging more\l        painful.  Certain extensions can make assumptions based on the\l        import name of your application.  For example the Flask-SQLAlchemy\l        extension will look for the code in your application that triggered\l        an SQL query in debug mode.  If the import name is not properly set\l        up, that debugging information is lost.  (For example it would only\l        pick up SQL queries in `yourapplication.app` and not\l        `yourapplication.views.frontend`)\l\l    .. versionadded:: 0.7\l       The `static_url_path`, `static_folder`, and `template_folder`\l       parameters were added.\l\l    .. versionadded:: 0.8\l       The `instance_path` and `instance_relative_config` parameters were\l       added.\l\l    :param import_name: the name of the application package\l    :param static_url_path: can be used to specify a different path for the\l                            static files on the web.  Defaults to the name\l                            of the `static_folder` folder.\l    :param static_folder: the folder with static files that should be served\l                          at `static_url_path`.  Defaults to the ``'static'``\l                          folder in the root path of the application.\l    :param template_folder: the folder that contains the templates that should\l                            be used by the application.  Defaults to\l                            ``'templates'`` folder in the root path of the\l                            application.\l    :param instance_path: An alternative instance path for the application.\l                          By default the folder ``'instance'`` next to the\l                          package or module is assumed to be the instance\l                          path.\l    :param instance_relative_config: if set to `True` relative filenames\l                                     for loading the config are assumed to\l                                     be relative to the instance path instead\l                                     of the application root.\l    \"\"\"\lrequest_class = Request\lresponse_class = Response\lapp_ctx_globals_class = _AppCtxGlobals\ldef _get_request_globals_class(self):...\ldef _set_request_globals_class(self, value):...\lrequest_globals_class = property(_get_request_globals_class,\l    _set_request_globals_class)\ldebug = ConfigAttribute('DEBUG')\ltesting = ConfigAttribute('TESTING')\lsecret_key = ConfigAttribute('SECRET_KEY')\lsession_cookie_name = ConfigAttribute('SESSION_COOKIE_NAME')\lpermanent_session_lifetime = ConfigAttribute('PERMANENT_SESSION_LI...',\l    get_converter=_make_timedelta)\luse_x_sendfile = ConfigAttribute('USE_X_SENDFILE')\llogger_name = ConfigAttribute('LOGGER_NAME')\lenable_modules = True\ldebug_log_format = ('-' * 80 + '\n' +\l    '%(levelname)s in %(m...' +\l    '%(message)s\n' + '-' * 80)\ljson_encoder = json.JSONEncoder\ljson_decoder = json.JSONDecoder\ljinja_options = ImmutableDict(extensions=['jinja2.ext.autoescap...',\l    'jinja2.ext.with_'])\ldefault_config = ImmutableDict({'DEBUG': False, 'TESTING': False,\l    'PROPAGATE_EXCEPTIONS...': None, 'PRESERVE_CONTEXT_ON_...': None,\l    'SECRET_KEY': None, 'PERMANENT_SESSION_LI...': timedelta(days=31),\l    'USE_X_SENDFILE': False, 'LOGGER_NAME': None, 'SERVER_NAME': None,\l    'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session',\l    'SESSION_COOKIE_DOMAI...': None, 'SESSION_COOKIE_PATH': None,\l    'SESSION_COOKIE_HTTPO...': True, 'SESSION_COOKIE_SECUR...': False,\l    'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DE...': 12 * 60 * 60,\l    'TRAP_BAD_REQUEST_ERR...': False, 'TRAP_HTTP_EXCEPTIONS...': False,\l    'PREFERRED_URL_SCHEME...': 'http', 'JSON_AS_ASCII': True})\lurl_rule_class = Rule\ltest_client_class = None\lsession_interface = SecureCookieSessionInterface()\ldef __init__(self, import_name, static_path=None, static_url_path=None,...\ldef _get_error_handlers(self):...\ldef _set_error_handlers(self, value):...\lerror_handlers = property(_get_error_handlers, _set_error_handlers)\l@locked_cached_property...\l@property...\l@property...\l@property...\l@locked_cached_property...\l@property...\ldef make_config(self, instance_relative=False):...\ldef auto_find_instance_path(self):...\ldef open_instance_resource(self, resource, mode='rb'):...\ldef create_jinja_environment(self):...\ldef create_global_jinja_loader(self):...\ldef init_jinja_globals(self):...\ldef select_jinja_autoescape(self, filename):...\ldef update_template_context(self, context):...\ldef run(self, host=None, port=None, debug=None, **options):...\ldef test_client(self, use_cookies=True):...\ldef open_session(self, request):...\ldef save_session(self, session, response):...\ldef make_null_session(self):...\ldef register_module(self, module, **options):...\l@setupmethod...\l@setupmethod...\ldef route(self, rule, **options):...\l@setupmethod...\l@setupmethod...\ldef register_error_handler(self, code_or_exception, f):...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\l@setupmethod...\ldef handle_http_exception(self, e):...\ldef trap_http_exception(self, e):...\ldef handle_user_exception(self, e):...\ldef handle_exception(self, e):...\ldef log_exception(self, exc_info):...\ldef raise_routing_exception(self, request):...\ldef dispatch_request(self):...\ldef full_dispatch_request(self):...\ldef try_trigger_before_first_request_functions(self):...\ldef make_default_options_response(self):...\ldef make_response(self, rv):...\ldef create_url_adapter(self, request):...\ldef inject_url_defaults(self, endpoint, values):...\ldef handle_url_build_error(self, error, endpoint, values):...\ldef preprocess_request(self):...\ldef process_response(self, response):...\ldef do_teardown_request(self, exc=None):...\ldef do_teardown_appcontext(self, exc=None):...\ldef app_context(self):...\ldef request_context(self, environ):...\ldef test_request_context(self, *args, **kwargs):...\ldef wsgi_app(self, environ, start_response):...\l@property...\ldef __call__(self, environ, start_response):...\ldef __repr__(self):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		23 -> 33 [label=calls style=dashed]
		23 -> 34 [label=calls style=dashed]
		23 -> 35 [label=calls style=dashed]
		23 -> 36 [label=calls style=dashed]
		23 -> 37 [label=calls style=dashed]
		23 -> 38 [label=calls style=dashed]
		23 -> 39 [label=calls style=dashed]
		23 -> 40 [label=calls style=dashed]
		23 -> 41 [label=calls style=dashed]
		23 -> 42 [label=calls style=dashed]
		23 -> 44 [label=calls style=dashed]
		23 -> 82 [label=calls style=dashed]
		subgraph cluster_23 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			33 [label=property color="#E552FF" shape=tab style=filled]
			34 [label=ConfigAttribute color="#E552FF" shape=tab style=filled]
			35 [label=ConfigAttribute color="#E552FF" shape=tab style=filled]
			36 [label=ConfigAttribute color="#E552FF" shape=tab style=filled]
			37 [label=ConfigAttribute color="#E552FF" shape=tab style=filled]
			38 [label=ConfigAttribute color="#E552FF" shape=tab style=filled]
			39 [label=ConfigAttribute color="#E552FF" shape=tab style=filled]
			40 [label=ConfigAttribute color="#E552FF" shape=tab style=filled]
			41 [label=ImmutableDict color="#E552FF" shape=tab style=filled]
			42 [label=ImmutableDict color="#E552FF" shape=tab style=filled]
			43 [label=timedelta color="#E552FF" shape=tab style=filled]
			42 -> 43 [color=black]
			44 [label=SecureCookieSessionInterface color="#E552FF" shape=tab style=filled]
			82 [label=property color="#E552FF" shape=tab style=filled]
		}
		subgraph cluster0_get_request_globals_class {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_request_globals_class pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			25 [label="return self.app_ctx_globals_class\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		}
		subgraph cluster0_set_request_globals_class {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_request_globals_class pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			29 [label="from warnings import warn\lwarn(DeprecationWarning(\l    'request_globals_clas...'))\lself.app_ctx_globals_class = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			29 -> 30 [label=calls style=dashed]
			subgraph cluster_29 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				30 [label=warn color="#E552FF" shape=tab style=filled]
				31 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
				30 -> 31 [color=black]
			}
		}
		subgraph cluster0__init__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__init__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			46 [label="_PackageBoundObject.__init__(self, import_name, template_folder=template_folder\l    )\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			46 -> 47 [label=calls style=dashed]
			subgraph cluster_46 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				47 [label="_PackageBoundObject.__init__" color="#E552FF" shape=tab style=filled]
			}
			48 [label="if static_path is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			49 [label="from warnings import warn\lwarn(DeprecationWarning('static_path is now c...'),\l    stacklevel=2)\lstatic_url_path = static_path\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			49 -> 51 [label=calls style=dashed]
			subgraph cluster_49 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				51 [label=warn color="#E552FF" shape=tab style=filled]
				52 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
				51 -> 52 [color=black]
			}
			50 [label="if static_url_path is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			53 [label="self.static_url_path = static_url_path\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			54 [label="if static_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			55 [label="self.static_folder = static_folder\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			56 [label="if instance_path is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			57 [label="instance_path = self.auto_find_instance_path()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			57 -> 63 [label=calls style=dashed]
			subgraph cluster_57 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				63 [label="self.auto_find_instance_path" color="#E552FF" shape=tab style=filled]
			}
			58 [label="self.instance_path = instance_path\lself.config = self.make_config(instance_relative_config)\lself._logger = None\lself.logger_name = self.import_name\lself.view_functions = {}\lself._error_handlers = {}\lself.error_handler_spec = {None: self._error_handlers}\lself.url_build_error_handlers = []\lself.before_request_funcs = {}\lself.before_first_request_funcs = []\lself.after_request_funcs = {}\lself.teardown_request_funcs = {}\lself.teardown_appcontext_funcs = []\lself.url_value_preprocessors = {}\lself.url_default_functions = {}\lself.template_context_processors = {None: [_default_template_ctx_processor]}\lself.blueprints = {}\lself.extensions = {}\lself.url_map = Map()\lself._got_first_request = False\lself._before_request_lock = Lock()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			58 -> 64 [label=calls style=dashed]
			58 -> 65 [label=calls style=dashed]
			58 -> 66 [label=calls style=dashed]
			subgraph cluster_58 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				64 [label="self.make_config" color="#E552FF" shape=tab style=filled]
				65 [label=Map color="#E552FF" shape=tab style=filled]
				66 [label=Lock color="#E552FF" shape=tab style=filled]
			}
			67 [label="if self.has_static_folder:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			68 [label="self.add_url_rule(self.static_url_path + '/<path:filename>', endpoint=\l    'static', view_func=self.send_static_file)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			68 -> 70 [label=calls style=dashed]
			subgraph cluster_68 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				70 [label="self.add_url_rule" color="#E552FF" shape=tab style=filled]
			}
			67 -> 68 [label="self.has_static_folder" color=green]
			58 -> 67 [label="" color=black]
			57 -> 58 [label="" color=black]
			56 -> 57 [label="instance_path is None" color=green]
			59 [label="if not os.path.isabs(instance_path):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			60 [label="raise ValueError(\l    'If an instance path ...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			59 -> 60 [label="not os.path.isabs(instance_path)" color=green]
			59 -> 58 [label="(not not os.path.isabs(instance_path))" color=red]
			56 -> 59 [label="(instance_path is not None)" color=red]
			55 -> 56 [label="" color=black]
			54 -> 55 [label="static_folder is not None" color=green]
			54 -> 56 [label="(static_folder is None)" color=red]
			53 -> 54 [label="" color=black]
			50 -> 53 [label="static_url_path is not None" color=green]
			50 -> 54 [label="(static_url_path is None)" color=red]
			49 -> 50 [label="" color=black]
			48 -> 49 [label="static_path is not None" color=green]
			48 -> 50 [label="(static_path is None)" color=red]
			46 -> 48 [label="" color=black]
		}
		subgraph cluster0_get_error_handlers {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_error_handlers pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			73 [label="from warnings import warn\lwarn(DeprecationWarning(\l    'error_handlers is de...'\l    ), stacklevel=1)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			73 -> 74 [label=calls style=dashed]
			subgraph cluster_73 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				74 [label=warn color="#E552FF" shape=tab style=filled]
				75 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
				74 -> 75 [color=black]
			}
			76 [label="return self._error_handlers\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			73 -> 76 [label="" color=black]
		}
		subgraph cluster0_set_error_handlers {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_error_handlers pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			80 [label="self._error_handlers = value\lself.error_handler_spec[None] = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster0name {
			graph [compound=True fontname="DejaVu Sans Mono" label=name pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			84 [label="\"\"\"The name of the application.  This is usually the import name\l        with the difference that it's guessed from the run file if the\l        import name is main.  This name is used as a display name when\l        Flask needs the name of the application.  It can be set and overridden\l        to change the value.\l\l        .. versionadded:: 0.8\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			85 [label="if self.import_name == '__main__':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			86 [label="fn = getattr(sys.modules['__main__'], '__file__', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			86 -> 88 [label=calls style=dashed]
			subgraph cluster_86 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				88 [label=getattr color="#E552FF" shape=tab style=filled]
			}
			89 [label="if fn is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			90 [label="return '__main__'\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			89 -> 90 [label="fn is None" color=green]
			91 [label="return os.path.splitext(os.path.basename(fn))[0]\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			89 -> 91 [label="(fn is not None)" color=red]
			86 -> 89 [label="" color=black]
			85 -> 86 [label="self.import_name == '__main__'" color=green]
			87 [label="return self.import_name\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			85 -> 87 [label="(self.import_name != '__main__')" color=red]
			84 -> 85 [label="" color=black]
		}
		subgraph cluster0propagate_exceptions {
			graph [compound=True fontname="DejaVu Sans Mono" label=propagate_exceptions pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			97 [label="\"\"\"Returns the value of the `PROPAGATE_EXCEPTIONS` configuration\l        value in case it's set, otherwise a sensible default is returned.\l\l        .. versionadded:: 0.7\l        \"\"\"\lrv = self.config['PROPAGATE_EXCEPTIONS...']\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			98 [label="if rv is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			99 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			98 -> 99 [label="rv is not None" color=green]
			100 [label="return self.testing or self.debug\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			98 -> 100 [label="(rv is None)" color=red]
			97 -> 98 [label="" color=black]
		}
		subgraph cluster0preserve_context_on_exception {
			graph [compound=True fontname="DejaVu Sans Mono" label=preserve_context_on_exception pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			105 [label="\"\"\"Returns the value of the `PRESERVE_CONTEXT_ON_EXCEPTION`\l        configuration value in case it's set, otherwise a sensible default\l        is returned.\l\l        .. versionadded:: 0.7\l        \"\"\"\lrv = self.config['PRESERVE_CONTEXT_ON_...']\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			106 [label="if rv is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			107 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			106 -> 107 [label="rv is not None" color=green]
			108 [label="return self.debug\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			106 -> 108 [label="(rv is None)" color=red]
			105 -> 106 [label="" color=black]
		}
		subgraph cluster0logger {
			graph [compound=True fontname="DejaVu Sans Mono" label=logger pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			113 [label="\"\"\"A :class:`logging.Logger` object for this application.  The\l        default configuration is to log to stderr if the application is\l        in debug mode.  This logger can be used to (surprise) log messages.\l        Here some examples::\l\l            app.logger.debug('A value for debuggin...')\l            app.logger.warning('A warning occurred (...', 42)\l            app.logger.error('An error occurred')\l\l        .. versionadded:: 0.3\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			114 [label="if self._logger and self._logger.name == self.logger_name:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			115 [label="return self._logger\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			114 -> 115 [label="self._logger and self._logger.name == self.logger_name" color=green]
			116 [label="if self._logger and self._logger.name == self.logger_name:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			118 [label="return self._logger\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			116 -> 118 [label="self._logger and self._logger.name == self.logger_name" color=green]
			119 [label="from flask.logging import create_logger\lself._logger = rv = create_logger(self)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			119 -> 121 [label=calls style=dashed]
			subgraph cluster_119 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				121 [label=create_logger color="#E552FF" shape=tab style=filled]
			}
			122 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			119 -> 122 [label="" color=black]
			116 -> 119 [label="(not (self._logger and self._logger.name == self.logger_name))" color=red]
			114 -> 116 [label="(not (self._logger and self._logger.name == self.logger_name))" color=red]
			113 -> 114 [label="" color=black]
		}
		subgraph cluster0jinja_env {
			graph [compound=True fontname="DejaVu Sans Mono" label=jinja_env pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			126 [label="\"\"\"The Jinja2 environme...\"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			127 [label="return self.create_jinja_environment()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			126 -> 127 [label="" color=black]
		}
		subgraph cluster0got_first_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=got_first_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			131 [label="\"\"\"This attribute is set to `True` if the application started\l        handling the first request.\l\l        .. versionadded:: 0.8\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			132 [label="return self._got_first_request\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			131 -> 132 [label="" color=black]
		}
		subgraph cluster0make_config {
			graph [compound=True fontname="DejaVu Sans Mono" label=make_config pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			136 [label="\"\"\"Used to create the config attribute by the Flask constructor.\l        The `instance_relative` parameter is passed in from the constructor\l        of Flask (there named `instance_relative_config`) and indicates if\l        the config should be relative to the instance path or the root path\l        of the application.\l\l        .. versionadded:: 0.8\l        \"\"\"\lroot_path = self.root_path\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			137 [label="if instance_relative:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			138 [label="root_path = self.instance_path\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			139 [label="return Config(root_path, self.default_config)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			138 -> 139 [label="" color=black]
			137 -> 138 [label=instance_relative color=green]
			137 -> 139 [label="(not instance_relative)" color=red]
			136 -> 137 [label="" color=black]
		}
		subgraph cluster0auto_find_instance_path {
			graph [compound=True fontname="DejaVu Sans Mono" label=auto_find_instance_path pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			143 [label="\"\"\"Tries to locate the instance path if it was not provided to the\l        constructor of the application class.  It will basically calculate\l        the path to a folder named ``instance`` next to your main file or\l        the package.\l\l        .. versionadded:: 0.8\l        \"\"\"\lprefix, package_path = find_package(self.import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			143 -> 144 [label=calls style=dashed]
			subgraph cluster_143 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				144 [label=find_package color="#E552FF" shape=tab style=filled]
			}
			145 [label="if prefix is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			146 [label="return os.path.join(package_path, 'instance')\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			145 -> 146 [label="prefix is None" color=green]
			147 [label="return os.path.join(prefix, 'var', self.name + '-instance')\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			145 -> 147 [label="(prefix is not None)" color=red]
			143 -> 145 [label="" color=black]
		}
		subgraph cluster0open_instance_resource {
			graph [compound=True fontname="DejaVu Sans Mono" label=open_instance_resource pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			152 [label="\"\"\"Opens a resource fro...'s instance folder\l        (:attr:`instance_path`).  Otherwise works like\l        :meth:`open_resource`.  Instance resources can also be opened for\l        writing.\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        :param mode: resource file opening mode, default is 'rb'.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			153 [label="return open(os.path.join(self.instance_path, resource), mode)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			152 -> 153 [label="" color=black]
		}
		subgraph cluster0create_jinja_environment {
			graph [compound=True fontname="DejaVu Sans Mono" label=create_jinja_environment pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			157 [label="\"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\l        and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds\l        the Jinja2 globals and filters after initialization.  Override\l        this function to customize the behavior.\l\l        .. versionadded:: 0.5\l        \"\"\"\loptions = dict(self.jinja_options)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			157 -> 158 [label=calls style=dashed]
			subgraph cluster_157 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				158 [label=dict color="#E552FF" shape=tab style=filled]
			}
			159 [label="if 'autoescape' not in options:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			160 [label="options['autoescape'] = self.select_jinja_autoescape\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			161 [label="rv = Environment(self, **options)\lrv.globals.update(url_for=url_for, get_flashed_messages=\l    get_flashed_messages, config=self.config, request=request, session=\l    session, g=g)\lrv.filters['tojson'] = json.htmlsafe_dumps\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			161 -> 162 [label=calls style=dashed]
			161 -> 163 [label=calls style=dashed]
			subgraph cluster_161 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				162 [label=Environment color="#E552FF" shape=tab style=filled]
				163 [label="rv.globals.update" color="#E552FF" shape=tab style=filled]
			}
			164 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			161 -> 164 [label="" color=black]
			160 -> 161 [label="" color=black]
			159 -> 160 [label="'autoescape' not in options" color=green]
			159 -> 161 [label="('autoescape' in options)" color=red]
			157 -> 159 [label="" color=black]
		}
		subgraph cluster0create_global_jinja_loader {
			graph [compound=True fontname="DejaVu Sans Mono" label=create_global_jinja_loader pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			168 [label="\"\"\"Creates the loader for the Jinja2 environment.  Can be used to\l        override just the loader and keeping the rest unchanged.  It's\l        discouraged to override this function.  Instead one should override\l        the :meth:`jinja_loader` function instead.\l\l        The global loader dispatches between the loaders of the application\l        and the individual blueprints.\l\l        .. versionadded:: 0.7\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			169 [label="return DispatchingJinjaLoader(self)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			168 -> 169 [label="" color=black]
		}
		subgraph cluster0init_jinja_globals {
			graph [compound=True fontname="DejaVu Sans Mono" label=init_jinja_globals pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			173 [label="\"\"\"Deprecated.  Used to initialize the Jinja2 globals.\l\l        .. versionadded:: 0.5\l        .. versionchanged:: 0.7\l           This method is deprecated with 0.7.  Override\l           :meth:`create_jinja_environment` instead.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster0select_jinja_autoescape {
			graph [compound=True fontname="DejaVu Sans Mono" label=select_jinja_autoescape pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			176 [label="\"\"\"Returns `True` if autoescaping should be active for the given\l        template name.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			177 [label="if filename is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			178 [label="return False\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			177 -> 178 [label="filename is None" color=green]
			179 [label="return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			177 -> 179 [label="(filename is not None)" color=red]
			176 -> 177 [label="" color=black]
		}
		subgraph cluster0update_template_context {
			graph [compound=True fontname="DejaVu Sans Mono" label=update_template_context pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			184 [label="\"\"\"Update the template context with some commonly used variables.\l        This injects request, session, config and g into the template\l        context as well as everything template context processors want\l        to inject.  Note that the as of Flask 0.6, the original values\l        in the context will not be overridden if a context processor\l        decides to return a value with the same key.\l\l        :param context: the context as a dictionary that is updated in place\l                        to add extra variables.\l        \"\"\"\lfuncs = self.template_context_processors[None]\lreqctx = _request_ctx_stack.top\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			185 [label="if reqctx is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			186 [label="bp = reqctx.request.blueprint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			188 [label="if bp is not None and bp in self.template_context_processors:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			189 [label="funcs = chain(funcs, self.template_context_processors[bp])\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			189 -> 191 [label=calls style=dashed]
			subgraph cluster_189 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				191 [label=chain color="#E552FF" shape=tab style=filled]
			}
			187 [label="orig_ctx = context.copy()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			187 -> 192 [label=calls style=dashed]
			subgraph cluster_187 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				192 [label="context.copy" color="#E552FF" shape=tab style=filled]
			}
			193 [label="for func in funcs:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			194 [label="context.update(func())\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			194 -> 196 [label=calls style=dashed]
			subgraph cluster_194 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				196 [label="context.update" color="#E552FF" shape=tab style=filled]
				197 [label=func color="#E552FF" shape=tab style=filled]
				196 -> 197 [color=black]
			}
			194 -> 193 [label="" color=black]
			193 -> 194 [label=funcs color=green]
			195 [label="context.update(orig_ctx)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			195 -> 198 [label=calls style=dashed]
			subgraph cluster_195 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				198 [label="context.update" color="#E552FF" shape=tab style=filled]
			}
			193 -> 195 [label="" color=green]
			187 -> 193 [label="" color=black]
			189 -> 187 [label="" color=black]
			188 -> 189 [label="bp is not None and bp in self.template_context_processors" color=green]
			188 -> 187 [label="(not (bp is not None and bp in self.template_context_processors))" color=red]
			186 -> 188 [label="" color=black]
			185 -> 186 [label="reqctx is not None" color=green]
			185 -> 187 [label="(reqctx is None)" color=red]
			184 -> 185 [label="" color=black]
		}
		subgraph cluster0run {
			graph [compound=True fontname="DejaVu Sans Mono" label=run pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			201 [label="\"\"\"Runs the application on a local development server.  If the\l        :attr:`debug` flag is set the server will automatically reload\l        for code changes and show a debugger in case an exception happened.\l\l        If you want to run the application in debug mode, but disable the\l        code execution on the interactive debugger, you can pass\l        ``use_evalex=False`` as parameter.  This will keep the debugger's\l        traceback screen active, but disable code execution.\l\l        .. admonition:: Keep in Mind\l\l           Flask will suppress any server error with a generic error page\l           unless it is in debug mode.  As such to enable just the\l           interactive debugger without the code reloading, you have to\l           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\l           Setting ``use_debugger`` to `True` without being in debug mode\l           won't catch any exceptio...'t be any to\l           catch.\l\l        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\l                     have the server available externally as well. Defaults to\l                     ``'127.0.0.1'``.\l        :param port: the port of the webserver. Defaults to ``5000``.\l        :param debug: if given, enable or disable debug mode.\l                      See :attr:`debug`.\l        :param options: the options to be forwarded to the underlying\l                        Werkzeug server.  See\l                        :func:`werkzeug.serving.run_simple` for more\l                        information.\l        \"\"\"\lfrom werkzeug.serving import run_simple\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			202 [label="if host is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			203 [label="host = '127.0.0.1'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			204 [label="if port is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			205 [label="port = 5000\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			206 [label="if debug is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			207 [label="self.debug = bool(debug)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			207 -> 209 [label=calls style=dashed]
			subgraph cluster_207 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				209 [label=bool color="#E552FF" shape=tab style=filled]
			}
			208 [label="options.setdefault('use_reloader', self.debug)\loptions.setdefault('use_debugger', self.debug)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			208 -> 210 [label=calls style=dashed]
			208 -> 211 [label=calls style=dashed]
			subgraph cluster_208 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				210 [label="options.setdefault" color="#E552FF" shape=tab style=filled]
				211 [label="options.setdefault" color="#E552FF" shape=tab style=filled]
			}
			212 [label="run_simple(host, port, self, **options)\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			212 -> 214 [label=calls style=dashed]
			subgraph cluster_212 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				214 [label=run_simple color="#E552FF" shape=tab style=filled]
			}
			213 [label="self._got_first_request = False\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			212 -> 213 [label="" color=black]
			208 -> 212 [label="" color=black]
			207 -> 208 [label="" color=black]
			206 -> 207 [label="debug is not None" color=green]
			206 -> 208 [label="(debug is None)" color=red]
			205 -> 206 [label="" color=black]
			204 -> 205 [label="port is None" color=green]
			204 -> 206 [label="(port is not None)" color=red]
			203 -> 204 [label="" color=black]
			202 -> 203 [label="host is None" color=green]
			202 -> 204 [label="(host is not None)" color=red]
			201 -> 202 [label="" color=black]
		}
		subgraph cluster0test_client {
			graph [compound=True fontname="DejaVu Sans Mono" label=test_client pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			218 [label="\"\"\"Creates a test client for this application.  For information\l        about unit testing head over to :ref:`testing`.\l\l        Note that if you are testing for assertions or exceptions in your\l        application code, you must set ``app.testing = True`` in order for the\l        exceptions to propagate to the test client.  Otherwise, the exception\l        will be handled by the application (not visible to the test client) and\l        the only indication of an AssertionError or other exception will be a\l        500 status code response to the test client.  See the :attr:`testing`\l        attribute.  For example::\l\l            app.testing = True\l            client = app.test_client()\l\l        The test client can be used in a `with` block to defer the closing down\l        of the context until the end of the `with` block.  This is useful if\l        you want to access the context locals for testing::\l\l            with app.test_client() as c:\l                rv = c.get('/?vodka=42')\l                assert request.args['vodka'] == '42'\l\l        See :class:`~flask.testing.FlaskClient` for more information.\l\l        .. versionchanged:: 0.4\l           added support for `with` block usage for the client.\l\l        .. versionadded:: 0.7\l           The `use_cookies` parameter was added as well as the ability\l           to override the client to be used by setting the\l           :attr:`test_client_class` attribute.\l        \"\"\"\lcls = self.test_client_class\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			219 [label="if cls is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			220 [label="from flask.testing import FlaskClient as cls\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			221 [label="return cls(self, self.response_class, use_cookies=use_cookies)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			220 -> 221 [label="" color=black]
			219 -> 220 [label="cls is None" color=green]
			219 -> 221 [label="(cls is not None)" color=red]
			218 -> 219 [label="" color=black]
		}
		subgraph cluster0open_session {
			graph [compound=True fontname="DejaVu Sans Mono" label=open_session pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			225 [label="\"\"\"Creates or opens a new session.  Default implementation stores all\l        session data in a signed cookie.  This requires that the\l        :attr:`secret_key` is set.  Instead of overriding this method\l        we recommend replacing the :class:`session_interface`.\l\l        :param request: an instance of :attr:`request_class`.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			226 [label="return self.session_interface.open_session(self, request)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			225 -> 226 [label="" color=black]
		}
		subgraph cluster0save_session {
			graph [compound=True fontname="DejaVu Sans Mono" label=save_session pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			230 [label="\"\"\"Saves the session if it needs updates.  For the default\l        implementation, check :meth:`open_session`.  Instead of overriding this\l        method we recommend replacing the :class:`session_interface`.\l\l        :param session: the session to be saved (a\l                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\l                        object)\l        :param response: an instance of :attr:`response_class`\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			231 [label="return self.session_interface.save_session(self, session, response)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			230 -> 231 [label="" color=black]
		}
		subgraph cluster0make_null_session {
			graph [compound=True fontname="DejaVu Sans Mono" label=make_null_session pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			235 [label="\"\"\"Creates a new instance of a missing session.  Instead of overriding\l        this method we recommend replacing the :class:`session_interface`.\l\l        .. versionadded:: 0.7\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			236 [label="return self.session_interface.make_null_session(self)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			235 -> 236 [label="" color=black]
		}
		subgraph cluster0register_module {
			graph [compound=True fontname="DejaVu Sans Mono" label=register_module pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			240 [label="\"\"\"Registers a module with this application.  The keyword argument\l        of this function are the same as the ones for the constructor of the\l        :class:`Module` class and will override the values of the module if\l        provided.\l\l        .. versionchanged:: 0.7\l           The module system was deprecated in favor for the blueprint\l           system.\l        \"\"\"\lassert blueprint_is_module(module\l    ), 'register_module requ...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			242 [label="if not self.enable_modules:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			242 -> 243 [label=calls style=dashed]
			subgraph cluster_242 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				243 [label=blueprint_is_module color="#E552FF" shape=tab style=filled]
			}
			244 [label="raise RuntimeError(\l    'Module support was d...'\l     % module)\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			242 -> 244 [label="not self.enable_modules" color=green]
			246 [label="from warnings import warn\lwarn(DeprecationWarning(\l    'Modules are deprecat...'\l     % module), stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			246 -> 247 [label=calls style=dashed]
			subgraph cluster_246 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				247 [label=warn color="#E552FF" shape=tab style=filled]
				248 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
				247 -> 248 [color=black]
			}
			245 [label="self.register_blueprint(module, **options)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			245 -> 250 [label=calls style=dashed]
			subgraph cluster_245 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				250 [label="self.register_blueprint" color="#E552FF" shape=tab style=filled]
			}
			246 -> 245 [label="" color=black]
			242 -> 246 [label="(not not self.enable_modules)" color=red]
			240 -> 242 [label="blueprint_is_module(module)" color=black]
		}
		subgraph cluster0register_blueprint {
			graph [compound=True fontname="DejaVu Sans Mono" label=register_blueprint pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			253 [label="\"\"\"Registers a blueprint on the application.\l\l        .. versionadded:: 0.7\l        \"\"\"\lfirst_registration = False\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			254 [label="if blueprint.name in self.blueprints:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			255 [label="assert self.blueprints[blueprint.name\l    ] is blueprint, 'A blueprint\'s name collision occ...\"%s\".  Blueprints that a...' % (\l    blueprint, self.blueprints[blueprint.name], blueprint.name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			259 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			256 [label="blueprint.register(self, options, first_registration)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			256 -> 260 [label=calls style=dashed]
			subgraph cluster_256 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				260 [label="blueprint.register" color="#E552FF" shape=tab style=filled]
			}
			259 -> 256 [label="" color=black]
			255 -> 259 [label="self.blueprints[blueprint.name] is blueprint" color=black]
			254 -> 255 [label="blueprint.name in self.blueprints" color=green]
			257 [label="self.blueprints[blueprint.name] = blueprint\lfirst_registration = True\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			257 -> 256 [label="" color=black]
			254 -> 257 [label="(blueprint.name not in self.blueprints)" color=red]
			253 -> 254 [label="" color=black]
		}
		subgraph cluster0add_url_rule {
			graph [compound=True fontname="DejaVu Sans Mono" label=add_url_rule pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			263 [label="\"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\l        decorator.  If a view_func is provided it will be registered with the\l        endpoint.\l\l        Basically this example::\l\l            @app.route('/')\l            def index():\l                pass\l\l        Is equivalent to the following::\l\l            def index():\l                pass\l            app.add_url_rule('/', 'index', index)\l\l        If the view_func is not provided you will need to connect the endpoint\l        to a view function like so::\l\l            app.view_functions['index'] = index\l\l        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want\l        to customize the behavior via subclassing you only need to change\l        this method.\l\l        For more information refer to :ref:`url-route-registrations`.\l\l        .. versionchanged:: 0.2\l           `view_func` parameter added.\l\l        .. versionchanged:: 0.6\l           `OPTIONS` is added automatically as method.\l\l        :param rule: the URL rule as string\l        :param endpoint: the endpoint for the registered URL rule.  Flask\l                         itself assumes the name of the view function as\l                         endpoint\l        :param view_func: the function to call when serving a request to the\l                          provided endpoint\l        :param options: the options to be forwarded to the underlying\l                        :class:`~werkzeug.routing.Rule` object.  A change\l                        to Werkzeug is handling of method options.  methods\l                        is a list of methods this rule should be limited\l                        to (`GET`, `POST` etc.).  By default a rule\l                        just listens for `GET` (and implicitly `HEAD`).\l                        Starting with Flask 0.6, `OPTIONS` is implicitly\l                        added and handled by the standard request handling.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			264 [label="if endpoint is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			265 [label="endpoint = _endpoint_from_view_func(view_func)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			265 -> 267 [label=calls style=dashed]
			subgraph cluster_265 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				267 [label=_endpoint_from_view_func color="#E552FF" shape=tab style=filled]
			}
			266 [label="options['endpoint'] = endpoint\lmethods = options.pop('methods', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			266 -> 268 [label=calls style=dashed]
			subgraph cluster_266 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				268 [label="options.pop" color="#E552FF" shape=tab style=filled]
			}
			269 [label="if methods is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			270 [label="methods = getattr(view_func, 'methods', None) or ('GET',)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			270 -> 272 [label=calls style=dashed]
			subgraph cluster_270 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				272 [label=getattr color="#E552FF" shape=tab style=filled]
			}
			271 [label="methods = set(methods)\lrequired_methods = set(getattr(view_func, 'required_methods', ()))\lprovide_automatic_options = getattr(view_func, 'provide_automatic_op...',\l    None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			271 -> 273 [label=calls style=dashed]
			271 -> 274 [label=calls style=dashed]
			271 -> 276 [label=calls style=dashed]
			subgraph cluster_271 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				273 [label=set color="#E552FF" shape=tab style=filled]
				274 [label=set color="#E552FF" shape=tab style=filled]
				275 [label=getattr color="#E552FF" shape=tab style=filled]
				274 -> 275 [color=black]
				276 [label=getattr color="#E552FF" shape=tab style=filled]
			}
			277 [label="if provide_automatic_options is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			278 [label="if 'OPTIONS' not in methods:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			280 [label="provide_automatic_options = True\lrequired_methods.add('OPTIONS')\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			280 -> 283 [label=calls style=dashed]
			subgraph cluster_280 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				283 [label="required_methods.add" color="#E552FF" shape=tab style=filled]
			}
			279 [label="methods |= required_methods\loptions['defaults'] = options.get('defaults') or None\lrule = self.url_rule_class(rule, methods=methods, **options)\lrule.provide_automatic_options = provide_automatic_options\lself.url_map.add(rule)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			279 -> 284 [label=calls style=dashed]
			279 -> 285 [label=calls style=dashed]
			279 -> 286 [label=calls style=dashed]
			subgraph cluster_279 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				284 [label="options.get" color="#E552FF" shape=tab style=filled]
				285 [label="self.url_rule_class" color="#E552FF" shape=tab style=filled]
				286 [label="self.url_map.add" color="#E552FF" shape=tab style=filled]
			}
			287 [label="if view_func is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			288 [label="old_func = self.view_functions.get(endpoint)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			288 -> 290 [label=calls style=dashed]
			subgraph cluster_288 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				290 [label="self.view_functions.get" color="#E552FF" shape=tab style=filled]
			}
			291 [label="if old_func is not None and old_func is not view_func:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			292 [label="raise AssertionError(\l    'View function mappin...' %\l    endpoint)\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			291 -> 292 [label="old_func is not None and old_func is not view_func" color=green]
			293 [label="self.view_functions[endpoint] = view_func\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			291 -> 293 [label="(not (old_func is not None and old_func is not view_func))" color=red]
			288 -> 291 [label="" color=black]
			287 -> 288 [label="view_func is not None" color=green]
			279 -> 287 [label="" color=black]
			280 -> 279 [label="" color=black]
			278 -> 280 [label="'OPTIONS' not in methods" color=green]
			282 [label="provide_automatic_options = False\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			282 -> 279 [label="" color=black]
			278 -> 282 [label="('OPTIONS' in methods)" color=red]
			277 -> 278 [label="provide_automatic_options is None" color=green]
			277 -> 279 [label="(provide_automatic_options is not None)" color=red]
			271 -> 277 [label="" color=black]
			270 -> 271 [label="" color=black]
			269 -> 270 [label="methods is None" color=green]
			269 -> 271 [label="(methods is not None)" color=red]
			266 -> 269 [label="" color=black]
			265 -> 266 [label="" color=black]
			264 -> 265 [label="endpoint is None" color=green]
			264 -> 266 [label="(endpoint is not None)" color=red]
			263 -> 264 [label="" color=black]
		}
		subgraph cluster0route {
			graph [compound=True fontname="DejaVu Sans Mono" label=route pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			297 [label="\"\"\"A decorator that is used to register a view function for a\l        given URL rule.  This does the same thing as :meth:`add_url_rule`\l        but is intended for decorator usage::\l\l            @app.route('/')\l            def index():\l                return 'Hello World'\l\l        For more information refer to :ref:`url-route-registrations`.\l\l        :param rule: the URL rule as string\l        :param endpoint: the endpoint for the registered URL rule.  Flask\l                         itself assumes the name of the view function as\l                         endpoint\l        :param view_func: the function to call when serving a request to the\l                          provided endpoint\l        :param options: the options to be forwarded to the underlying\l                        :class:`~werkzeug.routing.Rule` object.  A change\l                        to Werkzeug is handling of method options.  methods\l                        is a list of methods this rule should be limited\l                        to (`GET`, `POST` etc.).  By default a rule\l                        just listens for `GET` (and implicitly `HEAD`).\l                        Starting with Flask 0.6, `OPTIONS` is implicitly\l                        added and handled by the standard request handling.\l        \"\"\"\ldef decorator(f):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			305 [label="return decorator\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			297 -> 305 [label="" color=black]
			subgraph cluster0decorator {
				graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				299 [label="endpoint = options.pop('endpoint', None)\lself.add_url_rule(rule, endpoint, f, **options)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
				299 -> 300 [label=calls style=dashed]
				299 -> 301 [label=calls style=dashed]
				subgraph cluster_299 {
					graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
					node [fontname="DejaVu Sans Mono"]
					edge [fontname="DejaVu Sans Mono"]
					300 [label="options.pop" color="#E552FF" shape=tab style=filled]
					301 [label="self.add_url_rule" color="#E552FF" shape=tab style=filled]
				}
				302 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
				299 -> 302 [label="" color=black]
			}
		}
		subgraph cluster0endpoint {
			graph [compound=True fontname="DejaVu Sans Mono" label=endpoint pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			309 [label="\"\"\"A decorator to register a function as an endpoint.\l        Example::\l\l            @app.endpoint('example.endpoint')\l            def example():\l                return \"example\"\l\l        :param endpoint: the name of the endpoint\l        \"\"\"\ldef decorator(f):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			315 [label="return decorator\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			309 -> 315 [label="" color=black]
			subgraph cluster1decorator {
				graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				311 [label="self.view_functions[endpoint] = f\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
				312 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
				311 -> 312 [label="" color=black]
			}
		}
		subgraph cluster0errorhandler {
			graph [compound=True fontname="DejaVu Sans Mono" label=errorhandler pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			319 [label="\"\"\"A decorator that is used to register a function give a given\l        error code.  Example::\l\l            @app.errorhandler(404)\l            def page_not_found(error):\l                return 'This page does not e...', 404\l\l        You can also register handlers for arbitrary exceptions::\l\l            @app.errorhandler(DatabaseError)\l            def special_exception_handler(error):\l                return 'Database connection ...', 500\l\l        You can also register a function as error handler without using\l        the :meth:`errorhandler` decorator.  The following example is\l        equivalent to the one above::\l\l            def page_not_found(error):\l                return 'This page does not e...', 404\l            app.error_handler_spec[None][404] = page_not_found\l\l        Setting error handlers via assignments to :attr:`error_handler_spec`\l        however is discouraged as it requires fiddling with nested dictionaries\l        and the special case for arbitrary exception types.\l\l        The first `None` refers to the active blueprint.  If the error\l        handler should be application wide `None` shall be used.\l\l        .. versionadded:: 0.7\l           One can now additionally also register custom exception types\l           that do not necessarily have to be a subclass of the\l           :class:`~werkzeug.exceptions.HTTPException` class.\l\l        :param code: the code as integer for the handler\l        \"\"\"\ldef decorator(f):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			326 [label="return decorator\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			319 -> 326 [label="" color=black]
			subgraph cluster2decorator {
				graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				321 [label="self._register_error_handler(None, code_or_exception, f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
				321 -> 322 [label=calls style=dashed]
				subgraph cluster_321 {
					graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
					node [fontname="DejaVu Sans Mono"]
					edge [fontname="DejaVu Sans Mono"]
					322 [label="self._register_error_handler" color="#E552FF" shape=tab style=filled]
				}
				323 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
				321 -> 323 [label="" color=black]
			}
		}
		subgraph cluster0register_error_handler {
			graph [compound=True fontname="DejaVu Sans Mono" label=register_error_handler pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			330 [label="\"\"\"Alternative error attach function to the :meth:`errorhandler`\l        decorator that is more straightforward to use for non decorator\l        usage.\l\l        .. versionadded:: 0.7\l        \"\"\"\lself._register_error_handler(None, code_or_exception, f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			330 -> 331 [label=calls style=dashed]
			subgraph cluster_330 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				331 [label="self._register_error_handler" color="#E552FF" shape=tab style=filled]
			}
		}
		subgraph cluster0_register_error_handler {
			graph [compound=True fontname="DejaVu Sans Mono" label=_register_error_handler pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			334 [label="if isinstance(code_or_exception, HTTPException):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			334 -> 335 [label=calls style=dashed]
			subgraph cluster_334 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				335 [label=isinstance color="#E552FF" shape=tab style=filled]
			}
			336 [label="code_or_exception = code_or_exception.code\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			337 [label="if isinstance(code_or_exception, integer_types):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			337 -> 338 [label=calls style=dashed]
			subgraph cluster_337 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				338 [label=isinstance color="#E552FF" shape=tab style=filled]
			}
			339 [label="assert code_or_exception != 500 or key is None, 'It is currently not ...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			344 [label="self.error_handler_spec.setdefault(key, {})[code_or_exception] = f\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			344 -> 345 [label=calls style=dashed]
			subgraph cluster_344 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				345 [label="self.error_handler_spec.setdefault" color="#E552FF" shape=tab style=filled]
			}
			339 -> 344 [label="code_or_exception != 500 or key is None" color=black]
			337 -> 339 [label="isinstance(code_or_exception, integer_types)" color=green]
			341 [label="self.error_handler_spec.setdefault(key, {}).setdefault(None, []).append((\l    code_or_exception, f))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			341 -> 342 [label=calls style=dashed]
			subgraph cluster_341 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				342 [label="self.error_handler_spec.setdefault.setdefault.append" color="#E552FF" shape=tab style=filled]
			}
			337 -> 341 [label="(not isinstance(code_or_exception, integer_types))" color=red]
			336 -> 337 [label="" color=black]
			334 -> 336 [label="isinstance(code_or_exception, HTTPException)" color=green]
			334 -> 337 [label="(not isinstance(code_or_exception, HTTPException))" color=red]
		}
		subgraph cluster0template_filter {
			graph [compound=True fontname="DejaVu Sans Mono" label=template_filter pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			348 [label="\"\"\"A decorator that is used to register custom template filter.\l        You can specify a name for the filter, otherwise the function\l        name will be used. Example::\l\l          @app.template_filter()\l          def reverse(s):\l              return s[::-1]\l\l        :param name: the optional name of the filter, otherwise the\l                     function name will be used.\l        \"\"\"\ldef decorator(f):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			355 [label="return decorator\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			348 -> 355 [label="" color=black]
			subgraph cluster3decorator {
				graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				350 [label="self.add_template_filter(f, name=name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
				350 -> 351 [label=calls style=dashed]
				subgraph cluster_350 {
					graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
					node [fontname="DejaVu Sans Mono"]
					edge [fontname="DejaVu Sans Mono"]
					351 [label="self.add_template_filter" color="#E552FF" shape=tab style=filled]
				}
				352 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
				350 -> 352 [label="" color=black]
			}
		}
		subgraph cluster0add_template_filter {
			graph [compound=True fontname="DejaVu Sans Mono" label=add_template_filter pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			359 [label="\"\"\"Register a custom template filter.  Works exactly like the\l        :meth:`template_filter` decorator.\l\l        :param name: the optional name of the filter, otherwise the\l                     function name will be used.\l        \"\"\"\lself.jinja_env.filters[name or f.__name__] = f\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster0template_test {
			graph [compound=True fontname="DejaVu Sans Mono" label=template_test pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			362 [label="\"\"\"A decorator that is used to register custom template test.\l        You can specify a name for the test, otherwise the function\l        name will be used. Example::\l\l          @app.template_test()\l          def is_prime(n):\l              if n == 2:\l                  return True\l              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\l                  if n % i == 0:\l                      return False\l              return True\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the test, otherwise the\l                     function name will be used.\l        \"\"\"\ldef decorator(f):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			369 [label="return decorator\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			362 -> 369 [label="" color=black]
			subgraph cluster4decorator {
				graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				364 [label="self.add_template_test(f, name=name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
				364 -> 365 [label=calls style=dashed]
				subgraph cluster_364 {
					graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
					node [fontname="DejaVu Sans Mono"]
					edge [fontname="DejaVu Sans Mono"]
					365 [label="self.add_template_test" color="#E552FF" shape=tab style=filled]
				}
				366 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
				364 -> 366 [label="" color=black]
			}
		}
		subgraph cluster0add_template_test {
			graph [compound=True fontname="DejaVu Sans Mono" label=add_template_test pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			373 [label="\"\"\"Register a custom template test.  Works exactly like the\l        :meth:`template_test` decorator.\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the test, otherwise the\l                     function name will be used.\l        \"\"\"\lself.jinja_env.tests[name or f.__name__] = f\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster0template_global {
			graph [compound=True fontname="DejaVu Sans Mono" label=template_global pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			376 [label="\"\"\"A decorator that is used to register a custom template global function.\l        You can specify a name for the global function, otherwise the function\l        name will be used. Example::\l\l            @app.template_global()\l            def double(n):\l                return 2 * n\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the global function, otherwise the\l                     function name will be used.\l        \"\"\"\ldef decorator(f):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			383 [label="return decorator\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			376 -> 383 [label="" color=black]
			subgraph cluster5decorator {
				graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				378 [label="self.add_template_global(f, name=name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
				378 -> 379 [label=calls style=dashed]
				subgraph cluster_378 {
					graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
					node [fontname="DejaVu Sans Mono"]
					edge [fontname="DejaVu Sans Mono"]
					379 [label="self.add_template_global" color="#E552FF" shape=tab style=filled]
				}
				380 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
				378 -> 380 [label="" color=black]
			}
		}
		subgraph cluster0add_template_global {
			graph [compound=True fontname="DejaVu Sans Mono" label=add_template_global pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			387 [label="\"\"\"Register a custom template global function. Works exactly like the\l        :meth:`template_global` decorator.\l\l        .. versionadded:: 0.10\l\l        :param name: the optional name of the global function, otherwise the\l                     function name will be used.\l        \"\"\"\lself.jinja_env.globals[name or f.__name__] = f\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster0before_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=before_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			390 [label="\"\"\"Registers a function...\"\"\"\lself.before_request_funcs.setdefault(None, []).append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			390 -> 391 [label=calls style=dashed]
			subgraph cluster_390 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				391 [label="self.before_request_funcs.setdefault.append" color="#E552FF" shape=tab style=filled]
			}
			392 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			390 -> 392 [label="" color=black]
		}
		subgraph cluster0before_first_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=before_first_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			396 [label="\"\"\"Registers a function to be run before the first request to this\l        instance of the application.\l\l        .. versionadded:: 0.8\l        \"\"\"\lself.before_first_request_funcs.append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			396 -> 397 [label=calls style=dashed]
			subgraph cluster_396 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				397 [label="self.before_first_request_funcs.append" color="#E552FF" shape=tab style=filled]
			}
		}
		subgraph cluster0after_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=after_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			400 [label="\"\"\"Register a function to be run after each request.  Your function\l        must take one parameter, a :attr:`response_class` object and return\l        a new response object or the same (see :meth:`process_response`).\l\l        As of Flask 0.7 this function might not be executed at the end of the\l        request in case an unhandled exception occurred.\l        \"\"\"\lself.after_request_funcs.setdefault(None, []).append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			400 -> 401 [label=calls style=dashed]
			subgraph cluster_400 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				401 [label="self.after_request_funcs.setdefault.append" color="#E552FF" shape=tab style=filled]
			}
			402 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			400 -> 402 [label="" color=black]
		}
		subgraph cluster0teardown_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=teardown_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			406 [label="\"\"\"Register a function to be run at the end of each request,\l        regardless of whether there was an exception or not.  These functions\l        are executed when the request context is popped, even if not an\l        actual request was performed.\l\l        Example::\l\l            ctx = app.test_request_context()\l            ctx.push()\l            ...\l            ctx.pop()\l\l        When ``ctx.pop()`` is executed in the above example, the teardown\l        functions are called just before the request context moves from the\l        stack of active contexts.  This becomes relevant if you are using\l        such constructs in tests.\l\l        Generally teardown functions must take every necessary step to avoid\l        that they will fail.  If they do execute code that might fail they\l        will have to surround the execution of these code by try/except\l        statements and log occurring errors.\l\l        When a teardown function was called because of a exception it will\l        be passed an error object.\l\l        .. admonition:: Debug Note\l\l           In debug mode Flask will not tear down a request on an exception\l           immediately.  Instead if will keep it alive so that the interactive\l           debugger can still access it.  This behavior can be controlled\l           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\l        \"\"\"\lself.teardown_request_funcs.setdefault(None, []).append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			406 -> 407 [label=calls style=dashed]
			subgraph cluster_406 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				407 [label="self.teardown_request_funcs.setdefault.append" color="#E552FF" shape=tab style=filled]
			}
			408 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			406 -> 408 [label="" color=black]
		}
		subgraph cluster0teardown_appcontext {
			graph [compound=True fontname="DejaVu Sans Mono" label=teardown_appcontext pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			412 [label="\"\"\"Registers a function to be called when the application context\l        ends.  These functions are typically also called when the request\l        context is popped.\l\l        Example::\l\l            ctx = app.app_context()\l            ctx.push()\l            ...\l            ctx.pop()\l\l        When ``ctx.pop()`` is executed in the above example, the teardown\l        functions are called just before the app context moves from the\l        stack of active contexts.  This becomes relevant if you are using\l        such constructs in tests.\l\l        Since a request context typically also manages an application\l        context it would also be called when you pop a request context.\l\l        When a teardown function was called because of an exception it will\l        be passed an error object.\l\l        .. versionadded:: 0.9\l        \"\"\"\lself.teardown_appcontext_funcs.append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			412 -> 413 [label=calls style=dashed]
			subgraph cluster_412 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				413 [label="self.teardown_appcontext_funcs.append" color="#E552FF" shape=tab style=filled]
			}
			414 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			412 -> 414 [label="" color=black]
		}
		subgraph cluster0context_processor {
			graph [compound=True fontname="DejaVu Sans Mono" label=context_processor pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			418 [label="\"\"\"Registers a template...\"\"\"\lself.template_context_processors[None].append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			418 -> 419 [label=calls style=dashed]
			subgraph cluster_418 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				419 [label="self.template_context_processors.append" color="#E552FF" shape=tab style=filled]
			}
			420 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			418 -> 420 [label="" color=black]
		}
		subgraph cluster0url_value_preprocessor {
			graph [compound=True fontname="DejaVu Sans Mono" label=url_value_preprocessor pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			424 [label="\"\"\"Registers a function as URL value preprocessor for all view\l        functions of the application.  It's called before the view functions\l        are called and can modify the url values provided.\l        \"\"\"\lself.url_value_preprocessors.setdefault(None, []).append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			424 -> 425 [label=calls style=dashed]
			subgraph cluster_424 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				425 [label="self.url_value_preprocessors.setdefault.append" color="#E552FF" shape=tab style=filled]
			}
			426 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			424 -> 426 [label="" color=black]
		}
		subgraph cluster0url_defaults {
			graph [compound=True fontname="DejaVu Sans Mono" label=url_defaults pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			430 [label="\"\"\"Callback function for URL defaults for all view functions of the\l        application.  It's called with the endpoint and values and should\l        update the values passed in place.\l        \"\"\"\lself.url_default_functions.setdefault(None, []).append(f)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			430 -> 431 [label=calls style=dashed]
			subgraph cluster_430 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				431 [label="self.url_default_functions.setdefault.append" color="#E552FF" shape=tab style=filled]
			}
			432 [label="return f\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			430 -> 432 [label="" color=black]
		}
		subgraph cluster0handle_http_exception {
			graph [compound=True fontname="DejaVu Sans Mono" label=handle_http_exception pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			436 [label="\"\"\"Handles an HTTP exception.  By default this will invoke the\l        registered error handlers and fall back to returning the\l        exception as response.\l\l        .. versionadded:: 0.3\l        \"\"\"\lhandlers = self.error_handler_spec.get(request.blueprint)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			436 -> 437 [label=calls style=dashed]
			subgraph cluster_436 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				437 [label="self.error_handler_spec.get" color="#E552FF" shape=tab style=filled]
			}
			438 [label="if e.code is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			439 [label="return e\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			438 -> 439 [label="e.code is None" color=green]
			440 [label="if handlers and e.code in handlers:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			442 [label="handler = handlers[e.code]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			443 [label="if handler is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			446 [label="return e\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			443 -> 446 [label="handler is None" color=green]
			447 [label="return handler(e)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			443 -> 447 [label="(handler is not None)" color=red]
			442 -> 443 [label="" color=black]
			440 -> 442 [label="handlers and e.code in handlers" color=green]
			444 [label="handler = self.error_handler_spec[None].get(e.code)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			444 -> 445 [label=calls style=dashed]
			subgraph cluster_444 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				445 [label="self.error_handler_spec.get" color="#E552FF" shape=tab style=filled]
			}
			444 -> 443 [label="" color=black]
			440 -> 444 [label="(not (handlers and e.code in handlers))" color=red]
			438 -> 440 [label="(e.code is not None)" color=red]
			436 -> 438 [label="" color=black]
		}
		subgraph cluster0trap_http_exception {
			graph [compound=True fontname="DejaVu Sans Mono" label=trap_http_exception pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			452 [label="\"\"\"Checks if an HTTP exception should be trapped or not.  By default\l        this will return `False` for all exceptions except for a bad request\l        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to `True`.  It\l        also returns `True` if ``TRAP_HTTP_EXCEPTIONS`` is set to `True`.\l\l        This is called for all HTTP exceptions raised by a view function.\l        If it returns `True` for any exception the error handler for this\l        exception is not called and it shows up as regular exception in the\l        traceback.  This is helpful for debugging implicitly raised HTTP\l        exceptions.\l\l        .. versionadded:: 0.8\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			453 [label="if self.config['TRAP_HTTP_EXCEPTIONS...']:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			454 [label="return True\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			453 -> 454 [label="self.config['TRAP_HTTP_EXCEPTIONS']" color=green]
			455 [label="if self.config['TRAP_BAD_REQUEST_ERR...']:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			457 [label="return isinstance(e, BadRequest)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			455 -> 457 [label="self.config['TRAP_BAD_REQUEST_ERRORS']" color=green]
			458 [label="return False\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			455 -> 458 [label="(not self.config['TRAP_BAD_REQUEST_ERRORS'])" color=red]
			453 -> 455 [label="(not self.config['TRAP_HTTP_EXCEPTIONS'])" color=red]
			452 -> 453 [label="" color=black]
		}
		subgraph cluster0handle_user_exception {
			graph [compound=True fontname="DejaVu Sans Mono" label=handle_user_exception pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			463 [label="\"\"\"This method is called whenever an exception occurs that should be\l        handled.  A special case are\l        :class:`~werkzeug.exception.HTTPException`\\s which are forwarded by\l        this function to the :meth:`handle_http_exception` method.  This\l        function will either return a response value or reraise the\l        exception with the same traceback.\l\l        .. versionadded:: 0.7\l        \"\"\"\lexc_type, exc_value, tb = sys.exc_info()\lassert exc_value is e\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			463 -> 464 [label=calls style=dashed]
			subgraph cluster_463 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				464 [label="sys.exc_info" color="#E552FF" shape=tab style=filled]
			}
			466 [label="if isinstance(e, HTTPException) and not self.trap_http_exception(e):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			467 [label="return self.handle_http_exception(e)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			466 -> 467 [label="isinstance(e, HTTPException) and not self.trap_http_exception(e)" color=green]
			468 [label="blueprint_handlers = ()\lhandlers = self.error_handler_spec.get(request.blueprint)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			468 -> 470 [label=calls style=dashed]
			subgraph cluster_468 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				470 [label="self.error_handler_spec.get" color="#E552FF" shape=tab style=filled]
			}
			471 [label="if handlers is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			472 [label="blueprint_handlers = handlers.get(None, ())\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			472 -> 474 [label=calls style=dashed]
			subgraph cluster_472 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				474 [label="handlers.get" color="#E552FF" shape=tab style=filled]
			}
			473 [label="app_handlers = self.error_handler_spec[None].get(None, ())\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			473 -> 475 [label=calls style=dashed]
			subgraph cluster_473 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				475 [label="self.error_handler_spec.get" color="#E552FF" shape=tab style=filled]
			}
			476 [label="for typecheck, handler in chain(blueprint_handlers, app_handlers):\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			476 -> 477 [label=calls style=dashed]
			subgraph cluster_476 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				477 [label=chain color="#E552FF" shape=tab style=filled]
			}
			478 [label="if isinstance(e, typecheck):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			478 -> 480 [label=calls style=dashed]
			subgraph cluster_478 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				480 [label=isinstance color="#E552FF" shape=tab style=filled]
			}
			481 [label="return handler(e)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			478 -> 481 [label="isinstance(e, typecheck)" color=green]
			482 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			482 -> 476 [label="" color=black]
			478 -> 482 [label="(not isinstance(e, typecheck))" color=red]
			476 -> 478 [label="chain(blueprint_handlers, app_handlers)" color=green]
			479 [label="reraise(exc_type, exc_value, tb)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			479 -> 484 [label=calls style=dashed]
			subgraph cluster_479 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				484 [label=reraise color="#E552FF" shape=tab style=filled]
			}
			476 -> 479 [label="" color=green]
			473 -> 476 [label="" color=black]
			472 -> 473 [label="" color=black]
			471 -> 472 [label="handlers is not None" color=green]
			471 -> 473 [label="(handlers is None)" color=red]
			468 -> 471 [label="" color=black]
			466 -> 468 [label="(not (isinstance(e, HTTPException) and not self.trap_http_exception(e)))" color=red]
			463 -> 466 [label="exc_value is e" color=black]
		}
		subgraph cluster0handle_exception {
			graph [compound=True fontname="DejaVu Sans Mono" label=handle_exception pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			487 [label="\"\"\"Default exception handling that kicks in when an exception\l        occurs that is not caught.  In debug mode the exception will\l        be re-raised immediately, otherwise it is logged and the handler\l        for a 500 internal server error is used.  If no such handler\l        exists, a default 500 internal server error message is displayed.\l\l        .. versionadded:: 0.3\l        \"\"\"\lexc_type, exc_value, tb = sys.exc_info()\lgot_request_exception.send(self, exception=e)\lhandler = self.error_handler_spec[None].get(500)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			487 -> 488 [label=calls style=dashed]
			487 -> 489 [label=calls style=dashed]
			487 -> 490 [label=calls style=dashed]
			subgraph cluster_487 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				488 [label="sys.exc_info" color="#E552FF" shape=tab style=filled]
				489 [label="got_request_exception.send" color="#E552FF" shape=tab style=filled]
				490 [label="self.error_handler_spec.get" color="#E552FF" shape=tab style=filled]
			}
			491 [label="if self.propagate_exceptions:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			492 [label="if exc_value is e:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			494 [label="reraise(exc_type, exc_value, tb)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			494 -> 498 [label=calls style=dashed]
			subgraph cluster_494 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				498 [label=reraise color="#E552FF" shape=tab style=filled]
			}
			493 [label="self.log_exception((exc_type, exc_value, tb))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			493 -> 499 [label=calls style=dashed]
			subgraph cluster_493 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				499 [label="self.log_exception" color="#E552FF" shape=tab style=filled]
			}
			500 [label="if handler is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			501 [label="return InternalServerError()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			500 -> 501 [label="handler is None" color=green]
			502 [label="return handler(e)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			500 -> 502 [label="(handler is not None)" color=red]
			493 -> 500 [label="" color=black]
			494 -> 493 [label="" color=black]
			492 -> 494 [label="exc_value is e" color=green]
			496 [label="raise e\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			492 -> 496 [label="(exc_value is not e)" color=red]
			491 -> 492 [label="self.propagate_exceptions" color=green]
			491 -> 493 [label="(not self.propagate_exceptions)" color=red]
			487 -> 491 [label="" color=black]
		}
		subgraph cluster0log_exception {
			graph [compound=True fontname="DejaVu Sans Mono" label=log_exception pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			507 [label="\"\"\"Logs an exception.  This is called by :meth:`handle_exception`\l        if debugging is disabled and right before the handler is called.\l        The default implementation logs the exception as error on the\l        :attr:`logger`.\l\l        .. versionadded:: 0.8\l        \"\"\"\lself.logger.error('Exception on %s [%s]...' % (request.path, request.method),\l    exc_info=exc_info)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			507 -> 508 [label=calls style=dashed]
			subgraph cluster_507 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				508 [label="self.logger.error" color="#E552FF" shape=tab style=filled]
			}
		}
		subgraph cluster0raise_routing_exception {
			graph [compound=True fontname="DejaVu Sans Mono" label=raise_routing_exception pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			511 [label="\"\"\"Exceptions that are recording during routing are reraised with\l        this method.  During debug we are not reraising redirect requests\l        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\l        a different error instead to help debug situations.\l\l        :internal:\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			512 [label="if not self.debug or not isinstance(request.routing_exception, RequestRedirect\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			513 [label="raise request.routing_exception\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			512 -> 513 [label="not self.debug or not isinstance(request.routing_exception, RequestRedirect
    ) or request.method in ('GET', 'HEAD', 'OPTIONS')" color=red]
			514 [label="from .debughelpers import FormDataRoutingRedirect\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			516 [label="raise FormDataRoutingRedirect(request)\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			514 -> 516 [label="" color=black]
			512 -> 514 [label="(not (not self.debug or not isinstance(request.routing_exception,
    RequestRedirect) or request.method in ('GET', 'HEAD', 'OPTIONS')))" color=red]
			511 -> 512 [label="" color=black]
		}
		subgraph cluster0dispatch_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=dispatch_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			520 [label="\"\"\"Does the request dispatching.  Matches the URL and returns the\l        return value of the view or error handler.  This does not have to\l        be a response object.  In order to convert the return value to a\l        proper response object, call :func:`make_response`.\l\l        .. versionchanged:: 0.7\l           This no longer does the exception handling, this code was\l           moved to the new :meth:`full_dispatch_request`.\l        \"\"\"\lreq = _request_ctx_stack.top.request\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			521 [label="if req.routing_exception is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			522 [label="self.raise_routing_exception(req)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			522 -> 524 [label=calls style=dashed]
			subgraph cluster_522 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				524 [label="self.raise_routing_exception" color="#E552FF" shape=tab style=filled]
			}
			523 [label="rule = req.url_rule\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			525 [label="if getattr(rule, 'provide_automatic_op...', False\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			526 [label="return self.make_default_options_response()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			525 -> 526 [label="getattr(rule, 'provide_automatic_options', False) and req.method == 'OPTIONS'" color=red]
			527 [label="return self.view_functions[rule.endpoint](**req.view_args)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			525 -> 527 [label="(not (getattr(rule, 'provide_automatic_options', False) and req.method ==
    'OPTIONS'))" color=red]
			523 -> 525 [label="" color=black]
			522 -> 523 [label="" color=black]
			521 -> 522 [label="req.routing_exception is not None" color=green]
			521 -> 523 [label="(req.routing_exception is None)" color=red]
			520 -> 521 [label="" color=black]
		}
		subgraph cluster0full_dispatch_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=full_dispatch_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			532 [label="\"\"\"Dispatches the request and on top of that performs request\l        pre and postprocessing as well as HTTP exception catching and\l        error handling.\l\l        .. versionadded:: 0.7\l        \"\"\"\lself.try_trigger_before_first_request_functions()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			532 -> 533 [label=calls style=dashed]
			subgraph cluster_532 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				533 [label="self.try_trigger_before_first_request_functions" color="#E552FF" shape=tab style=filled]
			}
			534 [label="request_started.send(self)\lrv = self.preprocess_request()\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			536 [label="rv = self.handle_user_exception(e)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			536 -> 537 [label=calls style=dashed]
			subgraph cluster_536 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				537 [label="self.handle_user_exception" color="#E552FF" shape=tab style=filled]
			}
			535 [label="response = self.make_response(rv)\lresponse = self.process_response(response)\lrequest_finished.send(self, response=response)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			535 -> 544 [label=calls style=dashed]
			535 -> 545 [label=calls style=dashed]
			535 -> 546 [label=calls style=dashed]
			subgraph cluster_535 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				544 [label="self.make_response" color="#E552FF" shape=tab style=filled]
				545 [label="self.process_response" color="#E552FF" shape=tab style=filled]
				546 [label="request_finished.send" color="#E552FF" shape=tab style=filled]
			}
			547 [label="return response\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			535 -> 547 [label="" color=black]
			536 -> 535 [label="" color=black]
			534 -> 538 [label=calls style=dashed]
			534 -> 539 [label=calls style=dashed]
			subgraph cluster_534 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				538 [label="request_started.send" color="#E552FF" shape=tab style=filled]
				539 [label="self.preprocess_request" color="#E552FF" shape=tab style=filled]
			}
			540 [label="if rv is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			541 [label="rv = self.dispatch_request()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			541 -> 543 [label=calls style=dashed]
			subgraph cluster_541 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				543 [label="self.dispatch_request" color="#E552FF" shape=tab style=filled]
			}
			541 -> 535 [label="" color=black]
			540 -> 541 [label="rv is None" color=green]
			540 -> 535 [label="(rv is not None)" color=red]
			534 -> 540 [label="" color=black]
			532 -> 534 [label="" color=black]
		}
		subgraph cluster0try_trigger_before_first_request_functions {
			graph [compound=True fontname="DejaVu Sans Mono" label=try_trigger_before_first_request_functions pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			551 [label="\"\"\"Called before each request and will ensure that it triggers\l        the :attr:`before_first_request_funcs` and only exactly once per\l        application instance (which means process usually).\l\l        :internal:\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			552 [label="if self._got_first_request:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			553 [label="return\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			552 -> 553 [label="self._got_first_request" color=green]
			554 [label="if self._got_first_request:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			556 [label="return\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			554 -> 556 [label="self._got_first_request" color=green]
			557 [label="self._got_first_request = True\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			559 [label="for func in self.before_first_request_funcs:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			560 [label="func()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			560 -> 562 [label=calls style=dashed]
			subgraph cluster_560 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				562 [label=func color="#E552FF" shape=tab style=filled]
			}
			560 -> 559 [label="" color=black]
			559 -> 560 [label="self.before_first_request_funcs" color=green]
			557 -> 559 [label="" color=black]
			554 -> 557 [label="(not self._got_first_request)" color=red]
			552 -> 554 [label="(not self._got_first_request)" color=red]
			551 -> 552 [label="" color=black]
		}
		subgraph cluster0make_default_options_response {
			graph [compound=True fontname="DejaVu Sans Mono" label=make_default_options_response pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			565 [label="\"\"\"This method is called to create the default `OPTIONS` response.\l        This can be changed through subclassing to change the default\l        behavior of `OPTIONS` responses.\l\l        .. versionadded:: 0.7\l        \"\"\"\ladapter = _request_ctx_stack.top.url_adapter\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			566 [label="if hasattr(adapter, 'allowed_methods'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			566 -> 567 [label=calls style=dashed]
			subgraph cluster_566 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				567 [label=hasattr color="#E552FF" shape=tab style=filled]
			}
			568 [label="methods = adapter.allowed_methods()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			568 -> 576 [label=calls style=dashed]
			subgraph cluster_568 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				576 [label="adapter.allowed_methods" color="#E552FF" shape=tab style=filled]
			}
			569 [label="rv = self.response_class()\lrv.allow.update(methods)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			569 -> 577 [label=calls style=dashed]
			569 -> 578 [label=calls style=dashed]
			subgraph cluster_569 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				577 [label="self.response_class" color="#E552FF" shape=tab style=filled]
				578 [label="rv.allow.update" color="#E552FF" shape=tab style=filled]
			}
			579 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			569 -> 579 [label="" color=black]
			568 -> 569 [label="" color=black]
			566 -> 568 [label="hasattr(adapter, 'allowed_methods')" color=green]
			570 [label="methods = []\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			571 [label="adapter.match(method='--')\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			573 [label="methods = e.valid_methods\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			573 -> 569 [label="" color=black]
			574 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			574 -> 569 [label="" color=black]
			571 -> 575 [label=calls style=dashed]
			subgraph cluster_571 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				575 [label="adapter.match" color="#E552FF" shape=tab style=filled]
			}
			571 -> 569 [label="" color=black]
			570 -> 571 [label="" color=black]
			566 -> 570 [label="(not hasattr(adapter, 'allowed_methods'))" color=red]
			565 -> 566 [label="" color=black]
		}
		subgraph cluster0make_response {
			graph [compound=True fontname="DejaVu Sans Mono" label=make_response pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			583 [label="\"\"\"Converts the return value from a view function to a real\l        response object that is an instance of :attr:`response_class`.\l\l        The following types are allowed for `rv`:\l\l        .. tabularcolumns:: |p{3.5cm}|p{9.5cm}|\l\l        ======================= ===========================================\l        :attr:`response_class`  the object is returned unchanged\l        :class:`str`            a response object is created with the\l                                string as body\l        :class:`unicode`        a response object is created with the\l                                string encoded to utf-8 as body\l        a WSGI function         the function is called as WSGI application\l                                and buffered as response object\l        :class:`tuple`          A tuple in the form ``(response, status,\l                                headers)`` where `response` is any of the\l                                types defined here, `status` is a string\l                                or an integer and `headers` is a list of\l                                a dictionary with header values.\l        ======================= ===========================================\l\l        :param rv: the return value from the view function\l\l        .. versionchanged:: 0.9\l           Previously a tuple was interpreted as the arguments for the\l           response object.\l        \"\"\"\lstatus = headers = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			584 [label="if isinstance(rv, tuple):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			584 -> 585 [label=calls style=dashed]
			subgraph cluster_584 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				585 [label=isinstance color="#E552FF" shape=tab style=filled]
			}
			586 [label="rv, status, headers = rv + (None,) * (3 - len(rv))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			586 -> 588 [label=calls style=dashed]
			subgraph cluster_586 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				588 [label=len color="#E552FF" shape=tab style=filled]
			}
			587 [label="if rv is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			589 [label="raise ValueError('View function did no...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			587 -> 589 [label="rv is None" color=green]
			590 [label="if not isinstance(rv, self.response_class):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			592 [label="if isinstance(rv, string_types):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			592 -> 594 [label=calls style=dashed]
			subgraph cluster_592 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				594 [label=isinstance color="#E552FF" shape=tab style=filled]
			}
			595 [label="rv = self.response_class(rv, headers=headers, status=status)\lheaders = status = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			595 -> 599 [label=calls style=dashed]
			subgraph cluster_595 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				599 [label="self.response_class" color="#E552FF" shape=tab style=filled]
			}
			593 [label="if status is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			600 [label="if isinstance(status, string_types):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			600 -> 602 [label=calls style=dashed]
			subgraph cluster_600 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				602 [label=isinstance color="#E552FF" shape=tab style=filled]
			}
			603 [label="rv.status = status\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			601 [label="if headers:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			606 [label="rv.headers.extend(headers)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			606 -> 608 [label=calls style=dashed]
			subgraph cluster_606 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				608 [label="rv.headers.extend" color="#E552FF" shape=tab style=filled]
			}
			607 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			606 -> 607 [label="" color=black]
			601 -> 606 [label=headers color=green]
			601 -> 607 [label="(not headers)" color=red]
			603 -> 601 [label="" color=black]
			600 -> 603 [label="isinstance(status, string_types)" color=green]
			605 [label="rv.status_code = status\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			605 -> 601 [label="" color=black]
			600 -> 605 [label="(not isinstance(status, string_types))" color=red]
			593 -> 600 [label="status is not None" color=green]
			593 -> 601 [label="(status is None)" color=red]
			595 -> 593 [label="" color=black]
			592 -> 595 [label="isinstance(rv, string_types)" color=green]
			597 [label="rv = self.response_class.force_type(rv, request.environ)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			597 -> 598 [label=calls style=dashed]
			subgraph cluster_597 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				598 [label="self.response_class.force_type" color="#E552FF" shape=tab style=filled]
			}
			597 -> 593 [label="" color=black]
			592 -> 597 [label="(not isinstance(rv, string_types))" color=red]
			590 -> 592 [label="not isinstance(rv, self.response_class)" color=green]
			590 -> 593 [label="(not not isinstance(rv, self.response_class))" color=red]
			587 -> 590 [label="(rv is not None)" color=red]
			586 -> 587 [label="" color=black]
			584 -> 586 [label="isinstance(rv, tuple)" color=green]
			584 -> 587 [label="(not isinstance(rv, tuple))" color=red]
			583 -> 584 [label="" color=black]
		}
		subgraph cluster0create_url_adapter {
			graph [compound=True fontname="DejaVu Sans Mono" label=create_url_adapter pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			612 [label="\"\"\"Creates a URL adapter for the given request.  The URL adapter\l        is created at a point where the request context is not yet set up\l        so the request is passed explicitly.\l\l        .. versionadded:: 0.6\l\l        .. versionchanged:: 0.9\l           This can now also be called without a request object when the\l           URL adapter is created for the application context.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			613 [label="if request is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			614 [label="return self.url_map.bind_to_environ(request.environ, server_name=self.\l    config['SERVER_NAME'])\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			613 -> 614 [label="request is not None" color=green]
			615 [label="if self.config['SERVER_NAME'] is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			617 [label="return self.url_map.bind(self.config['SERVER_NAME'], script_name=self.\l    config['APPLICATION_ROOT'] or '/', url_scheme=self.config[\l    'PREFERRED_URL_SCHEME...'])\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			615 -> 617 [label="self.config['SERVER_NAME'] is not None" color=green]
			613 -> 615 [label="(request is None)" color=red]
			612 -> 613 [label="" color=black]
		}
		subgraph cluster0inject_url_defaults {
			graph [compound=True fontname="DejaVu Sans Mono" label=inject_url_defaults pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			622 [label="\"\"\"Injects the URL defaults for the given endpoint directly into\l        the values dictionary passed.  This is used internally and\l        automatically called on URL building.\l\l        .. versionadded:: 0.7\l        \"\"\"\lfuncs = self.url_default_functions.get(None, ())\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			622 -> 623 [label=calls style=dashed]
			subgraph cluster_622 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				623 [label="self.url_default_functions.get" color="#E552FF" shape=tab style=filled]
			}
			624 [label="if '.' in endpoint:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			625 [label="bp = endpoint.rsplit('.', 1)[0]\lfuncs = chain(funcs, self.url_default_functions.get(bp, ()))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			625 -> 627 [label=calls style=dashed]
			625 -> 628 [label=calls style=dashed]
			subgraph cluster_625 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				627 [label="endpoint.rsplit" color="#E552FF" shape=tab style=filled]
				628 [label=chain color="#E552FF" shape=tab style=filled]
				629 [label="self.url_default_functions.get" color="#E552FF" shape=tab style=filled]
				628 -> 629 [color=black]
			}
			626 [label="for func in funcs:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			630 [label="func(endpoint, values)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			630 -> 632 [label=calls style=dashed]
			subgraph cluster_630 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				632 [label=func color="#E552FF" shape=tab style=filled]
			}
			630 -> 626 [label="" color=black]
			626 -> 630 [label=funcs color=green]
			625 -> 626 [label="" color=black]
			624 -> 625 [label="'.' in endpoint" color=green]
			624 -> 626 [label="('.' not in endpoint)" color=red]
			622 -> 624 [label="" color=black]
		}
		subgraph cluster0handle_url_build_error {
			graph [compound=True fontname="DejaVu Sans Mono" label=handle_url_build_error pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			635 [label="\"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\l        \"\"\"\lexc_type, exc_value, tb = sys.exc_info()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			635 -> 636 [label=calls style=dashed]
			subgraph cluster_635 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				636 [label="sys.exc_info" color="#E552FF" shape=tab style=filled]
			}
			637 [label="for handler in self.url_build_error_handlers:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			639 [label="if error is exc_value:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			648 [label="reraise(exc_type, exc_value, tb)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			648 -> 650 [label=calls style=dashed]
			subgraph cluster_648 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				650 [label=reraise color="#E552FF" shape=tab style=filled]
			}
			649 [label="raise error\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			648 -> 649 [label="" color=black]
			639 -> 648 [label="error is exc_value" color=green]
			639 -> 649 [label="(error is not exc_value)" color=red]
			637 -> 639 [label="" color=green]
			640 [label="rv = handler(error, endpoint, values)\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			642 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			642 -> 637 [label="" color=black]
			640 -> 643 [label=calls style=dashed]
			subgraph cluster_640 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				643 [label=handler color="#E552FF" shape=tab style=filled]
			}
			644 [label="if rv is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			645 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			644 -> 645 [label="rv is not None" color=green]
			644 -> 637 [label="(rv is None)" color=red]
			640 -> 644 [label="" color=black]
			637 -> 640 [label="self.url_build_error_handlers" color=green]
			635 -> 637 [label="" color=black]
		}
		subgraph cluster0preprocess_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=preprocess_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			654 [label="\"\"\"Called before the actual request dispatching and will\l        call every as :meth:`before_request` decorated function.\l        If any of these function returns a value it's handled as\l        if it was the return value from the view and further\l        request handling is stopped.\l\l        This also triggers the :meth:`url_value_processor` functions before\l        the actual :meth:`before_request` functions are called.\l        \"\"\"\lbp = _request_ctx_stack.top.request.blueprint\lfuncs = self.url_value_preprocessors.get(None, ())\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			654 -> 655 [label=calls style=dashed]
			subgraph cluster_654 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				655 [label="self.url_value_preprocessors.get" color="#E552FF" shape=tab style=filled]
			}
			656 [label="if bp is not None and bp in self.url_value_preprocessors:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			657 [label="funcs = chain(funcs, self.url_value_preprocessors[bp])\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			657 -> 659 [label=calls style=dashed]
			subgraph cluster_657 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				659 [label=chain color="#E552FF" shape=tab style=filled]
			}
			658 [label="for func in funcs:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			660 [label="func(request.endpoint, request.view_args)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			660 -> 662 [label=calls style=dashed]
			subgraph cluster_660 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				662 [label=func color="#E552FF" shape=tab style=filled]
			}
			660 -> 658 [label="" color=black]
			658 -> 660 [label=funcs color=green]
			661 [label="funcs = self.before_request_funcs.get(None, ())\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			661 -> 663 [label=calls style=dashed]
			subgraph cluster_661 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				663 [label="self.before_request_funcs.get" color="#E552FF" shape=tab style=filled]
			}
			664 [label="if bp is not None and bp in self.before_request_funcs:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			665 [label="funcs = chain(funcs, self.before_request_funcs[bp])\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			665 -> 667 [label=calls style=dashed]
			subgraph cluster_665 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				667 [label=chain color="#E552FF" shape=tab style=filled]
			}
			666 [label="for func in funcs:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			668 [label="rv = func()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			668 -> 670 [label=calls style=dashed]
			subgraph cluster_668 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				670 [label=func color="#E552FF" shape=tab style=filled]
			}
			671 [label="if rv is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			672 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			671 -> 672 [label="rv is not None" color=green]
			671 -> 666 [label="(rv is None)" color=red]
			668 -> 671 [label="" color=black]
			666 -> 668 [label=funcs color=green]
			665 -> 666 [label="" color=black]
			664 -> 665 [label="bp is not None and bp in self.before_request_funcs" color=green]
			664 -> 666 [label="(not (bp is not None and bp in self.before_request_funcs))" color=red]
			661 -> 664 [label="" color=black]
			658 -> 661 [label="" color=green]
			657 -> 658 [label="" color=black]
			656 -> 657 [label="bp is not None and bp in self.url_value_preprocessors" color=green]
			656 -> 658 [label="(not (bp is not None and bp in self.url_value_preprocessors))" color=red]
			654 -> 656 [label="" color=black]
		}
		subgraph cluster0process_response {
			graph [compound=True fontname="DejaVu Sans Mono" label=process_response pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			677 [label="\"\"\"Can be overridden in order to modify the response object\l        before it's sent to the WSGI server.  By default this will\l        call all the :meth:`after_request` decorated functions.\l\l        .. versionchanged:: 0.5\l           As of Flask 0.5 the functions registered for after request\l           execution are called in reverse order of registration.\l\l        :param response: a :attr:`response_class` object.\l        :return: a new response object or the same, has to be an\l                 instance of :attr:`response_class`.\l        \"\"\"\lctx = _request_ctx_stack.top\lbp = ctx.request.blueprint\lfuncs = ctx._after_request_functions\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			678 [label="if bp is not None and bp in self.after_request_funcs:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			679 [label="funcs = chain(funcs, reversed(self.after_request_funcs[bp]))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			679 -> 681 [label=calls style=dashed]
			subgraph cluster_679 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				681 [label=chain color="#E552FF" shape=tab style=filled]
				682 [label=reversed color="#E552FF" shape=tab style=filled]
				681 -> 682 [color=black]
			}
			680 [label="if None in self.after_request_funcs:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			683 [label="funcs = chain(funcs, reversed(self.after_request_funcs[None]))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			683 -> 685 [label=calls style=dashed]
			subgraph cluster_683 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				685 [label=chain color="#E552FF" shape=tab style=filled]
				686 [label=reversed color="#E552FF" shape=tab style=filled]
				685 -> 686 [color=black]
			}
			684 [label="for handler in funcs:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			687 [label="response = handler(response)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			687 -> 689 [label=calls style=dashed]
			subgraph cluster_687 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				689 [label=handler color="#E552FF" shape=tab style=filled]
			}
			687 -> 684 [label="" color=black]
			684 -> 687 [label=funcs color=green]
			688 [label="if not self.session_interface.is_null_session(ctx.session):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			690 [label="self.save_session(ctx.session, response)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			690 -> 692 [label=calls style=dashed]
			subgraph cluster_690 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				692 [label="self.save_session" color="#E552FF" shape=tab style=filled]
			}
			691 [label="return response\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			690 -> 691 [label="" color=black]
			688 -> 690 [label="not self.session_interface.is_null_session(ctx.session)" color=green]
			688 -> 691 [label="(not not self.session_interface.is_null_session(ctx.session))" color=red]
			684 -> 688 [label="" color=green]
			683 -> 684 [label="" color=black]
			680 -> 683 [label="None in self.after_request_funcs" color=green]
			680 -> 684 [label="(None not in self.after_request_funcs)" color=red]
			679 -> 680 [label="" color=black]
			678 -> 679 [label="bp is not None and bp in self.after_request_funcs" color=green]
			678 -> 680 [label="(not (bp is not None and bp in self.after_request_funcs))" color=red]
			677 -> 678 [label="" color=black]
		}
		subgraph cluster0do_teardown_request {
			graph [compound=True fontname="DejaVu Sans Mono" label=do_teardown_request pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			696 [label="\"\"\"Called after the actual request dispatching and will\l        call every as :meth:`teardown_request` decorated function.  This is\l        not actually called by the :class:`Flask` object itself but is always\l        triggered when the request context is popped.  That way we have a\l        tighter control over certain resources under testing environments.\l\l        .. versionchanged:: 0.9\l           Added the `exc` argument.  Previously this was always using the\l           current exception information.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			697 [label="if exc is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			698 [label="exc = sys.exc_info()[1]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			698 -> 700 [label=calls style=dashed]
			subgraph cluster_698 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				700 [label="sys.exc_info" color="#E552FF" shape=tab style=filled]
			}
			699 [label="funcs = reversed(self.teardown_request_funcs.get(None, ()))\lbp = _request_ctx_stack.top.request.blueprint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			699 -> 701 [label=calls style=dashed]
			subgraph cluster_699 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				701 [label=reversed color="#E552FF" shape=tab style=filled]
				702 [label="self.teardown_request_funcs.get" color="#E552FF" shape=tab style=filled]
				701 -> 702 [color=black]
			}
			703 [label="if bp is not None and bp in self.teardown_request_funcs:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			704 [label="funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			704 -> 706 [label=calls style=dashed]
			subgraph cluster_704 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				706 [label=chain color="#E552FF" shape=tab style=filled]
				707 [label=reversed color="#E552FF" shape=tab style=filled]
				706 -> 707 [color=black]
			}
			705 [label="for func in funcs:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			708 [label="rv = func(exc)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			708 -> 710 [label=calls style=dashed]
			subgraph cluster_708 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				710 [label=func color="#E552FF" shape=tab style=filled]
			}
			708 -> 705 [label="" color=black]
			705 -> 708 [label=funcs color=green]
			709 [label="request_tearing_down.send(self, exc=exc)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			709 -> 711 [label=calls style=dashed]
			subgraph cluster_709 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				711 [label="request_tearing_down.send" color="#E552FF" shape=tab style=filled]
			}
			705 -> 709 [label="" color=green]
			704 -> 705 [label="" color=black]
			703 -> 704 [label="bp is not None and bp in self.teardown_request_funcs" color=green]
			703 -> 705 [label="(not (bp is not None and bp in self.teardown_request_funcs))" color=red]
			699 -> 703 [label="" color=black]
			698 -> 699 [label="" color=black]
			697 -> 698 [label="exc is None" color=green]
			697 -> 699 [label="(exc is not None)" color=red]
			696 -> 697 [label="" color=black]
		}
		subgraph cluster0do_teardown_appcontext {
			graph [compound=True fontname="DejaVu Sans Mono" label=do_teardown_appcontext pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			714 [label="\"\"\"Called when an application context is popped.  This works pretty\l        much the same as :meth:`do_teardown_request` but for the application\l        context.\l\l        .. versionadded:: 0.9\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			715 [label="if exc is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			716 [label="exc = sys.exc_info()[1]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			716 -> 718 [label=calls style=dashed]
			subgraph cluster_716 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				718 [label="sys.exc_info" color="#E552FF" shape=tab style=filled]
			}
			717 [label="for func in reversed(self.teardown_appcontext_funcs):\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			717 -> 719 [label=calls style=dashed]
			subgraph cluster_717 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				719 [label=reversed color="#E552FF" shape=tab style=filled]
			}
			720 [label="func(exc)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			720 -> 722 [label=calls style=dashed]
			subgraph cluster_720 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				722 [label=func color="#E552FF" shape=tab style=filled]
			}
			720 -> 717 [label="" color=black]
			717 -> 720 [label="reversed(self.teardown_appcontext_funcs)" color=green]
			721 [label="appcontext_tearing_down.send(self, exc=exc)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			721 -> 723 [label=calls style=dashed]
			subgraph cluster_721 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				723 [label="appcontext_tearing_down.send" color="#E552FF" shape=tab style=filled]
			}
			717 -> 721 [label="" color=green]
			716 -> 717 [label="" color=black]
			715 -> 716 [label="exc is None" color=green]
			715 -> 717 [label="(exc is not None)" color=red]
			714 -> 715 [label="" color=black]
		}
		subgraph cluster0app_context {
			graph [compound=True fontname="DejaVu Sans Mono" label=app_context pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			726 [label="\"\"\"Binds the application only.  For as long as the application is bound\l        to the current context the :data:`flask.current_app` points to that\l        application.  An application context is automatically created when a\l        request context is pushed if necessary.\l\l        Example usage::\l\l            with app.app_context():\l                ...\l\l        .. versionadded:: 0.9\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			727 [label="return AppContext(self)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			726 -> 727 [label="" color=black]
		}
		subgraph cluster0request_context {
			graph [compound=True fontname="DejaVu Sans Mono" label=request_context pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			731 [label="\"\"\"Creates a :class:`~flask.ctx.RequestContext` from the given\l        environment and binds it to the current context.  This must be used in\l        combination with the `with` statement because the request is only bound\l        to the current context for the duration of the `with` block.\l\l        Example usage::\l\l            with app.request_context(environ):\l                do_something_with(request)\l\l        The object returned can also be used without the `with` statement\l        which is useful for working in the shell.  The example above is\l        doing exactly the same as this code::\l\l            ctx = app.request_context(environ)\l            ctx.push()\l            try:\l                do_something_with(request)\l            finally:\l                ctx.pop()\l\l        .. versionchanged:: 0.3\l           Added support for non-with statement usage and `with` statement\l           is now passed the ctx object.\l\l        :param environ: a WSGI environment\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			732 [label="return RequestContext(self, environ)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			731 -> 732 [label="" color=black]
		}
		subgraph cluster0test_request_context {
			graph [compound=True fontname="DejaVu Sans Mono" label=test_request_context pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			736 [label="\"\"\"Creates a WSGI environment from the given values (see\l        :func:`werkzeug.test.EnvironBuilder` for more information, this\l        function accepts the same arguments).\l        \"\"\"\lfrom flask.testing import make_test_environ_builder\lbuilder = make_test_environ_builder(self, *args, **kwargs)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			736 -> 737 [label=calls style=dashed]
			subgraph cluster_736 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				737 [label=make_test_environ_builder color="#E552FF" shape=tab style=filled]
			}
			738 [label="try:\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			740 [label="return self.request_context(builder.get_environ())\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			741 [label="builder.close()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			741 -> 742 [label=calls style=dashed]
			subgraph cluster_741 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				742 [label="builder.close" color="#E552FF" shape=tab style=filled]
			}
			741 -> 740 [label="" color=black]
			740 -> 741 [label="" color=black]
			738 -> 740 [label="" color=black]
			736 -> 738 [label="" color=black]
		}
		subgraph cluster0wsgi_app {
			graph [compound=True fontname="DejaVu Sans Mono" label=wsgi_app pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			748 [label="\"\"\"The actual WSGI application.  This is not implemented in\l        `__call__` so that middlewares can be applied without losing a\l        reference to the class.  So instead of doing this::\l\l            app = MyMiddleware(app)\l\l        It's a better idea to do this instead::\l\l            app.wsgi_app = MyMiddleware(app.wsgi_app)\l\l        Then you still have the original application object around and\l        can continue to call methods on it.\l\l        .. versionchanged:: 0.7\l           The behavior of the before and after request callbacks was changed\l           under error conditions and a new callback was added that will\l           always execute at the end of the request, independent on if an\l           error occurred or not.  See :ref:`callbacks-and-errors`.\l\l        :param environ: a WSGI environment\l        :param start_response: a callable accepting a status code,\l                               a list of headers and an optional\l                               exception context to start the response\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			748 -> 749 [label=calls style=dashed]
			subgraph cluster_748 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				749 [label="self.request_context" color="#E552FF" shape=tab style=filled]
			}
			750 [label="response = self.full_dispatch_request()\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			752 [label="response = self.make_response(self.handle_exception(e))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			752 -> 753 [label=calls style=dashed]
			subgraph cluster_752 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				753 [label="self.make_response" color="#E552FF" shape=tab style=filled]
				754 [label="self.handle_exception" color="#E552FF" shape=tab style=filled]
				753 -> 754 [color=black]
			}
			751 [label="return response(environ, start_response)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			752 -> 751 [label="" color=black]
			750 -> 755 [label=calls style=dashed]
			subgraph cluster_750 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				755 [label="self.full_dispatch_request" color="#E552FF" shape=tab style=filled]
			}
			750 -> 751 [label="" color=black]
			748 -> 750 [label="" color=black]
		}
		subgraph cluster0modules {
			graph [compound=True fontname="DejaVu Sans Mono" label=modules pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			759 [label="from warnings import warn\lwarn(DeprecationWarning(\l    'Flask.modules is dep...'), stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			759 -> 760 [label=calls style=dashed]
			subgraph cluster_759 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				760 [label=warn color="#E552FF" shape=tab style=filled]
				761 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
				760 -> 761 [color=black]
			}
			762 [label="return self.blueprints\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			759 -> 762 [label="" color=black]
		}
		subgraph cluster0__call__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__call__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			766 [label="\"\"\"Shortcut for :attr:`...\"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			767 [label="return self.wsgi_app(environ, start_response)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			766 -> 767 [label="" color=black]
		}
		subgraph cluster0__repr__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__repr__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			771 [label="return '<%s %r>' % (self.__class__.__name__, self.name)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		}
	}
	subgraph cluster0_make_timedelta {
		graph [compound=True fontname="DejaVu Sans Mono" label=_make_timedelta pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		4 [label="if not isinstance(value, timedelta):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		5 [label="return timedelta(seconds=value)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		4 -> 5 [label="not isinstance(value, timedelta)" color=green]
		6 [label="return value\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		4 -> 6 [label="(not not isinstance(value, timedelta))" color=red]
	}
	subgraph cluster0setupmethod {
		graph [compound=True fontname="DejaVu Sans Mono" label=setupmethod pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		11 [label="\"\"\"Wraps a method so that it performs a check in debug mode if the\l    first request was already handled.\l    \"\"\"\ldef wrapper_func(self, *args, **kwargs):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		19 [label="return update_wrapper(wrapper_func, f)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		11 -> 19 [label="" color=black]
		subgraph cluster0wrapper_func {
			graph [compound=True fontname="DejaVu Sans Mono" label=wrapper_func pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			13 [label="if self.debug and self._got_first_request:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			14 [label="raise AssertionError(\l    \"\"\"A setup function was called after the first request was handled.  This usually indicates a bug in the application where a module was not imported and decorators or other functionality was called too late.\lTo fix this make sure to import all your view modules, database models and everything related at a central place before the application starts serving requests.\"\"\"\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			13 -> 14 [label="self.debug and self._got_first_request" color=green]
			15 [label="return f(self, *args, **kwargs)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			13 -> 15 [label="(not (self.debug and self._got_first_request))" color=red]
		}
	}
}
