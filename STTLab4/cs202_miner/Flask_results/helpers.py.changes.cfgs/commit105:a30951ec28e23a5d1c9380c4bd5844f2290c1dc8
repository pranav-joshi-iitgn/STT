digraph "cluster0STTLab4/cs202_miner/Flask_results/helpers.py.changes.cfgs/commit105:a30951ec28e23a5d1c9380c4bd5844f2290c1dc8" {
	graph [compound=True dpi=50 fontname="DejaVu Sans Mono" label="STTLab4/cs202_miner/Flask_results/helpers.py.changes.cfgs/commit105:a30951ec28e23a5d1c9380c4bd5844f2290c1dc8" pack=False rankdir=TB ranksep=0.76 ratio=compress]
	node [fontname="DejaVu Sans Mono" fontsize=0.1 height=4 width=4]
	edge [fontname="DejaVu Sans Mono"]
	1 [label="\"\"\"\l    flask.helpers\l    ~~~~~~~~~~~~~\l\l    Implements various helpers.\l\l    :copyright: (c) 2015 by Armin Ronacher.\l    :license: BSD, see LICENSE for more details.\l\"\"\"\limport os\limport sys\limport pkgutil\limport posixpath\limport mimetypes\lfrom time import time\lfrom zlib import adler32\lfrom threading import RLock\lfrom werkzeug.routing import BuildError\lfrom functools import update_wrapper\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	2 [label="from werkzeug.urls import url_quote\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	4 [label="from urlparse import quote as url_quote\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	3 [label="from werkzeug.datastructures import Headers\lfrom werkzeug.exceptions import BadRequest, NotFound\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	5 [label="from werkzeug.wsgi import wrap_file\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	7 [label="from werkzeug.utils import wrap_file\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	6 [label="from jinja2 import FileSystemLoader\lfrom .signals import message_flashed\lfrom .globals import session, _request_ctx_stack, _app_ctx_stack, current_app, request\lfrom ._compat import string_types, text_type, PY2\l_missing = object()\l_os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep] if sep not in\l    (None, '/'))\ldef get_debug_flag(default=None):...\ldef _endpoint_from_view_func(view_func):...\ldef stream_with_context(generator_or_function):...\ldef make_response(*args):...\ldef url_for(endpoint, **values):...\ldef get_template_attribute(template_name, attribute):...\ldef flash(message, category='message'):...\ldef get_flashed_messages(with_categories=False, category_filter=[]):...\ldef send_file(filename_or_fp, mimetype=None, as_attachment=False,...\ldef safe_join(directory, *pathnames):...\ldef send_from_directory(directory, filename, **options):...\ldef get_root_path(import_name):...\ldef _matching_loader_thinks_module_is_package(loader, mod_name):...\ldef find_package(import_name):...\lclass locked_cached_property(object):\l    \"\"\"A decorator that converts a function into a lazy property.  The\l    function wrapped is called the first time to retrieve the result\l    and then that calculated result is used the next time you access\l    the value.  Works like the one in Werkzeug but has a lock for\l    thread safety.\l    \"\"\"\l\l    def __init__(self, func, name=None, doc=None):\l        self.__name__ = name or func.__name__\l        self.__module__ = func.__module__\l        self.__doc__ = doc or func.__doc__\l        self.func = func\l        self.lock = RLock()\l\l    def __get__(self, obj, type=None):\l        if obj is None:\l            return self\l        with self.lock:\l            value = obj.__dict__.get(self.__name__, _missing)\l            if value is _missing:\l                value = self.func(obj)\l                obj.__dict__[self.__name__] = value\l            return value\lclass _PackageBoundObject(object):\l\l    def __init__(self, import_name, template_folder=None, root_path=None):\l        self.import_name = import_name\l        self.template_folder = template_folder\l        if root_path is None:\l            root_path = get_root_path(self.import_name)\l        self.root_path = root_path\l        self._static_folder = None\l        self._static_url_path = None\l\l    def _get_static_folder(self):\l        if self._static_folder is not None:\l            return os.path.join(self.root_path, self._static_folder)\l\l    def _set_static_folder(self, value):\l        self._static_folder = value\l    static_folder = property(_get_static_folder, _set_static_folder, doc=\l        \"\"\"\l    The absolute path to the configured static folder.\l    \"\"\")\l    del _get_static_folder, _set_static_folder\l\l    def _get_static_url_path(self):\l        if self._static_url_path is not None:\l            return self._static_url_path\l        if self.static_folder is not None:\l            return '/' + os.path.basename(self.static_folder)\l\l    def _set_static_url_path(self, value):\l        self._static_url_path = value\l    static_url_path = property(_get_static_url_path, _set_static_url_path)\l    del _get_static_url_path, _set_static_url_path\l\l    @property\l    def has_static_folder(self):\l        \"\"\"This is ``True`` if ...'s container has a\l        folder for static files.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        return self.static_folder is not None\l\l    @locked_cached_property\l    def jinja_loader(self):\l        \"\"\"The Jinja loader for this package bound object.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        if self.template_folder is not None:\l            return FileSystemLoader(os.path.join(self.root_path, self.\l                template_folder))\l\l    def get_send_file_max_age(self, filename):\l        \"\"\"Provides default cache_timeout for the :func:`send_file` functions.\l\l        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\l        the configuration of :data:`~flask.current_app`.\l\l        Static file functions such as :func:`send_from_directory` use this\l        function, and :func:`send_file` calls this function on\l        :data:`~flask.current_app` when the given cache_timeout is ``None``. If a\l        cache_timeout is given in :func:`send_file`, that timeout is used;\l        otherwise, this method is called.\l\l        This allows subclasses to change the behavior when sending files based\l        on the filename.  For example, to set the cache timeout for .js files\l        to 60 seconds::\l\l            class MyFlask(flask.Flask):\l                def get_send_file_max_age(self, name):\l                    if name.lower().endswith('.js'):\l                        return 60\l                    return flask.Flask.get_send_file_max_age(self, name)\l\l        .. versionadded:: 0.9\l        \"\"\"\l        return total_seconds(current_app.send_file_max_age_default)\l\l    def send_static_file(self, filename):\l        \"\"\"Function used internally to send static files from the static\l        folder to the browser.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        if not self.has_static_folder:\l            raise RuntimeError('No static folder for...')\l        cache_timeout = self.get_send_file_max_age(filename)\l        return send_from_directory(self.static_folder, filename,\l            cache_timeout=cache_timeout)\l\l    def open_resource(self, resource, mode='rb'):\l        \"\"\"Opens a resource fro...'s resource folder.  To see\l        how this works, consider the following folder structure::\l\l            /myapplication.py\l            /schema.sql\l            /static\l                /style.css\l            /templates\l                /layout.html\l                /index.html\l\l        If you want to open the :file:`schema.sql` file you would do the\l        following::\l\l            with app.open_resource('schema.sql') as f:\l                contents = f.read()\l                do_something_with(contents)\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        :param mode: resource file opening mode, default is 'rb'.\l        \"\"\"\l        if mode not in ('r', 'rb'):\l            raise ValueError('Resources can only b...')\l        return open(os.path.join(self.root_path, resource), mode)\ldef total_seconds(td):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	6 -> 8 [label=calls style=dashed]
	6 -> 9 [label=calls style=dashed]
	subgraph cluster_6 {
		graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		8 [label=object color="#E552FF" shape=tab style=filled]
		9 [label=list color="#E552FF" shape=tab style=filled]
	}
	7 -> 6 [label="" color=black]
	5 -> 6 [label="" color=black]
	3 -> 5 [label="" color=black]
	4 -> 3 [label="" color=black]
	2 -> 3 [label="" color=black]
	1 -> 2 [label="" color=black]
	subgraph cluster5locked_cached_property {
		graph [compound=True fontname="DejaVu Sans Mono" label=locked_cached_property pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		370 [label="\"\"\"A decorator that converts a function into a lazy property.  The\l    function wrapped is called the first time to retrieve the result\l    and then that calculated result is used the next time you access\l    the value.  Works like the one in Werkzeug but has a lock for\l    thread safety.\l    \"\"\"\ldef __init__(self, func, name=None, doc=None):...\ldef __get__(self, obj, type=None):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		subgraph cluster10__init__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__init__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			372 [label="self.__name__ = name or func.__name__\lself.__module__ = func.__module__\lself.__doc__ = doc or func.__doc__\lself.func = func\lself.lock = RLock()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			372 -> 373 [label=calls style=dashed]
			subgraph cluster_372 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				373 [label=RLock color="#E552FF" shape=tab style=filled]
			}
		}
		subgraph cluster5__get__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__get__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			376 [label="if obj is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			377 [label="return self\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			376 -> 377 [label="obj is None" color=green]
			378 [label="value = obj.__dict__.get(self.__name__, _missing)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			378 -> 380 [label=calls style=dashed]
			subgraph cluster_378 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				380 [label="obj.__dict__.get" color="#E552FF" shape=tab style=filled]
			}
			381 [label="if value is _missing:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			382 [label="value = self.func(obj)\lobj.__dict__[self.__name__] = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			382 -> 384 [label=calls style=dashed]
			subgraph cluster_382 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				384 [label="self.func" color="#E552FF" shape=tab style=filled]
			}
			383 [label="return value\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			382 -> 383 [label="" color=black]
			381 -> 382 [label="value is _missing" color=green]
			381 -> 383 [label="(value is not _missing)" color=red]
			378 -> 381 [label="" color=black]
			376 -> 378 [label="(obj is not None)" color=red]
		}
	}
	subgraph cluster5_PackageBoundObject {
		graph [compound=True fontname="DejaVu Sans Mono" label=_PackageBoundObject pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		389 [label="def __init__(self, import_name, template_folder=None, root_path=None):...\ldef _get_static_folder(self):...\ldef _set_static_folder(self, value):...\lstatic_folder = property(_get_static_folder, _set_static_folder, doc=\l    \"\"\"\l    The absolute path to the configured static folder.\l    \"\"\")\ldef _get_static_url_path(self):...\ldef _set_static_url_path(self, value):...\lstatic_url_path = property(_get_static_url_path, _set_static_url_path)\l@property...\l@locked_cached_property...\ldef get_send_file_max_age(self, filename):...\ldef send_static_file(self, filename):...\ldef open_resource(self, resource, mode='rb'):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		389 -> 406 [label=calls style=dashed]
		389 -> 419 [label=calls style=dashed]
		subgraph cluster_389 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			406 [label=property color="#E552FF" shape=tab style=filled]
			419 [label=property color="#E552FF" shape=tab style=filled]
		}
		subgraph cluster11__init__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__init__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			391 [label="self.import_name = import_name\lself.template_folder = template_folder\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			392 [label="if root_path is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			393 [label="root_path = get_root_path(self.import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			393 -> 395 [label=calls style=dashed]
			subgraph cluster_393 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				395 [label=get_root_path color="#E552FF" shape=tab style=filled]
			}
			394 [label="self.root_path = root_path\lself._static_folder = None\lself._static_url_path = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			393 -> 394 [label="" color=black]
			392 -> 393 [label="root_path is None" color=green]
			392 -> 394 [label="(root_path is not None)" color=red]
			391 -> 392 [label="" color=black]
		}
		subgraph cluster5_get_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			398 [label="if self._static_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			399 [label="return os.path.join(self.root_path, self._static_folder)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			398 -> 399 [label="self._static_folder is not None" color=green]
		}
		subgraph cluster5_set_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			404 [label="self._static_folder = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster5_get_static_url_path {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_static_url_path pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			408 [label="if self._static_url_path is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			409 [label="return self._static_url_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			408 -> 409 [label="self._static_url_path is not None" color=green]
			410 [label="if self.static_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			412 [label="return '/' + os.path.basename(self.static_folder)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			410 -> 412 [label="self.static_folder is not None" color=green]
			408 -> 410 [label="(self._static_url_path is None)" color=red]
		}
		subgraph cluster5_set_static_url_path {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_static_url_path pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			417 [label="self._static_url_path = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster5has_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=has_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			421 [label="\"\"\"This is ``True`` if ...'s container has a\l        folder for static files.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			422 [label="return self.static_folder is not None\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			421 -> 422 [label="" color=black]
		}
		subgraph cluster5jinja_loader {
			graph [compound=True fontname="DejaVu Sans Mono" label=jinja_loader pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			426 [label="\"\"\"The Jinja loader for this package bound object.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			427 [label="if self.template_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			428 [label="return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			427 -> 428 [label="self.template_folder is not None" color=green]
			426 -> 427 [label="" color=black]
		}
		subgraph cluster3get_send_file_max_age {
			graph [compound=True fontname="DejaVu Sans Mono" label=get_send_file_max_age pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			433 [label="\"\"\"Provides default cache_timeout for the :func:`send_file` functions.\l\l        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\l        the configuration of :data:`~flask.current_app`.\l\l        Static file functions such as :func:`send_from_directory` use this\l        function, and :func:`send_file` calls this function on\l        :data:`~flask.current_app` when the given cache_timeout is ``None``. If a\l        cache_timeout is given in :func:`send_file`, that timeout is used;\l        otherwise, this method is called.\l\l        This allows subclasses to change the behavior when sending files based\l        on the filename.  For example, to set the cache timeout for .js files\l        to 60 seconds::\l\l            class MyFlask(flask.Flask):\l                def get_send_file_max_age(self, name):\l                    if name.lower().endswith('.js'):\l                        return 60\l                    return flask.Flask.get_send_file_max_age(self, name)\l\l        .. versionadded:: 0.9\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			434 [label="return total_seconds(current_app.send_file_max_age_default)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			433 -> 434 [label="" color=black]
		}
		subgraph cluster5send_static_file {
			graph [compound=True fontname="DejaVu Sans Mono" label=send_static_file pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			438 [label="\"\"\"Function used internally to send static files from the static\l        folder to the browser.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			439 [label="if not self.has_static_folder:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			440 [label="raise RuntimeError('No static folder for...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			439 -> 440 [label="not self.has_static_folder" color=green]
			441 [label="cache_timeout = self.get_send_file_max_age(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			441 -> 443 [label=calls style=dashed]
			subgraph cluster_441 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				443 [label="self.get_send_file_max_age" color="#E552FF" shape=tab style=filled]
			}
			444 [label="return send_from_directory(self.static_folder, filename, cache_timeout=\l    cache_timeout)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			441 -> 444 [label="" color=black]
			439 -> 441 [label="(not not self.has_static_folder)" color=red]
			438 -> 439 [label="" color=black]
		}
		subgraph cluster5open_resource {
			graph [compound=True fontname="DejaVu Sans Mono" label=open_resource pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			448 [label="\"\"\"Opens a resource fro...'s resource folder.  To see\l        how this works, consider the following folder structure::\l\l            /myapplication.py\l            /schema.sql\l            /static\l                /style.css\l            /templates\l                /layout.html\l                /index.html\l\l        If you want to open the :file:`schema.sql` file you would do the\l        following::\l\l            with app.open_resource('schema.sql') as f:\l                contents = f.read()\l                do_something_with(contents)\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        :param mode: resource file opening mode, default is 'rb'.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			449 [label="if mode not in ('r', 'rb'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			450 [label="raise ValueError('Resources can only b...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			449 -> 450 [label="mode not in ('r', 'rb')" color=green]
			451 [label="return open(os.path.join(self.root_path, resource), mode)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			449 -> 451 [label="(mode in ('r', 'rb'))" color=red]
			448 -> 449 [label="" color=black]
		}
	}
	subgraph cluster0get_debug_flag {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_debug_flag pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		11 [label="val = os.environ.get('FLASK_DEBUG')\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		11 -> 12 [label=calls style=dashed]
		subgraph cluster_11 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			12 [label="os.environ.get" color="#E552FF" shape=tab style=filled]
		}
		13 [label="if not val:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		14 [label="return default\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		13 -> 14 [label="not val" color=green]
		15 [label="return val not in ('0', 'false', 'no')\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		13 -> 15 [label="(not not val)" color=red]
		11 -> 13 [label="" color=black]
	}
	subgraph cluster5_endpoint_from_view_func {
		graph [compound=True fontname="DejaVu Sans Mono" label=_endpoint_from_view_func pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		20 [label="\"\"\"Internal helper that returns the default endpoint for a given\l    function.  This always is the function name.\l    \"\"\"\lassert view_func is not None, 'expected view func i...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		22 [label="return view_func.__name__\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		20 -> 22 [label="view_func is not None" color=black]
	}
	subgraph cluster3stream_with_context {
		graph [compound=True fontname="DejaVu Sans Mono" label=stream_with_context pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		26 [label="\"\"\"Request contexts disappear when the response is started on the server.\l    This is done for efficiency reasons and to make it less likely to encounter\l    memory leaks with badly written WSGI middlewares.  The downside is that if\l    you are using streamed responses, the generator cannot access request bound\l    information any more.\l\l    This function however can help you keep the context around for longer::\l\l        from flask import stream_with_context, request, Response\l\l        @app.route('/stream')\l        def streamed_response():\l            @stream_with_context\l            def generate():\l                yield 'Hello '\l                yield request.args['name']\l                yield '!'\l            return Response(generate())\l\l    Alternatively it can also be used around a specific generator::\l\l        from flask import stream_with_context, request, Response\l\l        @app.route('/stream')\l        def streamed_response():\l            def generate():\l                yield 'Hello '\l                yield request.args['name']\l                yield '!'\l            return Response(stream_with_context(generate()))\l\l    .. versionadded:: 0.9\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		27 [label="gen = iter(generator_or_function)\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		29 [label="def decorator(*args, **kwargs):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		36 [label="return update_wrapper(decorator, generator_or_function)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		29 -> 36 [label="" color=black]
		27 -> 38 [label=calls style=dashed]
		subgraph cluster_27 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			38 [label=iter color="#E552FF" shape=tab style=filled]
		}
		28 [label="def generator():...\lwrapped_g = generator()\lnext(wrapped_g)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		28 -> 58 [label=calls style=dashed]
		28 -> 59 [label=calls style=dashed]
		subgraph cluster_28 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			58 [label=generator color="#E552FF" shape=tab style=filled]
			59 [label=next color="#E552FF" shape=tab style=filled]
		}
		60 [label="return wrapped_g\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		28 -> 60 [label="" color=black]
		27 -> 28 [label="" color=black]
		26 -> 27 [label="" color=black]
		subgraph cluster3decorator {
			graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			31 [label="gen = generator_or_function(*args, **kwargs)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			31 -> 32 [label=calls style=dashed]
			subgraph cluster_31 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				32 [label=generator_or_function color="#E552FF" shape=tab style=filled]
			}
			33 [label="return stream_with_context(gen)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			31 -> 33 [label="" color=black]
		}
		subgraph cluster3generator {
			graph [compound=True fontname="DejaVu Sans Mono" label=generator pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			40 [label="ctx = _request_ctx_stack.top\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			41 [label="if ctx is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			42 [label="raise RuntimeError(\l    'Attempted to stream ...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			41 -> 42 [label="ctx is None" color=green]
			43 [label="yield None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			46 [label="try:\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			48 [label="for item in gen:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			49 [label="yield item\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			49 -> 48 [label="" color=black]
			48 -> 49 [label=gen color=green]
			47 [label="if hasattr(gen, 'close'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			47 -> 52 [label=calls style=dashed]
			subgraph cluster_47 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				52 [label=hasattr color="#E552FF" shape=tab style=filled]
			}
			53 [label="gen.close()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			53 -> 55 [label=calls style=dashed]
			subgraph cluster_53 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				55 [label="gen.close" color="#E552FF" shape=tab style=filled]
			}
			47 -> 53 [label="hasattr(gen, 'close')" color=green]
			48 -> 47 [label="" color=green]
			46 -> 48 [label="" color=black]
			43 -> 46 [label="" color=black]
			41 -> 43 [label="(ctx is not None)" color=red]
			40 -> 41 [label="" color=black]
		}
	}
	subgraph cluster5make_response {
		graph [compound=True fontname="DejaVu Sans Mono" label=make_response pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		64 [label="\"\"\"Sometimes it is necessary to set additional headers in a view.  Because\l    views do not have to return response objects but can return a value that\l    is converted into a response object by Flask itself, it becomes tricky to\l    add headers to it.  This function can be called instead of using a return\l    and you will get a response object which you can use to attach headers.\l\l    If view looked like this and you want to add a new header::\l\l        def index():\l            return render_template('index.html', foo=42)\l\l    You can now do something like this::\l\l        def index():\l            response = make_response(render_template('index.html', foo=42))\l            response.headers['X-Parachutes'] = 'parachutes are cool'\l            return response\l\l    This function accepts the very same arguments you can return from a\l    view function.  This for example creates a response with a 404 error\l    code::\l\l        response = make_response(render_template('not_found.html'), 404)\l\l    The other use case of this function is to force the return value of a\l    view function into a response which is helpful with view\l    decorators::\l\l        response = make_response(view_function())\l        response.headers['X-Parachutes'] = 'parachutes are cool'\l\l    Internally this function does the following things:\l\l    -   if no arguments are passed, it creates a new response argument\l    -   if one argument is passed, :meth:`flask.Flask.make_response`\l        is invoked with it.\l    -   if more than one argument is passed, the arguments are passed\l        to the :meth:`flask.Flask.make_response` function as tuple.\l\l    .. versionadded:: 0.6\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		65 [label="if not args:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		66 [label="return current_app.response_class()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		65 -> 66 [label="not args" color=green]
		67 [label="if len(args) == 1:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		67 -> 69 [label=calls style=dashed]
		subgraph cluster_67 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			69 [label=len color="#E552FF" shape=tab style=filled]
		}
		70 [label="args = args[0]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		71 [label="return current_app.make_response(args)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		70 -> 71 [label="" color=black]
		67 -> 70 [label="len(args) == 1" color=green]
		67 -> 71 [label="(len(args) != 1)" color=red]
		65 -> 67 [label="(not not args)" color=red]
		64 -> 65 [label="" color=black]
	}
	subgraph cluster5url_for {
		graph [compound=True fontname="DejaVu Sans Mono" label=url_for pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		75 [label="\"\"\"Generates a URL to the given endpoint with the method provided.\l\l    Variable arguments that are unknown to the target endpoint are appended\l    to the generated URL as query arguments.  If the value of a query argument\l    is ``None``, the whole pair is skipped.  In case blueprints are active\l    you can shortcut references to the same blueprint by prefixing the\l    local endpoint with a dot (``.``).\l\l    This will reference the index function local to the current blueprint::\l\l        url_for('.index')\l\l    For more information, head over to the :ref:`Quickstart <url-building>`.\l\l    To integrate applications, :class:`Flask` has a hook to intercept URL build\l    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\l    function results in a :exc:`~werkzeug.routing.BuildError` when the current\l    app does not have a URL for the given endpoint and values.  When it does, the\l    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\l    it is not ``None``, which can return a string to use as the result of\l    `url_for` (instead of `url_for`'s default to raise the\l    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\l    An example::\l\l        def external_url_handler(error, endpoint, values):\l            \"Looks up an external...\"\l            # This is an example of hooking the build_error_handler.\l            # Here, lookup_url is some utility function you've built\l            # which looks up the endpoint in some external URL registry.\l            url = lookup_url(endpoint, **values)\l            if url is None:\l                # External lookup did not have a URL.\l                # Re-raise the BuildError, in context of original traceback.\l                exc_type, exc_value, tb = sys.exc_info()\l                if exc_value is error:\l                    raise exc_type, exc_value, tb\l                else:\l                    raise error\l            # url_for will use this result, instead of raising BuildError.\l            return url\l\l        app.url_build_error_handlers.append(external_url_handler)\l\l    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\l    `endpoint` and `values` are the arguments passed into `url_for`.  Note\l    that this is for building URLs outside the current application, and not for\l    handling 404 NotFound errors.\l\l    .. versionadded:: 0.10\l       The `_scheme` parameter was added.\l\l    .. versionadded:: 0.9\l       The `_anchor` and `_method` parameters were added.\l\l    .. versionadded:: 0.9\l       Calls :meth:`Flask.handle_build_error` on\l       :exc:`~werkzeug.routing.BuildError`.\l\l    :param endpoint: the endpoint of the URL (name of the function)\l    :param values: the variable arguments of the URL rule\l    :param _external: if set to ``True``, an absolute URL is generated. Server\l      address can be changed via ``SERVER_NAME`` configuration variable which\l      defaults to `localhost`.\l    :param _scheme: a string specifying the desired URL scheme. The `_external`\l      parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\l      behavior uses the same scheme as the current request, or\l      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\l      request context is available. As of Werkzeug 0.10, this also can be set\l      to an empty string to build protocol-relative URLs.\l    :param _anchor: if provided this is added as anchor to the URL.\l    :param _method: if provided this explicitly specifies an HTTP method.\l    \"\"\"\lappctx = _app_ctx_stack.top\lreqctx = _request_ctx_stack.top\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		76 [label="if appctx is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		77 [label="raise RuntimeError(\l    'Attempted to generat...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		76 -> 77 [label="appctx is None" color=green]
		78 [label="if reqctx is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		80 [label="url_adapter = reqctx.url_adapter\lblueprint_name = request.blueprint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		88 [label="if not reqctx.request._is_old_module:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		89 [label="if endpoint[:1] == '.':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		100 [label="if blueprint_name is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		102 [label="endpoint = blueprint_name + endpoint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		90 [label="external = values.pop('_external', False)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		90 -> 105 [label=calls style=dashed]
		subgraph cluster_90 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			105 [label="values.pop" color="#E552FF" shape=tab style=filled]
		}
		81 [label="anchor = values.pop('_anchor', None)\lmethod = values.pop('_method', None)\lscheme = values.pop('_scheme', None)\lappctx.app.inject_url_defaults(endpoint, values)\lold_scheme = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		81 -> 106 [label=calls style=dashed]
		81 -> 107 [label=calls style=dashed]
		81 -> 108 [label=calls style=dashed]
		81 -> 109 [label=calls style=dashed]
		subgraph cluster_81 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			106 [label="values.pop" color="#E552FF" shape=tab style=filled]
			107 [label="values.pop" color="#E552FF" shape=tab style=filled]
			108 [label="values.pop" color="#E552FF" shape=tab style=filled]
			109 [label="appctx.app.inject_url_defaults" color="#E552FF" shape=tab style=filled]
		}
		110 [label="if scheme is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		111 [label="if not external:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		113 [label="raise ValueError('When specifying _sch...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		111 -> 113 [label="not external" color=green]
		114 [label="old_scheme = url_adapter.url_scheme\lurl_adapter.url_scheme = scheme\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		116 [label="try:\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		118 [label="values['_external'] = external\lvalues['_anchor'] = anchor\lvalues['_method'] = method\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		119 [label="return appctx.app.handle_url_build_error(error, endpoint, values)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		118 -> 119 [label="" color=black]
		121 [label="rv = url_adapter.build(endpoint, values, method=method, force_external=external\l    )\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		121 -> 123 [label=calls style=dashed]
		subgraph cluster_121 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			123 [label="url_adapter.build" color="#E552FF" shape=tab style=filled]
		}
		122 [label="if old_scheme is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		124 [label="url_adapter.url_scheme = old_scheme\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		117 [label="if anchor is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		127 [label="rv += '#' + url_quote(anchor)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		127 -> 129 [label=calls style=dashed]
		subgraph cluster_127 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			129 [label=url_quote color="#E552FF" shape=tab style=filled]
		}
		128 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		127 -> 128 [label="" color=black]
		117 -> 127 [label="anchor is not None" color=green]
		117 -> 128 [label="(anchor is None)" color=red]
		124 -> 117 [label="" color=black]
		122 -> 124 [label="old_scheme is not None" color=green]
		122 -> 117 [label="(old_scheme is None)" color=red]
		121 -> 122 [label="" color=black]
		116 -> 121 [label="" color=black]
		114 -> 116 [label="" color=black]
		111 -> 114 [label="(not not external)" color=red]
		110 -> 111 [label="scheme is not None" color=green]
		110 -> 116 [label="(scheme is None)" color=red]
		81 -> 110 [label="" color=black]
		90 -> 81 [label="" color=black]
		102 -> 90 [label="" color=black]
		100 -> 102 [label="blueprint_name is not None" color=green]
		104 [label="endpoint = endpoint[1:]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		104 -> 90 [label="" color=black]
		100 -> 104 [label="(blueprint_name is None)" color=red]
		89 -> 100 [label="endpoint[:1] == '.'" color=green]
		89 -> 90 [label="(endpoint[:1] != '.')" color=red]
		88 -> 89 [label="not reqctx.request._is_old_module" color=green]
		91 [label="if '.' not in endpoint:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		92 [label="if blueprint_name is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		98 [label="endpoint = blueprint_name + '.' + endpoint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		98 -> 90 [label="" color=black]
		92 -> 98 [label="blueprint_name is not None" color=green]
		92 -> 90 [label="(blueprint_name is None)" color=red]
		91 -> 92 [label="'.' not in endpoint" color=green]
		94 [label="if endpoint.startswith('.'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		94 -> 95 [label=calls style=dashed]
		subgraph cluster_94 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			95 [label="endpoint.startswith" color="#E552FF" shape=tab style=filled]
		}
		96 [label="endpoint = endpoint[1:]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		96 -> 90 [label="" color=black]
		94 -> 96 [label="endpoint.startswith('.')" color=green]
		94 -> 90 [label="(not endpoint.startswith('.'))" color=red]
		91 -> 94 [label="('.' in endpoint)" color=red]
		88 -> 91 [label="(not not reqctx.request._is_old_module)" color=red]
		80 -> 88 [label="" color=black]
		78 -> 80 [label="reqctx is not None" color=green]
		82 [label="url_adapter = appctx.url_adapter\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		83 [label="if url_adapter is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		84 [label="raise RuntimeError(\l    'Application was not ...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		83 -> 84 [label="url_adapter is None" color=green]
		85 [label="external = values.pop('_external', True)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		85 -> 87 [label=calls style=dashed]
		subgraph cluster_85 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			87 [label="values.pop" color="#E552FF" shape=tab style=filled]
		}
		85 -> 81 [label="" color=black]
		83 -> 85 [label="(url_adapter is not None)" color=red]
		82 -> 83 [label="" color=black]
		78 -> 82 [label="(reqctx is None)" color=red]
		76 -> 78 [label="(appctx is not None)" color=red]
		75 -> 76 [label="" color=black]
	}
	subgraph cluster5get_template_attribute {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_template_attribute pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		133 [label="\"\"\"Loads a macro (or variable) a template exports.  This can be used to\l    invoke a macro from within Python code.  If you for example have a\l    template named :file:`_cider.html` with the following contents:\l\l    .. sourcecode:: html+jinja\l\l       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\l\l    You can access this from Python code like this::\l\l        hello = get_template_attribute('_cider.html', 'hello')\l        return hello('World')\l\l    .. versionadded:: 0.2\l\l    :param template_name: the name of the template\l    :param attribute: the name of the variable of macro to access\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		134 [label="return getattr(current_app.jinja_env.get_template(template_name).module,\l    attribute)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		133 -> 134 [label="" color=black]
	}
	subgraph cluster5flash {
		graph [compound=True fontname="DejaVu Sans Mono" label=flash pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		138 [label="\"\"\"Flashes a message to the next request.  In order to remove the\l    flashed message from the session and to display it to the user,\l    the template has to call :func:`get_flashed_messages`.\l\l    .. versionchanged:: 0.3\l       `category` parameter added.\l\l    :param message: the message to be flashed.\l    :param category: the category for the message.  The following values\l                     are recommended: ``'message'`` for any kind of message,\l                     ``'error'`` for errors, ``'info'`` for information\l                     messages and ``'warning'`` for warnings.  However any\l                     kind of string can be used as category.\l    \"\"\"\lflashes = session.get('_flashes', [])\lflashes.append((category, message))\lsession['_flashes'] = flashes\lmessage_flashed.send(current_app._get_current_object(), message=message,\l    category=category)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		138 -> 139 [label=calls style=dashed]
		138 -> 140 [label=calls style=dashed]
		138 -> 141 [label=calls style=dashed]
		subgraph cluster_138 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			139 [label="session.get" color="#E552FF" shape=tab style=filled]
			140 [label="flashes.append" color="#E552FF" shape=tab style=filled]
			141 [label="message_flashed.send" color="#E552FF" shape=tab style=filled]
			142 [label="current_app._get_current_object" color="#E552FF" shape=tab style=filled]
			141 -> 142 [color=black]
		}
	}
	subgraph cluster5get_flashed_messages {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_flashed_messages pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		145 [label="\"\"\"Pulls all flashed messages from the session and returns them.\l    Further calls in the same request to the function will return\l    the same messages.  By default just the messages are returned,\l    but when `with_categories` is set to ``True``, the return value will\l    be a list of tuples in the form ``(category, message)`` instead.\l\l    Filter the flashed messages to one or more categories by providing those\l    categories in `category_filter`.  This allows rendering categories in\l    separate html blocks.  The `with_categories` and `category_filter`\l    arguments are distinct:\l\l    * `with_categories` controls whether categories are returned with message\l      text (``True`` gives a tuple, where ``False`` gives just the message text).\l    * `category_filter` filters the messages down to only those matching the\l      provided categories.\l\l    See :ref:`message-flashing-pattern` for examples.\l\l    .. versionchanged:: 0.3\l       `with_categories` parameter added.\l\l    .. versionchanged:: 0.9\l        `category_filter` parameter added.\l\l    :param with_categories: set to ``True`` to also receive categories.\l    :param category_filter: whitelist of categories to limit return values\l    \"\"\"\lflashes = _request_ctx_stack.top.flashes\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		146 [label="if flashes is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		147 [label="_request_ctx_stack.top.flashes = flashes = session.pop('_flashes'\l    ) if '_flashes' in session else []\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		147 -> 149 [label=calls style=dashed]
		subgraph cluster_147 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			149 [label="session.pop" color="#E552FF" shape=tab style=filled]
		}
		148 [label="if category_filter:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		150 [label="flashes = list(filter(lambda f: f[0] in category_filter, flashes))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		150 -> 152 [label=calls style=dashed]
		subgraph cluster_150 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			152 [label=list color="#E552FF" shape=tab style=filled]
			153 [label=filter color="#E552FF" shape=tab style=filled]
			152 -> 153 [color=black]
		}
		151 [label="if not with_categories:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		154 [label="return [x[1] for x in flashes]\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		151 -> 154 [label="not with_categories" color=green]
		155 [label="return flashes\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		151 -> 155 [label="(not not with_categories)" color=red]
		150 -> 151 [label="" color=black]
		148 -> 150 [label=category_filter color=green]
		148 -> 151 [label="(not category_filter)" color=red]
		147 -> 148 [label="" color=black]
		146 -> 147 [label="flashes is None" color=green]
		146 -> 148 [label="(flashes is not None)" color=red]
		145 -> 146 [label="" color=black]
	}
	subgraph cluster5send_file {
		graph [compound=True fontname="DejaVu Sans Mono" label=send_file pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		160 [label="\"\"\"Sends the contents of a file to the client.  This will use the\l    most efficient method available and configured.  By default it will\l    try to use the WSGI server's file_wrapper support.  Alternatively\l    you can set the application's :attr:`~Flask.use_x_sendfile` attribute\l    to ``True`` to directly emit an ``X-Sendfile`` header.  This however\l    requires support of the underlying webserver for ``X-Sendfile``.\l\l    By default it will try to guess the mimetype for you, but you can\l    also explicitly provide one.  For extra security you probably want\l    to send certain files as attachment (HTML for instance).  The mimetype\l    guessing requires a `filename` or an `attachment_filename` to be\l    provided.\l\l    ETags will also be attached automatically if a `filename` is provided. You\l    can turn this off by setting `add_etags=False`.\l\l    Please never pass filenames to this function from user sources;\l    you should use :func:`send_from_directory` instead.\l\l    .. versionadded:: 0.2\l\l    .. versionadded:: 0.5\l       The `add_etags`, `cache_timeout` and `conditional` parameters were\l       added.  The default behavior is now to attach etags.\l\l    .. versionchanged:: 0.7\l       mimetype guessing and etag support for file objects was\l       deprecated because it was unreliable.  Pass a filename if you are\l       able to, otherwise attach an etag yourself.  This functionality\l       will be removed in Flask 1.0\l\l    .. versionchanged:: 0.9\l       cache_timeout pulls its default from application config, when None.\l\l    .. versionchanged:: 0.12\l       The filename is no longer automatically inferred from file objects. If\l       you want to use automatic mimetype and etag support, pass a filepath via\l       `filename_or_fp` or `attachment_filename`.\l\l    .. versionchanged:: 0.12\l       The `attachment_filename` is preferred over `filename` for MIME-type\l       detection.\l\l    :param filename_or_fp: the filename of the file to send in `latin-1`.\l                           This is relative to the :attr:`~Flask.root_path`\l                           if a relative path is specified.\l                           Alternatively a file object might be provided in\l                           which case ``X-Sendfile`` might not work and fall\l                           back to the traditional method.  Make sure that the\l                           file pointer is positioned at the start of data to\l                           send before calling :func:`send_file`.\l    :param mimetype: the mimetype of the file if provided. If a file path is\l                     given, auto detection happens as fallback, otherwise an\l                     error will be raised.\l    :param as_attachment: set to ``True`` if you want to send this file with\l                          a ``Content-Disposition: attachment`` header.\l    :param attachment_filename: the filename for the attachment if it\l                                differs from the file's filename.\l    :param add_etags: set to ``False`` to disable attaching of etags.\l    :param conditional: set to ``True`` to enable conditional responses.\l\l    :param cache_timeout: the timeout in seconds for the headers. When ``None``\l                          (default), this value is set by\l                          :meth:`~Flask.get_send_file_max_age` of\l                          :data:`~flask.current_app`.\l    :param last_modified: set the ``Last-Modified`` header to this value,\l        a :class:`~datetime.datetime` or timestamp.\l        If a file was passed, this overrides its mtime.\l    \"\"\"\lmtime = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		161 [label="if isinstance(filename_or_fp, string_types):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		161 -> 162 [label=calls style=dashed]
		subgraph cluster_161 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			162 [label=isinstance color="#E552FF" shape=tab style=filled]
		}
		163 [label="filename = filename_or_fp\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		166 [label="if not os.path.isabs(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		167 [label="filename = os.path.join(current_app.root_path, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		167 -> 169 [label=calls style=dashed]
		subgraph cluster_167 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			169 [label="os.path.join" color="#E552FF" shape=tab style=filled]
		}
		168 [label="file = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		170 [label="if attachment_filename is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		171 [label="attachment_filename = os.path.basename(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		171 -> 173 [label=calls style=dashed]
		subgraph cluster_171 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			173 [label="os.path.basename" color="#E552FF" shape=tab style=filled]
		}
		164 [label="if mimetype is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		174 [label="if attachment_filename is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		176 [label="mimetype = mimetypes.guess_type(attachment_filename)[0\l    ] or 'application/octet-st...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		176 -> 178 [label=calls style=dashed]
		subgraph cluster_176 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			178 [label="mimetypes.guess_type" color="#E552FF" shape=tab style=filled]
		}
		177 [label="if mimetype is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		179 [label="if attachment_filename is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		181 [label="raise ValueError(\l    'Unable to infer MIME...'\l    .format(attachment_filename))\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		179 -> 181 [label="attachment_filename is not None" color=green]
		182 [label="raise ValueError(\l    'Unable to infer MIME...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		179 -> 182 [label="(attachment_filename is None)" color=red]
		177 -> 179 [label="mimetype is None" color=green]
		175 [label="headers = Headers()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		175 -> 185 [label=calls style=dashed]
		subgraph cluster_175 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			185 [label=Headers color="#E552FF" shape=tab style=filled]
		}
		186 [label="if as_attachment:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		187 [label="if attachment_filename is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		189 [label="raise TypeError('filename unavailable...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		187 -> 189 [label="attachment_filename is None" color=green]
		190 [label="headers.add('Content-Disposition', 'attachment', filename=attachment_filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		190 -> 192 [label=calls style=dashed]
		subgraph cluster_190 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			192 [label="headers.add" color="#E552FF" shape=tab style=filled]
		}
		188 [label="if current_app.use_x_sendfile and filename:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		193 [label="if file is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		202 [label="file.close()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		202 -> 204 [label=calls style=dashed]
		subgraph cluster_202 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			204 [label="file.close" color="#E552FF" shape=tab style=filled]
		}
		203 [label="headers['X-Sendfile'] = filename\lheaders['Content-Length'] = os.path.getsize(filename)\ldata = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		203 -> 205 [label=calls style=dashed]
		subgraph cluster_203 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			205 [label="os.path.getsize" color="#E552FF" shape=tab style=filled]
		}
		194 [label="rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\l    direct_passthrough=True)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		194 -> 206 [label=calls style=dashed]
		subgraph cluster_194 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			206 [label="current_app.response_class" color="#E552FF" shape=tab style=filled]
		}
		207 [label="if last_modified is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		208 [label="rv.last_modified = last_modified\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		209 [label="rv.cache_control.public = True\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		213 [label="if cache_timeout is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		214 [label="cache_timeout = current_app.get_send_file_max_age(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		214 -> 216 [label=calls style=dashed]
		subgraph cluster_214 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			216 [label="current_app.get_send_file_max_age" color="#E552FF" shape=tab style=filled]
		}
		215 [label="if cache_timeout is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		217 [label="rv.cache_control.max_age = cache_timeout\lrv.expires = int(time() + cache_timeout)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		217 -> 219 [label=calls style=dashed]
		subgraph cluster_217 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			219 [label=int color="#E552FF" shape=tab style=filled]
			220 [label=time color="#E552FF" shape=tab style=filled]
			219 -> 220 [color=black]
		}
		218 [label="if add_etags and filename is not None and file is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		221 [label="from warnings import warn\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		223 [label="rv.set_etag('%s-%s-%s' % (os.path.getmtime(filename), os.path.getsize(\l    filename), adler32(filename.encode('utf-8') if isinstance(filename,\l    text_type) else filename) & 4294967295))\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		225 [label="warn(\l    'Access %s failed, ma...' %\l    filename, stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		225 -> 226 [label=calls style=dashed]
		subgraph cluster_225 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			226 [label=warn color="#E552FF" shape=tab style=filled]
		}
		224 [label="if conditional:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		233 [label="rv = rv.make_conditional(request)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		233 -> 235 [label=calls style=dashed]
		subgraph cluster_233 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			235 [label="rv.make_conditional" color="#E552FF" shape=tab style=filled]
		}
		236 [label="if rv.status_code == 304:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		237 [label="rv.headers.pop('x-sendfile', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		237 -> 239 [label=calls style=dashed]
		subgraph cluster_237 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			239 [label="rv.headers.pop" color="#E552FF" shape=tab style=filled]
		}
		222 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		237 -> 222 [label="" color=black]
		236 -> 237 [label="rv.status_code == 304" color=green]
		236 -> 222 [label="(rv.status_code != 304)" color=red]
		233 -> 236 [label="" color=black]
		224 -> 233 [label=conditional color=green]
		224 -> 222 [label="(not conditional)" color=red]
		225 -> 224 [label="" color=black]
		223 -> 227 [label=calls style=dashed]
		subgraph cluster_223 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			227 [label="rv.set_etag" color="#E552FF" shape=tab style=filled]
			228 [label="os.path.getmtime" color="#E552FF" shape=tab style=filled]
			227 -> 228 [color=black]
			229 [label="os.path.getsize" color="#E552FF" shape=tab style=filled]
			227 -> 229 [color=black]
			230 [label=adler32 color="#E552FF" shape=tab style=filled]
			227 -> 230 [color=black]
			231 [label=isinstance color="#E552FF" shape=tab style=filled]
			230 -> 231 [color=black]
			232 [label="filename.encode" color="#E552FF" shape=tab style=filled]
			230 -> 232 [color=black]
		}
		223 -> 224 [label="" color=black]
		221 -> 223 [label="" color=black]
		218 -> 221 [label="add_etags and filename is not None and file is None" color=green]
		218 -> 222 [label="(not (add_etags and filename is not None and file is None))" color=red]
		217 -> 218 [label="" color=black]
		215 -> 217 [label="cache_timeout is not None" color=green]
		215 -> 218 [label="(cache_timeout is None)" color=red]
		214 -> 215 [label="" color=black]
		213 -> 214 [label="cache_timeout is None" color=green]
		213 -> 215 [label="(cache_timeout is not None)" color=red]
		209 -> 213 [label="" color=black]
		208 -> 209 [label="" color=black]
		207 -> 208 [label="last_modified is not None" color=green]
		210 [label="if mtime is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		211 [label="rv.last_modified = mtime\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		211 -> 209 [label="" color=black]
		210 -> 211 [label="mtime is not None" color=green]
		210 -> 209 [label="(mtime is None)" color=red]
		207 -> 210 [label="(last_modified is None)" color=red]
		194 -> 207 [label="" color=black]
		203 -> 194 [label="" color=black]
		202 -> 203 [label="" color=black]
		193 -> 202 [label="file is not None" color=green]
		193 -> 203 [label="(file is None)" color=red]
		188 -> 193 [label="current_app.use_x_sendfile and filename" color=green]
		195 [label="if file is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		196 [label="file = open(filename, 'rb')\lmtime = os.path.getmtime(filename)\lheaders['Content-Length'] = os.path.getsize(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		196 -> 198 [label=calls style=dashed]
		196 -> 199 [label=calls style=dashed]
		196 -> 200 [label=calls style=dashed]
		subgraph cluster_196 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			198 [label=open color="#E552FF" shape=tab style=filled]
			199 [label="os.path.getmtime" color="#E552FF" shape=tab style=filled]
			200 [label="os.path.getsize" color="#E552FF" shape=tab style=filled]
		}
		197 [label="data = wrap_file(request.environ, file)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		197 -> 201 [label=calls style=dashed]
		subgraph cluster_197 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			201 [label=wrap_file color="#E552FF" shape=tab style=filled]
		}
		197 -> 194 [label="" color=black]
		196 -> 197 [label="" color=black]
		195 -> 196 [label="file is None" color=green]
		195 -> 197 [label="(file is not None)" color=red]
		188 -> 195 [label="(not (current_app.use_x_sendfile and filename))" color=red]
		190 -> 188 [label="" color=black]
		187 -> 190 [label="(attachment_filename is not None)" color=red]
		186 -> 187 [label=as_attachment color=green]
		186 -> 188 [label="(not as_attachment)" color=red]
		175 -> 186 [label="" color=black]
		177 -> 175 [label="(mimetype is not None)" color=red]
		176 -> 177 [label="" color=black]
		174 -> 176 [label="attachment_filename is not None" color=green]
		174 -> 177 [label="(attachment_filename is None)" color=red]
		164 -> 174 [label="mimetype is None" color=green]
		164 -> 175 [label="(mimetype is not None)" color=red]
		171 -> 164 [label="" color=black]
		170 -> 171 [label="attachment_filename is None" color=green]
		170 -> 164 [label="(attachment_filename is not None)" color=red]
		168 -> 170 [label="" color=black]
		167 -> 168 [label="" color=black]
		166 -> 167 [label="not os.path.isabs(filename)" color=green]
		166 -> 168 [label="(not not os.path.isabs(filename))" color=red]
		163 -> 166 [label="" color=black]
		161 -> 163 [label="isinstance(filename_or_fp, string_types)" color=green]
		165 [label="file = filename_or_fp\lfilename = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		165 -> 164 [label="" color=black]
		161 -> 165 [label="(not isinstance(filename_or_fp, string_types))" color=red]
		160 -> 161 [label="" color=black]
	}
	subgraph cluster5safe_join {
		graph [compound=True fontname="DejaVu Sans Mono" label=safe_join pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		243 [label="\"\"\"Safely join `directory` and zero or more untrusted `pathnames`\l    components.\l\l    Example usage::\l\l        @app.route('/wiki/<path:filename...')\l        def wiki_page(filename):\l            filename = safe_join(app.config['WIKI_FOLDER'], filename)\l            with open(filename, 'rb') as fd:\l                content = fd.read()  # Read and process the file content...\l\l    :param directory: the trusted base directory.\l    :param pathnames: the untrusted pathnames relative to that directory.\l    :raises: :class:`~werkzeug.exceptions.NotFound` if one or more passed\l            paths fall out of its boundaries.\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		244 [label="for filename in pathnames:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
		245 [label="if filename != '':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		247 [label="filename = posixpath.normpath(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		247 -> 249 [label=calls style=dashed]
		subgraph cluster_247 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			249 [label="posixpath.normpath" color="#E552FF" shape=tab style=filled]
		}
		248 [label="for sep in _os_alt_seps:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
		250 [label="if sep in filename:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		252 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		250 -> 252 [label="sep in filename" color=green]
		250 -> 248 [label="(sep not in filename)" color=red]
		248 -> 250 [label=_os_alt_seps color=green]
		251 [label="if os.path.isabs(filename) or filename == '..' or filename.startsw...'../'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		255 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		251 -> 255 [label="os.path.isabs(filename) or filename == '..' or filename.startswith('../')" color=green]
		256 [label="directory = os.path.join(directory, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		256 -> 258 [label=calls style=dashed]
		subgraph cluster_256 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			258 [label="os.path.join" color="#E552FF" shape=tab style=filled]
		}
		256 -> 244 [label="" color=black]
		251 -> 256 [label="(not (os.path.isabs(filename) or filename == '..' or filename.startswith(
    '../')))" color=red]
		248 -> 251 [label="" color=green]
		247 -> 248 [label="" color=black]
		245 -> 247 [label="filename != ''" color=green]
		245 -> 248 [label="(filename == '')" color=red]
		244 -> 245 [label=pathnames color=green]
		246 [label="return directory\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		244 -> 246 [label="" color=green]
		243 -> 244 [label="" color=black]
	}
	subgraph cluster5send_from_directory {
		graph [compound=True fontname="DejaVu Sans Mono" label=send_from_directory pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		262 [label="\"\"\"Send a file from a given directory with :func:`send_file`.  This\l    is a secure way to quickly expose static files from an upload folder\l    or something similar.\l\l    Example usage::\l\l        @app.route('/uploads/<path:filen...')\l        def download_file(filename):\l            return send_from_directory(app.config['UPLOAD_FOLDER'],\l                                       filename, as_attachment=True)\l\l    .. admonition:: Sending files and Performance\l\l       It is strongly recommended to activate either ``X-Sendfile`` support in\l       your webserver or (if no authentication happens) to tell the webserver\l       to serve files for the given path on its own without calling into the\l       web application for improved performance.\l\l    .. versionadded:: 0.5\l\l    :param directory: the directory where all the files are stored.\l    :param filename: the filename relative to that directory to\l                     download.\l    :param options: optional keyword arguments that are directly\l                    forwarded to :func:`send_file`.\l    \"\"\"\lfilename = safe_join(directory, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		262 -> 263 [label=calls style=dashed]
		subgraph cluster_262 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			263 [label=safe_join color="#E552FF" shape=tab style=filled]
		}
		264 [label="if not os.path.isabs(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		265 [label="filename = os.path.join(current_app.root_path, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		265 -> 267 [label=calls style=dashed]
		subgraph cluster_265 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			267 [label="os.path.join" color="#E552FF" shape=tab style=filled]
		}
		268 [label="try:\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		270 [label="raise BadRequest()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		272 [label="if not os.path.isfile(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		273 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		273 -> 270 [label="" color=black]
		272 -> 273 [label="not os.path.isfile(filename)" color=green]
		269 [label="options.setdefault('conditional', True)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		269 -> 276 [label=calls style=dashed]
		subgraph cluster_269 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			276 [label="options.setdefault" color="#E552FF" shape=tab style=filled]
		}
		277 [label="return send_file(filename, **options)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		269 -> 277 [label="" color=black]
		272 -> 269 [label="(not not os.path.isfile(filename))" color=red]
		268 -> 272 [label="" color=black]
		265 -> 268 [label="" color=black]
		264 -> 265 [label="not os.path.isabs(filename)" color=green]
		264 -> 268 [label="(not not os.path.isabs(filename))" color=red]
		262 -> 264 [label="" color=black]
	}
	subgraph cluster4get_root_path {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_root_path pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		281 [label="\"\"\"Returns the path to a package or cwd if that cannot be found.  This\l    returns the path of a package or the folder that contains a module.\l\l    Not to be confused with the package path returned by :func:`find_package`.\l    \"\"\"\lmod = sys.modules.get(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		281 -> 282 [label=calls style=dashed]
		subgraph cluster_281 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			282 [label="sys.modules.get" color="#E552FF" shape=tab style=filled]
		}
		283 [label="if mod is not None and hasattr(mod, '__file__'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		284 [label="return os.path.dirname(os.path.abspath(mod.__file__))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		283 -> 284 [label="mod is not None and hasattr(mod, '__file__')" color=green]
		285 [label="loader = pkgutil.get_loader(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		285 -> 287 [label=calls style=dashed]
		subgraph cluster_285 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			287 [label="pkgutil.get_loader" color="#E552FF" shape=tab style=filled]
		}
		288 [label="if loader is None or import_name == '__main__':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		289 [label="return os.getcwd()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		288 -> 289 [label="loader is None or import_name == '__main__'" color=green]
		290 [label="if hasattr(loader, 'get_filename'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		290 -> 292 [label=calls style=dashed]
		subgraph cluster_290 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			292 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		293 [label="filepath = loader.get_filename(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		293 -> 302 [label=calls style=dashed]
		subgraph cluster_293 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			302 [label="loader.get_filename" color="#E552FF" shape=tab style=filled]
		}
		294 [label="return os.path.dirname(os.path.abspath(filepath))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		293 -> 294 [label="" color=black]
		290 -> 293 [label="hasattr(loader, 'get_filename')" color=green]
		295 [label="__import__(import_name)\lmod = sys.modules[import_name]\lfilepath = getattr(mod, '__file__', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		295 -> 296 [label=calls style=dashed]
		295 -> 297 [label=calls style=dashed]
		subgraph cluster_295 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			296 [label=__import__ color="#E552FF" shape=tab style=filled]
			297 [label=getattr color="#E552FF" shape=tab style=filled]
		}
		298 [label="if filepath is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		299 [label="raise RuntimeError(\l    'No root path can be ...\"%s\".  This can happen b...'s a namespace package.  In this case the root path needs to be explicitly provided.'\l     % import_name)\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		298 -> 299 [label="filepath is None" color=green]
		298 -> 294 [label="(filepath is not None)" color=red]
		295 -> 298 [label="" color=black]
		290 -> 295 [label="(not hasattr(loader, 'get_filename'))" color=red]
		288 -> 290 [label="(not (loader is None or import_name == '__main__'))" color=red]
		285 -> 288 [label="" color=black]
		283 -> 285 [label="(not (mod is not None and hasattr(mod, '__file__')))" color=red]
		281 -> 283 [label="" color=black]
	}
	subgraph cluster2_matching_loader_thinks_module_is_package {
		graph [compound=True fontname="DejaVu Sans Mono" label=_matching_loader_thinks_module_is_package pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		306 [label="\"\"\"Given the loader that loaded a module and the module this function\l    attempts to figure out if the given module is actually a package.\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		307 [label="if hasattr(loader, 'is_package'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		307 -> 308 [label=calls style=dashed]
		subgraph cluster_307 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			308 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		309 [label="return loader.is_package(mod_name)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		307 -> 309 [label="hasattr(loader, 'is_package')" color=green]
		311 [label="if loader.__class__.__module__ == '_frozen_importlib' and loader.__class_...'NamespaceLoader':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		312 [label="return True\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		311 -> 312 [label="loader.__class__.__module__ == '_frozen_importlib' and loader.__class__.__name__ == 'NamespaceLoader'" color=green]
		310 [label="raise AttributeError(\l    '%s.is_package() meth...'\l     % loader.__class__.__name__)\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		311 -> 310 [label="(not (loader.__class__.__module__ == '_frozen_importlib' and loader.
    __class__.__name__ == 'NamespaceLoader'))" color=red]
		307 -> 311 [label="(not hasattr(loader, 'is_package'))" color=red]
		306 -> 307 [label="" color=black]
	}
	subgraph cluster4find_package {
		graph [compound=True fontname="DejaVu Sans Mono" label=find_package pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		319 [label="\"\"\"Finds a package and returns the prefix (or None if the package is\l    not installed) as well as the folder that contains the package or\l    module as a tuple.  The package path returned is the module that would\l    have to be added to the pythonpath in order to make it possible to\l    import the module.  The prefix is the path below which a UNIX like\l    folder structure exists (lib, share etc.).\l    \"\"\"\lroot_mod_name = import_name.split('.')[0]\lloader = pkgutil.get_loader(root_mod_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		319 -> 320 [label=calls style=dashed]
		319 -> 321 [label=calls style=dashed]
		subgraph cluster_319 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			320 [label="import_name.split" color="#E552FF" shape=tab style=filled]
			321 [label="pkgutil.get_loader" color="#E552FF" shape=tab style=filled]
		}
		322 [label="if loader is None or import_name == '__main__':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		323 [label="package_path = os.getcwd()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		323 -> 343 [label=calls style=dashed]
		subgraph cluster_323 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			343 [label="os.getcwd" color="#E552FF" shape=tab style=filled]
		}
		324 [label="site_parent, site_folder = os.path.split(package_path)\lpy_prefix = os.path.abspath(sys.prefix)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		324 -> 344 [label=calls style=dashed]
		324 -> 345 [label=calls style=dashed]
		subgraph cluster_324 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			344 [label="os.path.split" color="#E552FF" shape=tab style=filled]
			345 [label="os.path.abspath" color="#E552FF" shape=tab style=filled]
		}
		346 [label="if package_path.startswith(py_prefix):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		346 -> 347 [label=calls style=dashed]
		subgraph cluster_346 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			347 [label="package_path.startswith" color="#E552FF" shape=tab style=filled]
		}
		348 [label="return py_prefix, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		346 -> 348 [label="package_path.startswith(py_prefix)" color=green]
		350 [label="if site_folder.lower() == 'site-packages':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		350 -> 351 [label=calls style=dashed]
		subgraph cluster_350 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			351 [label="site_folder.lower" color="#E552FF" shape=tab style=filled]
		}
		352 [label="parent, folder = os.path.split(site_parent)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		352 -> 354 [label=calls style=dashed]
		subgraph cluster_352 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			354 [label="os.path.split" color="#E552FF" shape=tab style=filled]
		}
		355 [label="if folder.lower() == 'lib':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		355 -> 356 [label=calls style=dashed]
		subgraph cluster_355 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			356 [label="folder.lower" color="#E552FF" shape=tab style=filled]
		}
		357 [label="base_dir = parent\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		358 [label="return base_dir, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		357 -> 358 [label="" color=black]
		355 -> 357 [label="folder.lower() == 'lib'" color=green]
		359 [label="if os.path.basename(parent).lower() == 'lib':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		359 -> 360 [label=calls style=dashed]
		subgraph cluster_359 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			360 [label="os.path.basename.lower" color="#E552FF" shape=tab style=filled]
		}
		361 [label="base_dir = os.path.dirname(parent)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		361 -> 364 [label=calls style=dashed]
		subgraph cluster_361 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			364 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
		}
		361 -> 358 [label="" color=black]
		359 -> 361 [label="os.path.basename(parent).lower() == 'lib'" color=green]
		363 [label="base_dir = site_parent\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		363 -> 358 [label="" color=black]
		359 -> 363 [label="(os.path.basename(parent).lower() != 'lib')" color=red]
		355 -> 359 [label="(folder.lower() != 'lib')" color=red]
		352 -> 355 [label="" color=black]
		350 -> 352 [label="site_folder.lower() == 'site-packages'" color=green]
		349 [label="return None, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		350 -> 349 [label="(site_folder.lower() != 'site-packages')" color=red]
		346 -> 350 [label="(not package_path.startswith(py_prefix))" color=red]
		324 -> 346 [label="" color=black]
		323 -> 324 [label="" color=black]
		322 -> 323 [label="loader is None or import_name == '__main__'" color=green]
		325 [label="if hasattr(loader, 'get_filename'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		325 -> 326 [label=calls style=dashed]
		subgraph cluster_325 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			326 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		327 [label="filename = loader.get_filename(root_mod_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		327 -> 335 [label=calls style=dashed]
		subgraph cluster_327 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			335 [label="loader.get_filename" color="#E552FF" shape=tab style=filled]
		}
		328 [label="package_path = os.path.abspath(os.path.dirname(filename))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		328 -> 336 [label=calls style=dashed]
		subgraph cluster_328 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			336 [label="os.path.abspath" color="#E552FF" shape=tab style=filled]
			337 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
			336 -> 337 [color=black]
		}
		338 [label="if _matching_loader_thinks_module_is_package(loader, root_mod_name):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		338 -> 339 [label=calls style=dashed]
		subgraph cluster_338 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			339 [label=_matching_loader_thinks_module_is_package color="#E552FF" shape=tab style=filled]
		}
		340 [label="package_path = os.path.dirname(package_path)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		340 -> 342 [label=calls style=dashed]
		subgraph cluster_340 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			342 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
		}
		340 -> 324 [label="" color=black]
		338 -> 340 [label="_matching_loader_thinks_module_is_package(loader, root_mod_name)" color=green]
		338 -> 324 [label="(not _matching_loader_thinks_module_is_package(loader, root_mod_name))" color=red]
		328 -> 338 [label="" color=black]
		327 -> 328 [label="" color=black]
		325 -> 327 [label="hasattr(loader, 'get_filename')" color=green]
		329 [label="if hasattr(loader, 'archive'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		329 -> 330 [label=calls style=dashed]
		subgraph cluster_329 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			330 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		331 [label="filename = loader.archive\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		331 -> 328 [label="" color=black]
		329 -> 331 [label="hasattr(loader, 'archive')" color=green]
		333 [label="__import__(import_name)\lfilename = sys.modules[import_name].__file__\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		333 -> 334 [label=calls style=dashed]
		subgraph cluster_333 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			334 [label=__import__ color="#E552FF" shape=tab style=filled]
		}
		333 -> 328 [label="" color=black]
		329 -> 333 [label="(not hasattr(loader, 'archive'))" color=red]
		325 -> 329 [label="(not hasattr(loader, 'get_filename'))" color=red]
		322 -> 325 [label="(not (loader is None or import_name == '__main__'))" color=red]
		319 -> 322 [label="" color=black]
	}
	subgraph cluster0total_seconds {
		graph [compound=True fontname="DejaVu Sans Mono" label=total_seconds pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		457 [label="\"\"\"Returns the total seconds from a timedelta object.\l\l    :param timedelta td: the timedelta to be converted in seconds\l\l    :returns: number of seconds\l    :rtype: int\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		458 [label="return td.days * 60 * 60 * 24 + td.seconds\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		457 -> 458 [label="" color=black]
	}
}
