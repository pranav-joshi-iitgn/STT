digraph "cluster0STTLab4/cs202_miner/Flask_results/helpers.py.changes.cfgs/commit15:81010bf7afb786d3a19ddc2469f9bfdcc9e0d194" {
	graph [compound=True dpi=50 fontname="DejaVu Sans Mono" label="STTLab4/cs202_miner/Flask_results/helpers.py.changes.cfgs/commit15:81010bf7afb786d3a19ddc2469f9bfdcc9e0d194" pack=False rankdir=TB ranksep=0.76 ratio=compress]
	node [fontname="DejaVu Sans Mono" fontsize=0.1 height=4 width=4]
	edge [fontname="DejaVu Sans Mono"]
	1 [label="\"\"\"\l    flask.helpers\l    ~~~~~~~~~~~~~\l\l    Implements various helpers.\l\l    :copyright: (c) 2011 by Armin Ronacher.\l    :license: BSD, see LICENSE for more details.\l\"\"\"\lfrom __future__ import with_statement\limport imp\limport os\limport sys\limport pkgutil\limport posixpath\limport mimetypes\lfrom time import time\lfrom zlib import adler32\lfrom threading import RLock\lfrom werkzeug.urls import url_quote\ljson_available = True\ljson = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	2 [label="import simplejson as json\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	4 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	5 [label="import json\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	7 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	8 [label="from django.utils import simplejson as json\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	10 [label="json_available = False\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	9 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	6 [label="" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	3 [label="from werkzeug.datastructures import Headers\lfrom werkzeug.exceptions import NotFound\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	11 [label="from werkzeug.wsgi import wrap_file\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	13 [label="from werkzeug.utils import wrap_file\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	12 [label="from jinja2 import FileSystemLoader\lfrom .globals import session, _request_ctx_stack, current_app, request\ldef _assert_have_json():...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	21 [label="if not json_available or '\\/' not in json.dumps('/'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
	22 [label="def _tojson_filter(*args, **kwargs):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	23 [label="_missing = object()\l_os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep] if sep not in\l    (None, '/'))\ldef _endpoint_from_view_func(view_func):...\ldef jsonify(*args, **kwargs):...\ldef make_response(*args):...\ldef url_for(endpoint, **values):...\ldef get_template_attribute(template_name, attribute):...\ldef flash(message, category='message'):...\ldef get_flashed_messages(with_categories=False, category_filter=[]):...\ldef send_file(filename_or_fp, mimetype=None, as_attachment=False,...\ldef safe_join(directory, filename):...\ldef send_from_directory(directory, filename, **options):...\ldef get_root_path(import_name):...\ldef find_package(import_name):...\lclass locked_cached_property(object):\l    \"\"\"A decorator that converts a function into a lazy property.  The\l    function wrapped is called the first time to retrieve the result\l    and then that calculated result is used the next time you access\l    the value.  Works like the one in Werkzeug but has a lock for\l    thread safety.\l    \"\"\"\l\l    def __init__(self, func, name=None, doc=None):\l        self.__name__ = name or func.__name__\l        self.__module__ = func.__module__\l        self.__doc__ = doc or func.__doc__\l        self.func = func\l        self.lock = RLock()\l\l    def __get__(self, obj, type=None):\l        if obj is None:\l            return self\l        with self.lock:\l            value = obj.__dict__.get(self.__name__, _missing)\l            if value is _missing:\l                value = self.func(obj)\l                obj.__dict__[self.__name__] = value\l            return value\lclass _PackageBoundObject(object):\l\l    def __init__(self, import_name, template_folder=None):\l        self.import_name = import_name\l        self.template_folder = template_folder\l        self.root_path = get_root_path(self.import_name)\l        self._static_folder = None\l        self._static_url_path = None\l\l    def _get_static_folder(self):\l        if self._static_folder is not None:\l            return os.path.join(self.root_path, self._static_folder)\l\l    def _set_static_folder(self, value):\l        self._static_folder = value\l    static_folder = property(_get_static_folder, _set_static_folder)\l    del _get_static_folder, _set_static_folder\l\l    def _get_static_url_path(self):\l        if self._static_url_path is None:\l            if self.static_folder is None:\l                return None\l            return '/' + os.path.basename(self.static_folder)\l        return self._static_url_path\l\l    def _set_static_url_path(self, value):\l        self._static_url_path = value\l    static_url_path = property(_get_static_url_path, _set_static_url_path)\l    del _get_static_url_path, _set_static_url_path\l\l    @property\l    def has_static_folder(self):\l        \"\"\"This is `True` if th...'s container has a\l        folder named ``'static'``.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        return self.static_folder is not None\l\l    @locked_cached_property\l    def jinja_loader(self):\l        \"\"\"The Jinja loader for this package bound object.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        if self.template_folder is not None:\l            return FileSystemLoader(os.path.join(self.root_path, self.\l                template_folder))\l\l    def send_static_file(self, filename):\l        \"\"\"Function used internally to send static files from the static\l        folder to the browser.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        if not self.has_static_folder:\l            raise RuntimeError('No static folder for...')\l        return send_from_directory(self.static_folder, filename)\l\l    def open_resource(self, resource, mode='rb'):\l        \"\"\"Opens a resource fro...'s resource folder.  To see\l        how this works, consider the following folder structure::\l\l            /myapplication.py\l            /schema.sql\l            /static\l                /style.css\l            /templates\l                /layout.html\l                /index.html\l\l        If you want to open the `schema.sql` file you would do the\l        following::\l\l            with app.open_resource('schema.sql') as f:\l                contents = f.read()\l                do_something_with(contents)\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        \"\"\"\l        if mode not in ('r', 'rb'):\l            raise ValueError('Resources can only b...')\l        return open(os.path.join(self.root_path, resource), mode)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	23 -> 32 [label=calls style=dashed]
	23 -> 33 [label=calls style=dashed]
	subgraph cluster_23 {
		graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		32 [label=object color="#E552FF" shape=tab style=filled]
		33 [label=list color="#E552FF" shape=tab style=filled]
	}
	22 -> 23 [label="" color=black]
	21 -> 22 [label="not json_available or '\\/' not in json.dumps('/')" color=green]
	24 [label="_tojson_filter = json.dumps\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	24 -> 23 [label="" color=black]
	21 -> 24 [label="(not (not json_available or '\\/' not in json.dumps('/')))" color=red]
	12 -> 21 [label="" color=black]
	13 -> 12 [label="" color=black]
	11 -> 12 [label="" color=black]
	3 -> 11 [label="" color=black]
	6 -> 3 [label="" color=black]
	9 -> 6 [label="" color=black]
	10 -> 9 [label="" color=black]
	8 -> 9 [label="" color=black]
	7 -> 8 [label="" color=black]
	5 -> 6 [label="" color=black]
	4 -> 5 [label="" color=black]
	2 -> 3 [label="" color=black]
	1 -> 2 [label="" color=black]
	subgraph cluster1locked_cached_property {
		graph [compound=True fontname="DejaVu Sans Mono" label=locked_cached_property pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		279 [label="\"\"\"A decorator that converts a function into a lazy property.  The\l    function wrapped is called the first time to retrieve the result\l    and then that calculated result is used the next time you access\l    the value.  Works like the one in Werkzeug but has a lock for\l    thread safety.\l    \"\"\"\ldef __init__(self, func, name=None, doc=None):...\ldef __get__(self, obj, type=None):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		subgraph cluster2__init__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__init__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			281 [label="self.__name__ = name or func.__name__\lself.__module__ = func.__module__\lself.__doc__ = doc or func.__doc__\lself.func = func\lself.lock = RLock()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			281 -> 282 [label=calls style=dashed]
			subgraph cluster_281 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				282 [label=RLock color="#E552FF" shape=tab style=filled]
			}
		}
		subgraph cluster1__get__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__get__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			285 [label="if obj is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			286 [label="return self\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			285 -> 286 [label="obj is None" color=green]
			287 [label="value = obj.__dict__.get(self.__name__, _missing)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			287 -> 289 [label=calls style=dashed]
			subgraph cluster_287 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				289 [label="obj.__dict__.get" color="#E552FF" shape=tab style=filled]
			}
			290 [label="if value is _missing:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			291 [label="value = self.func(obj)\lobj.__dict__[self.__name__] = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			291 -> 293 [label=calls style=dashed]
			subgraph cluster_291 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				293 [label="self.func" color="#E552FF" shape=tab style=filled]
			}
			292 [label="return value\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			291 -> 292 [label="" color=black]
			290 -> 291 [label="value is _missing" color=green]
			290 -> 292 [label="(value is not _missing)" color=red]
			287 -> 290 [label="" color=black]
			285 -> 287 [label="(obj is not None)" color=red]
		}
	}
	subgraph cluster1_PackageBoundObject {
		graph [compound=True fontname="DejaVu Sans Mono" label=_PackageBoundObject pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		298 [label="def __init__(self, import_name, template_folder=None):...\ldef _get_static_folder(self):...\ldef _set_static_folder(self, value):...\lstatic_folder = property(_get_static_folder, _set_static_folder)\ldef _get_static_url_path(self):...\ldef _set_static_url_path(self, value):...\lstatic_url_path = property(_get_static_url_path, _set_static_url_path)\l@property...\l@locked_cached_property...\ldef send_static_file(self, filename):...\ldef open_resource(self, resource, mode='rb'):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		298 -> 312 [label=calls style=dashed]
		298 -> 326 [label=calls style=dashed]
		subgraph cluster_298 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			312 [label=property color="#E552FF" shape=tab style=filled]
			326 [label=property color="#E552FF" shape=tab style=filled]
		}
		subgraph cluster3__init__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__init__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			300 [label="self.import_name = import_name\lself.template_folder = template_folder\lself.root_path = get_root_path(self.import_name)\lself._static_folder = None\lself._static_url_path = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			300 -> 301 [label=calls style=dashed]
			subgraph cluster_300 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				301 [label=get_root_path color="#E552FF" shape=tab style=filled]
			}
		}
		subgraph cluster1_get_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			304 [label="if self._static_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			305 [label="return os.path.join(self.root_path, self._static_folder)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			304 -> 305 [label="self._static_folder is not None" color=green]
		}
		subgraph cluster1_set_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			310 [label="self._static_folder = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster1_get_static_url_path {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_static_url_path pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			314 [label="if self._static_url_path is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			315 [label="if self.static_folder is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			317 [label="return None\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			315 -> 317 [label="self.static_folder is None" color=green]
			318 [label="return '/' + os.path.basename(self.static_folder)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			315 -> 318 [label="(self.static_folder is not None)" color=red]
			314 -> 315 [label="self._static_url_path is None" color=green]
			316 [label="return self._static_url_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			314 -> 316 [label="(self._static_url_path is not None)" color=red]
		}
		subgraph cluster1_set_static_url_path {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_static_url_path pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			324 [label="self._static_url_path = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster1has_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=has_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			328 [label="\"\"\"This is `True` if th...'s container has a\l        folder named ``'static'``.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			329 [label="return self.static_folder is not None\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			328 -> 329 [label="" color=black]
		}
		subgraph cluster1jinja_loader {
			graph [compound=True fontname="DejaVu Sans Mono" label=jinja_loader pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			333 [label="\"\"\"The Jinja loader for this package bound object.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			334 [label="if self.template_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			335 [label="return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			334 -> 335 [label="self.template_folder is not None" color=green]
			333 -> 334 [label="" color=black]
		}
		subgraph cluster1send_static_file {
			graph [compound=True fontname="DejaVu Sans Mono" label=send_static_file pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			340 [label="\"\"\"Function used internally to send static files from the static\l        folder to the browser.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			341 [label="if not self.has_static_folder:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			342 [label="raise RuntimeError('No static folder for...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			341 -> 342 [label="not self.has_static_folder" color=green]
			343 [label="return send_from_directory(self.static_folder, filename)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			341 -> 343 [label="(not not self.has_static_folder)" color=red]
			340 -> 341 [label="" color=black]
		}
		subgraph cluster1open_resource {
			graph [compound=True fontname="DejaVu Sans Mono" label=open_resource pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			348 [label="\"\"\"Opens a resource fro...'s resource folder.  To see\l        how this works, consider the following folder structure::\l\l            /myapplication.py\l            /schema.sql\l            /static\l                /style.css\l            /templates\l                /layout.html\l                /index.html\l\l        If you want to open the `schema.sql` file you would do the\l        following::\l\l            with app.open_resource('schema.sql') as f:\l                contents = f.read()\l                do_something_with(contents)\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			349 [label="if mode not in ('r', 'rb'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			350 [label="raise ValueError('Resources can only b...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			349 -> 350 [label="mode not in ('r', 'rb')" color=green]
			351 [label="return open(os.path.join(self.root_path, resource), mode)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			349 -> 351 [label="(mode in ('r', 'rb'))" color=red]
			348 -> 349 [label="" color=black]
		}
	}
	subgraph cluster1_assert_have_json {
		graph [compound=True fontname="DejaVu Sans Mono" label=_assert_have_json pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		15 [label="\"\"\"Helper function that...\"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		16 [label="if not json_available:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		17 [label="raise RuntimeError('simplejson not insta...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		16 -> 17 [label="not json_available" color=green]
		15 -> 16 [label="" color=black]
	}
	subgraph cluster1_tojson_filter {
		graph [compound=True fontname="DejaVu Sans Mono" label=_tojson_filter pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		26 [label="if __debug__:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		27 [label="_assert_have_json()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		27 -> 29 [label=calls style=dashed]
		subgraph cluster_27 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			29 [label=_assert_have_json color="#E552FF" shape=tab style=filled]
		}
		28 [label="return json.dumps(*args, **kwargs).replace('/', '\\/')\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		27 -> 28 [label="" color=black]
		26 -> 27 [label=__debug__ color=green]
		26 -> 28 [label="(not __debug__)" color=red]
	}
	subgraph cluster1_endpoint_from_view_func {
		graph [compound=True fontname="DejaVu Sans Mono" label=_endpoint_from_view_func pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		35 [label="\"\"\"Internal helper that returns the default endpoint for a given\l    function.  This always is the function name.\l    \"\"\"\lassert view_func is not None, 'expected view func i...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		37 [label="return view_func.__name__\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		35 -> 37 [label="view_func is not None" color=black]
	}
	subgraph cluster1jsonify {
		graph [compound=True fontname="DejaVu Sans Mono" label=jsonify pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		41 [label="\"\"\"Creates a :class:`~flask.Response` with the JSON representation of\l    the given arguments with an `application/json` mimetype.  The arguments\l    to this function are the same as to the :class:`dict` constructor.\l\l    Example usage::\l\l        @app.route('/_get_current_user')\l        def get_current_user():\l            return jsonify(username=g.user.username,\l                           email=g.user.email,\l                           id=g.user.id)\l\l    This will send a JSON response like this to the browser::\l\l        {\l            \"username\": \"admin\",\l            \"email\": \"admin@localhost\",\l            \"id\": 42\l        }\l\l    This requires Python 2.6 or an installed version of simplejson.  For\l    security reasons only objects are supported toplevel.  For more\l    information about this, have a look at :ref:`json-security`.\l\l    .. versionadded:: 0.2\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		42 [label="if __debug__:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		43 [label="_assert_have_json()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		43 -> 45 [label=calls style=dashed]
		subgraph cluster_43 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			45 [label=_assert_have_json color="#E552FF" shape=tab style=filled]
		}
		44 [label="return current_app.response_class(json.dumps(dict(*args, **kwargs), indent=\l    None if request.is_xhr else 2), mimetype='application/json')\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		43 -> 44 [label="" color=black]
		42 -> 43 [label=__debug__ color=green]
		42 -> 44 [label="(not __debug__)" color=red]
		41 -> 42 [label="" color=black]
	}
	subgraph cluster1make_response {
		graph [compound=True fontname="DejaVu Sans Mono" label=make_response pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		49 [label="\"\"\"Sometimes it is necessary to set additional headers in a view.  Because\l    views do not have to return response objects but can return a value that\l    is converted into a response object by Flask itself, it becomes tricky to\l    add headers to it.  This function can be called instead of using a return\l    and you will get a response object which you can use to attach headers.\l\l    If view looked like this and you want to add a new header::\l\l        def index():\l            return render_template('index.html', foo=42)\l\l    You can now do something like this::\l\l        def index():\l            response = make_response(render_template('index.html', foo=42))\l            response.headers['X-Parachutes'] = 'parachutes are cool'\l            return response\l\l    This function accepts the very same arguments you can return from a\l    view function.  This for example creates a response with a 404 error\l    code::\l\l        response = make_response(render_template('not_found.html'), 404)\l\l    The other use case of this function is to force the return value of a\l    view function into a response which is helpful with view\l    decorators::\l\l        response = make_response(view_function())\l        response.headers['X-Parachutes'] = 'parachutes are cool'\l\l    Internally this function does the following things:\l\l    -   if no arguments are passed, it creates a new response argument\l    -   if one argument is passed, :meth:`flask.Flask.make_response`\l        is invoked with it.\l    -   if more than one argument is passed, the arguments are passed\l        to the :meth:`flask.Flask.make_response` function as tuple.\l\l    .. versionadded:: 0.6\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		50 [label="if not args:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		51 [label="return current_app.response_class()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		50 -> 51 [label="not args" color=green]
		52 [label="if len(args) == 1:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		52 -> 54 [label=calls style=dashed]
		subgraph cluster_52 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			54 [label=len color="#E552FF" shape=tab style=filled]
		}
		55 [label="args = args[0]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		56 [label="return current_app.make_response(args)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		55 -> 56 [label="" color=black]
		52 -> 55 [label="len(args) == 1" color=green]
		52 -> 56 [label="(len(args) != 1)" color=red]
		50 -> 52 [label="(not not args)" color=red]
		49 -> 50 [label="" color=black]
	}
	subgraph cluster1url_for {
		graph [compound=True fontname="DejaVu Sans Mono" label=url_for pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		60 [label="\"\"\"Generates a URL to the given endpoint with the method provided.\l\l    Variable arguments that are unknown to the target endpoint are appended\l    to the generated URL as query arguments.  If the value of a query argument\l    is `None`, the whole pair is skipped.  In case blueprints are active\l    you can shortcut references to the same blueprint by prefixing the\l    local endpoint with a dot (``.``).\l\l    This will reference the index function local to the current blueprint::\l\l        url_for('.index')\l\l    For more information, head over to the :ref:`Quickstart <url-building>`.\l\l    .. versionadded:: 0.9\l       The `_anchor` and `_method` parameters were added.\l\l    :param endpoint: the endpoint of the URL (name of the function)\l    :param values: the variable arguments of the URL rule\l    :param _external: if set to `True`, an absolute URL is generated.\l    :param _anchor: if provided this is added as anchor to the URL.\l    :param _method: if provided this explicitly specifies an HTTP method.\l    \"\"\"\lctx = _request_ctx_stack.top\lblueprint_name = request.blueprint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		61 [label="if not ctx.request._is_old_module:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		62 [label="if endpoint[:1] == '.':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		73 [label="if blueprint_name is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		75 [label="endpoint = blueprint_name + endpoint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		63 [label="external = values.pop('_external', False)\lanchor = values.pop('_anchor', None)\lmethod = values.pop('_method', None)\lctx.app.inject_url_defaults(endpoint, values)\lrv = ctx.url_adapter.build(endpoint, values, method=method, force_external=\l    external)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		63 -> 78 [label=calls style=dashed]
		63 -> 79 [label=calls style=dashed]
		63 -> 80 [label=calls style=dashed]
		63 -> 81 [label=calls style=dashed]
		63 -> 82 [label=calls style=dashed]
		subgraph cluster_63 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			78 [label="values.pop" color="#E552FF" shape=tab style=filled]
			79 [label="values.pop" color="#E552FF" shape=tab style=filled]
			80 [label="values.pop" color="#E552FF" shape=tab style=filled]
			81 [label="ctx.app.inject_url_defaults" color="#E552FF" shape=tab style=filled]
			82 [label="ctx.url_adapter.build" color="#E552FF" shape=tab style=filled]
		}
		83 [label="if anchor is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		84 [label="rv += '#' + url_quote(anchor)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		84 -> 86 [label=calls style=dashed]
		subgraph cluster_84 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			86 [label=url_quote color="#E552FF" shape=tab style=filled]
		}
		85 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		84 -> 85 [label="" color=black]
		83 -> 84 [label="anchor is not None" color=green]
		83 -> 85 [label="(anchor is None)" color=red]
		63 -> 83 [label="" color=black]
		75 -> 63 [label="" color=black]
		73 -> 75 [label="blueprint_name is not None" color=green]
		77 [label="endpoint = endpoint[1:]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		77 -> 63 [label="" color=black]
		73 -> 77 [label="(blueprint_name is None)" color=red]
		62 -> 73 [label="endpoint[:1] == '.'" color=green]
		62 -> 63 [label="(endpoint[:1] != '.')" color=red]
		61 -> 62 [label="not ctx.request._is_old_module" color=green]
		64 [label="if '.' not in endpoint:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		65 [label="if blueprint_name is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		71 [label="endpoint = blueprint_name + '.' + endpoint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		71 -> 63 [label="" color=black]
		65 -> 71 [label="blueprint_name is not None" color=green]
		65 -> 63 [label="(blueprint_name is None)" color=red]
		64 -> 65 [label="'.' not in endpoint" color=green]
		67 [label="if endpoint.startswith('.'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		67 -> 68 [label=calls style=dashed]
		subgraph cluster_67 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			68 [label="endpoint.startswith" color="#E552FF" shape=tab style=filled]
		}
		69 [label="endpoint = endpoint[1:]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		69 -> 63 [label="" color=black]
		67 -> 69 [label="endpoint.startswith('.')" color=green]
		67 -> 63 [label="(not endpoint.startswith('.'))" color=red]
		64 -> 67 [label="('.' in endpoint)" color=red]
		61 -> 64 [label="(not not ctx.request._is_old_module)" color=red]
		60 -> 61 [label="" color=black]
	}
	subgraph cluster1get_template_attribute {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_template_attribute pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		90 [label="\"\"\"Loads a macro (or variable) a template exports.  This can be used to\l    invoke a macro from within Python code.  If you for example have a\l    template named `_cider.html` with the following contents:\l\l    .. sourcecode:: html+jinja\l\l       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\l\l    You can access this from Python code like this::\l\l        hello = get_template_attribute('_cider.html', 'hello')\l        return hello('World')\l\l    .. versionadded:: 0.2\l\l    :param template_name: the name of the template\l    :param attribute: the name of the variable of macro to acccess\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		91 [label="return getattr(current_app.jinja_env.get_template(template_name).module,\l    attribute)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		90 -> 91 [label="" color=black]
	}
	subgraph cluster1flash {
		graph [compound=True fontname="DejaVu Sans Mono" label=flash pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		95 [label="\"\"\"Flashes a message to the next request.  In order to remove the\l    flashed message from the session and to display it to the user,\l    the template has to call :func:`get_flashed_messages`.\l\l    .. versionchanged:: 0.3\l       `category` parameter added.\l\l    :param message: the message to be flashed.\l    :param category: the category for the message.  The following values\l                     are recommended: ``'message'`` for any kind of message,\l                     ``'error'`` for errors, ``'info'`` for information\l                     messages and ``'warning'`` for warnings.  However any\l                     kind of string can be used as category.\l    \"\"\"\lsession.setdefault('_flashes', []).append((category, message))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		95 -> 96 [label=calls style=dashed]
		subgraph cluster_95 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			96 [label="session.setdefault.append" color="#E552FF" shape=tab style=filled]
		}
	}
	subgraph cluster1get_flashed_messages {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_flashed_messages pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		99 [label="\"\"\"Pulls all flashed messages from the session and returns them.\l    Further calls in the same request to the function will return\l    the same messages.  By default just the messages are returned,\l    but when `with_categories` is set to `True`, the return value will\l    be a list of tuples in the form ``(category, message)`` instead.\l\l    Filter the flashed messages to one or more categories by providing those\l    categories in `category_filter`.  This allows rendering categories in\l    separate html blocks.  The `with_categories` and `category_filter`\l    arguments are distinct:\l\l    * `with_categories` controls whether categories are returned with message\l      text (`True` gives a tuple, where `False` gives just the message text).\l    * `category_filter` filters the messages down to only those matching the\l      provided categories.\l\l    Example usage:\l\l    .. sourcecode:: html+jinja\l\l        {% for category, msg in get_flashed_messages(with_categories=true) %}\l          <p class=flash-{{ category }}>{{ msg }}\l        {% endfor %}\l\l    Example usage similar to http://twitter.github.com/bootstrap/#alerts:\l\l    .. sourcecode:: html+jinja\l\l        {% with errors = get_flashed_messages(category_filter=[\"error\"]) %}\l        {% if errors %}\l        <div class=\"alert-message block-...\">\l          <a class=\"close\" href=\"#\">×</a>\l          <ul>\l            {%- for msg in errors %}\l            <li>{{ msg }}</li>\l            {% endfor -%}\l          </ul>\l        </div>\l        {% endif %}\l        {% endwith %}\l\l    .. versionchanged:: 0.3\l       `with_categories` parameter added.\l\l    .. versionchanged:: 0.9\l        `category_filter` parameter added.\l\l    :param with_categories: set to `True` to also receive categories.\l    :param category_filter: whitelist of categories to limit return values\l    \"\"\"\lflashes = _request_ctx_stack.top.flashes\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		100 [label="if flashes is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		101 [label="_request_ctx_stack.top.flashes = flashes = session.pop('_flashes'\l    ) if '_flashes' in session else []\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		101 -> 103 [label=calls style=dashed]
		subgraph cluster_101 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			103 [label="session.pop" color="#E552FF" shape=tab style=filled]
		}
		102 [label="if category_filter:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		104 [label="flashes = filter(lambda f: f[0] in category_filter, flashes)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		104 -> 106 [label=calls style=dashed]
		subgraph cluster_104 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			106 [label=filter color="#E552FF" shape=tab style=filled]
		}
		105 [label="if not with_categories:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		107 [label="return [x[1] for x in flashes]\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		105 -> 107 [label="not with_categories" color=green]
		108 [label="return flashes\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		105 -> 108 [label="(not not with_categories)" color=red]
		104 -> 105 [label="" color=black]
		102 -> 104 [label=category_filter color=green]
		102 -> 105 [label="(not category_filter)" color=red]
		101 -> 102 [label="" color=black]
		100 -> 101 [label="flashes is None" color=green]
		100 -> 102 [label="(flashes is not None)" color=red]
		99 -> 100 [label="" color=black]
	}
	subgraph cluster1send_file {
		graph [compound=True fontname="DejaVu Sans Mono" label=send_file pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		113 [label="\"\"\"Sends the contents of a file to the client.  This will use the\l    most efficient method available and configured.  By default it will\l    try to use the WSGI server's file_wrapper support.  Alternatively\l    you can set the application's :attr:`~Flask.use_x_sendfile` attribute\l    to ``True`` to directly emit an `X-Sendfile` header.  This however\l    requires support of the underlying webserver for `X-Sendfile`.\l\l    By default it will try to guess the mimetype for you, but you can\l    also explicitly provide one.  For extra security you probably want\l    to send certain files as attachment (HTML for instance).  The mimetype\l    guessing requires a `filename` or an `attachment_filename` to be\l    provided.\l\l    Please never pass filenames to this function from user sources without\l    checking them first.  Something like this is usually sufficient to\l    avoid security problems::\l\l        if '..' in filename or file...'/'):\l            abort(404)\l\l    .. versionadded:: 0.2\l\l    .. versionadded:: 0.5\l       The `add_etags`, `cache_timeout` and `conditional` parameters were\l       added.  The default behaviour is now to attach etags.\l\l    .. versionchanged:: 0.7\l       mimetype guessing and etag support for file objects was\l       deprecated because it was unreliable.  Pass a filename if you are\l       able to, otherwise attach an etag yourself.  This functionality\l       will be removed in Flask 1.0\l\l    :param filename_or_fp: the filename of the file to send.  This is\l                           relative to the :attr:`~Flask.root_path` if a\l                           relative path is specified.\l                           Alternatively a file object might be provided\l                           in which case `X-Sendfile` might not work and\l                           fall back to the traditional method.  Make sure\l                           that the file pointer is positioned at the start\l                           of data to send before calling :func:`send_file`.\l    :param mimetype: the mimetype of the file if provided, otherwise\l                     auto detection happens.\l    :param as_attachment: set to `True` if you want to send this file with\l                          a ``Content-Disposition: attachment`` header.\l    :param attachment_filename: the filename for the attachment if it\l                                differs from the file's filename.\l    :param add_etags: set to `False` to disable attaching of etags.\l    :param conditional: set to `True` to enable conditional responses.\l    :param cache_timeout: the timeout in seconds for the headers.\l    \"\"\"\lmtime = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		114 [label="if isinstance(filename_or_fp, basestring):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		114 -> 115 [label=calls style=dashed]
		subgraph cluster_114 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			115 [label=isinstance color="#E552FF" shape=tab style=filled]
		}
		116 [label="filename = filename_or_fp\lfile = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		117 [label="if filename is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		129 [label="if not os.path.isabs(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		131 [label="filename = os.path.join(current_app.root_path, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		131 -> 133 [label=calls style=dashed]
		subgraph cluster_131 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			133 [label="os.path.join" color="#E552FF" shape=tab style=filled]
		}
		130 [label="if mimetype is None and (filename or attachment_filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		134 [label="mimetype = mimetypes.guess_type(filename or attachment_filename)[0]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		134 -> 136 [label=calls style=dashed]
		subgraph cluster_134 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			136 [label="mimetypes.guess_type" color="#E552FF" shape=tab style=filled]
		}
		135 [label="if mimetype is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		137 [label="mimetype = 'application/octet-st...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		138 [label="headers = Headers()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		138 -> 139 [label=calls style=dashed]
		subgraph cluster_138 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			139 [label=Headers color="#E552FF" shape=tab style=filled]
		}
		140 [label="if as_attachment:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		141 [label="if attachment_filename is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		143 [label="if filename is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		145 [label="raise TypeError('filename unavailable...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		143 -> 145 [label="filename is None" color=green]
		146 [label="attachment_filename = os.path.basename(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		146 -> 148 [label=calls style=dashed]
		subgraph cluster_146 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			148 [label="os.path.basename" color="#E552FF" shape=tab style=filled]
		}
		144 [label="headers.add('Content-Disposition', 'attachment', filename=attachment_filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		144 -> 149 [label=calls style=dashed]
		subgraph cluster_144 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			149 [label="headers.add" color="#E552FF" shape=tab style=filled]
		}
		142 [label="if current_app.use_x_sendfile and filename:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		150 [label="if file is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		158 [label="file.close()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		158 -> 160 [label=calls style=dashed]
		subgraph cluster_158 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			160 [label="file.close" color="#E552FF" shape=tab style=filled]
		}
		159 [label="headers['X-Sendfile'] = filename\ldata = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		151 [label="rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\l    direct_passthrough=True)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		151 -> 161 [label=calls style=dashed]
		subgraph cluster_151 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			161 [label="current_app.response_class" color="#E552FF" shape=tab style=filled]
		}
		162 [label="if mtime is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		163 [label="rv.last_modified = int(mtime)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		163 -> 165 [label=calls style=dashed]
		subgraph cluster_163 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			165 [label=int color="#E552FF" shape=tab style=filled]
		}
		164 [label="rv.cache_control.public = True\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		166 [label="if cache_timeout:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		167 [label="rv.cache_control.max_age = cache_timeout\lrv.expires = int(time() + cache_timeout)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		167 -> 169 [label=calls style=dashed]
		subgraph cluster_167 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			169 [label=int color="#E552FF" shape=tab style=filled]
			170 [label=time color="#E552FF" shape=tab style=filled]
			169 -> 170 [color=black]
		}
		168 [label="if add_etags and filename is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		171 [label="rv.set_etag('flask-%s-%s-%s' % (os.path.getmtime(filename), os.path.getsize\l    (filename), adler32(filename.encode('utf8') if isinstance(filename,\l    unicode) else filename) & 4294967295))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		171 -> 173 [label=calls style=dashed]
		subgraph cluster_171 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			173 [label="rv.set_etag" color="#E552FF" shape=tab style=filled]
			174 [label="os.path.getmtime" color="#E552FF" shape=tab style=filled]
			173 -> 174 [color=black]
			175 [label="os.path.getsize" color="#E552FF" shape=tab style=filled]
			173 -> 175 [color=black]
			176 [label=adler32 color="#E552FF" shape=tab style=filled]
			173 -> 176 [color=black]
			177 [label=isinstance color="#E552FF" shape=tab style=filled]
			176 -> 177 [color=black]
			178 [label="filename.encode" color="#E552FF" shape=tab style=filled]
			176 -> 178 [color=black]
		}
		179 [label="if conditional:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		180 [label="rv = rv.make_conditional(request)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		180 -> 182 [label=calls style=dashed]
		subgraph cluster_180 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			182 [label="rv.make_conditional" color="#E552FF" shape=tab style=filled]
		}
		183 [label="if rv.status_code == 304:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		184 [label="rv.headers.pop('x-sendfile', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		184 -> 186 [label=calls style=dashed]
		subgraph cluster_184 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			186 [label="rv.headers.pop" color="#E552FF" shape=tab style=filled]
		}
		172 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		184 -> 172 [label="" color=black]
		183 -> 184 [label="rv.status_code == 304" color=green]
		183 -> 172 [label="(rv.status_code != 304)" color=red]
		180 -> 183 [label="" color=black]
		179 -> 180 [label=conditional color=green]
		179 -> 172 [label="(not conditional)" color=red]
		171 -> 179 [label="" color=black]
		168 -> 171 [label="add_etags and filename is not None" color=green]
		168 -> 172 [label="(not (add_etags and filename is not None))" color=red]
		167 -> 168 [label="" color=black]
		166 -> 167 [label=cache_timeout color=green]
		166 -> 168 [label="(not cache_timeout)" color=red]
		164 -> 166 [label="" color=black]
		163 -> 164 [label="" color=black]
		162 -> 163 [label="mtime is not None" color=green]
		162 -> 164 [label="(mtime is None)" color=red]
		151 -> 162 [label="" color=black]
		159 -> 151 [label="" color=black]
		158 -> 159 [label="" color=black]
		150 -> 158 [label="file is not None" color=green]
		150 -> 159 [label="(file is None)" color=red]
		142 -> 150 [label="current_app.use_x_sendfile and filename" color=green]
		152 [label="if file is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		153 [label="file = open(filename, 'rb')\lmtime = os.path.getmtime(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		153 -> 155 [label=calls style=dashed]
		153 -> 156 [label=calls style=dashed]
		subgraph cluster_153 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			155 [label=open color="#E552FF" shape=tab style=filled]
			156 [label="os.path.getmtime" color="#E552FF" shape=tab style=filled]
		}
		154 [label="data = wrap_file(request.environ, file)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		154 -> 157 [label=calls style=dashed]
		subgraph cluster_154 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			157 [label=wrap_file color="#E552FF" shape=tab style=filled]
		}
		154 -> 151 [label="" color=black]
		153 -> 154 [label="" color=black]
		152 -> 153 [label="file is None" color=green]
		152 -> 154 [label="(file is not None)" color=red]
		142 -> 152 [label="(not (current_app.use_x_sendfile and filename))" color=red]
		144 -> 142 [label="" color=black]
		146 -> 144 [label="" color=black]
		143 -> 146 [label="(filename is not None)" color=red]
		141 -> 143 [label="attachment_filename is None" color=green]
		141 -> 144 [label="(attachment_filename is not None)" color=red]
		140 -> 141 [label=as_attachment color=green]
		140 -> 142 [label="(not as_attachment)" color=red]
		138 -> 140 [label="" color=black]
		137 -> 138 [label="" color=black]
		135 -> 137 [label="mimetype is None" color=green]
		135 -> 138 [label="(mimetype is not None)" color=red]
		134 -> 135 [label="" color=black]
		130 -> 134 [label="mimetype is None and (filename or attachment_filename)" color=green]
		130 -> 135 [label="(not (mimetype is None and (filename or attachment_filename)))" color=red]
		131 -> 130 [label="" color=black]
		129 -> 131 [label="not os.path.isabs(filename)" color=green]
		129 -> 130 [label="(not not os.path.isabs(filename))" color=red]
		117 -> 129 [label="filename is not None" color=green]
		117 -> 130 [label="(filename is None)" color=red]
		116 -> 117 [label="" color=black]
		114 -> 116 [label="isinstance(filename_or_fp, basestring)" color=green]
		118 [label="from warnings import warn\lfile = filename_or_fp\lfilename = getattr(file, 'name', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		118 -> 119 [label=calls style=dashed]
		subgraph cluster_118 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			119 [label=getattr color="#E552FF" shape=tab style=filled]
		}
		120 [label="if not attachment_filename and not mimetype and isinstance(filename, basestring\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		121 [label="warn(DeprecationWarning(\l    'The filename support...'\l    ), stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		121 -> 123 [label=calls style=dashed]
		subgraph cluster_121 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			123 [label=warn color="#E552FF" shape=tab style=filled]
			124 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
			123 -> 124 [color=black]
		}
		122 [label="if add_etags:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		125 [label="warn(DeprecationWarning(\l    'In future flask rele...'\l    ), stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		125 -> 127 [label=calls style=dashed]
		subgraph cluster_125 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			127 [label=warn color="#E552FF" shape=tab style=filled]
			128 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
			127 -> 128 [color=black]
		}
		125 -> 117 [label="" color=black]
		122 -> 125 [label=add_etags color=green]
		122 -> 117 [label="(not add_etags)" color=red]
		121 -> 122 [label="" color=black]
		120 -> 121 [label="not attachment_filename and not mimetype and isinstance(filename, basestring)" color=red]
		120 -> 122 [label="(not (not attachment_filename and not mimetype and isinstance(filename,
    basestring)))" color=red]
		118 -> 120 [label="" color=black]
		114 -> 118 [label="(not isinstance(filename_or_fp, basestring))" color=red]
		113 -> 114 [label="" color=black]
	}
	subgraph cluster1safe_join {
		graph [compound=True fontname="DejaVu Sans Mono" label=safe_join pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		190 [label="\"\"\"Safely join `directory` and `filename`.\l\l    Example usage::\l\l        @app.route('/wiki/<path:filename...')\l        def wiki_page(filename):\l            filename = safe_join(app.config['WIKI_FOLDER'], filename)\l            with open(filename, 'rb') as fd:\l                content = fd.read() # Read and process the file content...\l\l    :param directory: the base directory.\l    :param filename: the untrusted filename relative to that directory.\l    :raises: :class:`~werkzeug.exceptions.NotFound` if the resulting path\l             would fall out of `directory`.\l    \"\"\"\lfilename = posixpath.normpath(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		190 -> 191 [label=calls style=dashed]
		subgraph cluster_190 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			191 [label="posixpath.normpath" color="#E552FF" shape=tab style=filled]
		}
		192 [label="for sep in _os_alt_seps:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
		193 [label="if sep in filename:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		195 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		193 -> 195 [label="sep in filename" color=green]
		193 -> 192 [label="(sep not in filename)" color=red]
		192 -> 193 [label=_os_alt_seps color=green]
		194 [label="if os.path.isabs(filename) or filename.startswith('../'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		198 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		194 -> 198 [label="os.path.isabs(filename) or filename.startswith('../')" color=green]
		199 [label="return os.path.join(directory, filename)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		194 -> 199 [label="(not (os.path.isabs(filename) or filename.startswith('../')))" color=red]
		192 -> 194 [label="" color=green]
		190 -> 192 [label="" color=black]
	}
	subgraph cluster1send_from_directory {
		graph [compound=True fontname="DejaVu Sans Mono" label=send_from_directory pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		204 [label="\"\"\"Send a file from a given directory with :func:`send_file`.  This\l    is a secure way to quickly expose static files from an upload folder\l    or something similar.\l\l    Example usage::\l\l        @app.route('/uploads/<path:filen...')\l        def download_file(filename):\l            return send_from_directory(app.config['UPLOAD_FOLDER'],\l                                       filename, as_attachment=True)\l\l    .. admonition:: Sending files and Performance\l\l       It is strongly recommended to activate either `X-Sendfile` support in\l       your webserver or (if no authentication happens) to tell the webserver\l       to serve files for the given path on its own without calling into the\l       web application for improved performance.\l\l    .. versionadded:: 0.5\l\l    :param directory: the directory where all the files are stored.\l    :param filename: the filename relative to that directory to\l                     download.\l    :param options: optional keyword arguments that are directly\l                    forwarded to :func:`send_file`.\l    \"\"\"\lfilename = safe_join(directory, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		204 -> 205 [label=calls style=dashed]
		subgraph cluster_204 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			205 [label=safe_join color="#E552FF" shape=tab style=filled]
		}
		206 [label="if not os.path.isfile(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		207 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		206 -> 207 [label="not os.path.isfile(filename)" color=green]
		208 [label="return send_file(filename, conditional=True, **options)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		206 -> 208 [label="(not not os.path.isfile(filename))" color=red]
		204 -> 206 [label="" color=black]
	}
	subgraph cluster0get_root_path {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_root_path pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		213 [label="\"\"\"Returns the path to a package or cwd if that cannot be found.  This\l    returns the path of a package or the folder that contains a module.\l\l    Not to be confused with the package path returned by :func:`find_package`.\l    \"\"\"\lloader = pkgutil.get_loader(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		213 -> 214 [label=calls style=dashed]
		subgraph cluster_213 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			214 [label="pkgutil.get_loader" color="#E552FF" shape=tab style=filled]
		}
		215 [label="if loader is None or import_name == '__main__':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		216 [label="return os.getcwd()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		215 -> 216 [label="loader is None or import_name == '__main__'" color=green]
		217 [label="if hasattr(loader, 'get_filename'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		217 -> 219 [label=calls style=dashed]
		subgraph cluster_217 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			219 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		220 [label="filepath = loader.get_filename(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		220 -> 224 [label=calls style=dashed]
		subgraph cluster_220 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			224 [label="loader.get_filename" color="#E552FF" shape=tab style=filled]
		}
		221 [label="return os.path.dirname(os.path.abspath(filepath))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		220 -> 221 [label="" color=black]
		217 -> 220 [label="hasattr(loader, 'get_filename')" color=green]
		222 [label="__import__(import_name)\lfilepath = sys.modules[import_name].__file__\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		222 -> 223 [label=calls style=dashed]
		subgraph cluster_222 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			223 [label=__import__ color="#E552FF" shape=tab style=filled]
		}
		222 -> 221 [label="" color=black]
		217 -> 222 [label="(not hasattr(loader, 'get_filename'))" color=red]
		215 -> 217 [label="(not (loader is None or import_name == '__main__'))" color=red]
		213 -> 215 [label="" color=black]
	}
	subgraph cluster0find_package {
		graph [compound=True fontname="DejaVu Sans Mono" label=find_package pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		228 [label="\"\"\"Finds a package and returns the prefix (or None if the package is\l    not installed) as well as the folder that contains the package or\l    module as a tuple.  The package path returned is the module that would\l    have to be added to the pythonpath in order to make it possible to\l    import the module.  The prefix is the path below which a UNIX like\l    folder structure exists (lib, share etc.).\l    \"\"\"\lroot_mod_name = import_name.split('.')[0]\lloader = pkgutil.get_loader(root_mod_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		228 -> 229 [label=calls style=dashed]
		228 -> 230 [label=calls style=dashed]
		subgraph cluster_228 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			229 [label="import_name.split" color="#E552FF" shape=tab style=filled]
			230 [label="pkgutil.get_loader" color="#E552FF" shape=tab style=filled]
		}
		231 [label="if loader is None or import_name == '__main__':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		232 [label="package_path = os.getcwd()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		232 -> 252 [label=calls style=dashed]
		subgraph cluster_232 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			252 [label="os.getcwd" color="#E552FF" shape=tab style=filled]
		}
		233 [label="site_parent, site_folder = os.path.split(package_path)\lpy_prefix = os.path.abspath(sys.prefix)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		233 -> 253 [label=calls style=dashed]
		233 -> 254 [label=calls style=dashed]
		subgraph cluster_233 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			253 [label="os.path.split" color="#E552FF" shape=tab style=filled]
			254 [label="os.path.abspath" color="#E552FF" shape=tab style=filled]
		}
		255 [label="if package_path.startswith(py_prefix):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		255 -> 256 [label=calls style=dashed]
		subgraph cluster_255 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			256 [label="package_path.startswith" color="#E552FF" shape=tab style=filled]
		}
		257 [label="return py_prefix, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		255 -> 257 [label="package_path.startswith(py_prefix)" color=green]
		259 [label="if site_folder.lower() == 'site-packages':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		259 -> 260 [label=calls style=dashed]
		subgraph cluster_259 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			260 [label="site_folder.lower" color="#E552FF" shape=tab style=filled]
		}
		261 [label="parent, folder = os.path.split(site_parent)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		261 -> 263 [label=calls style=dashed]
		subgraph cluster_261 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			263 [label="os.path.split" color="#E552FF" shape=tab style=filled]
		}
		264 [label="if folder.lower() == 'lib':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		264 -> 265 [label=calls style=dashed]
		subgraph cluster_264 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			265 [label="folder.lower" color="#E552FF" shape=tab style=filled]
		}
		266 [label="base_dir = parent\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		267 [label="return base_dir, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		266 -> 267 [label="" color=black]
		264 -> 266 [label="folder.lower() == 'lib'" color=green]
		268 [label="if os.path.basename(parent).lower() == 'lib':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		268 -> 269 [label=calls style=dashed]
		subgraph cluster_268 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			269 [label="os.path.basename.lower" color="#E552FF" shape=tab style=filled]
		}
		270 [label="base_dir = os.path.dirname(parent)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		270 -> 273 [label=calls style=dashed]
		subgraph cluster_270 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			273 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
		}
		270 -> 267 [label="" color=black]
		268 -> 270 [label="os.path.basename(parent).lower() == 'lib'" color=green]
		272 [label="base_dir = site_parent\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		272 -> 267 [label="" color=black]
		268 -> 272 [label="(os.path.basename(parent).lower() != 'lib')" color=red]
		264 -> 268 [label="(folder.lower() != 'lib')" color=red]
		261 -> 264 [label="" color=black]
		259 -> 261 [label="site_folder.lower() == 'site-packages'" color=green]
		258 [label="return None, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		259 -> 258 [label="(site_folder.lower() != 'site-packages')" color=red]
		255 -> 259 [label="(not package_path.startswith(py_prefix))" color=red]
		233 -> 255 [label="" color=black]
		232 -> 233 [label="" color=black]
		231 -> 232 [label="loader is None or import_name == '__main__'" color=green]
		234 [label="if hasattr(loader, 'get_filename'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		234 -> 235 [label=calls style=dashed]
		subgraph cluster_234 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			235 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		236 [label="filename = loader.get_filename(root_mod_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		236 -> 244 [label=calls style=dashed]
		subgraph cluster_236 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			244 [label="loader.get_filename" color="#E552FF" shape=tab style=filled]
		}
		237 [label="package_path = os.path.abspath(os.path.dirname(filename))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		237 -> 245 [label=calls style=dashed]
		subgraph cluster_237 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			245 [label="os.path.abspath" color="#E552FF" shape=tab style=filled]
			246 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
			245 -> 246 [color=black]
		}
		247 [label="if loader.is_package(root_mod_name):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		247 -> 248 [label=calls style=dashed]
		subgraph cluster_247 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			248 [label="loader.is_package" color="#E552FF" shape=tab style=filled]
		}
		249 [label="package_path = os.path.dirname(package_path)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		249 -> 251 [label=calls style=dashed]
		subgraph cluster_249 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			251 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
		}
		249 -> 233 [label="" color=black]
		247 -> 249 [label="loader.is_package(root_mod_name)" color=green]
		247 -> 233 [label="(not loader.is_package(root_mod_name))" color=red]
		237 -> 247 [label="" color=black]
		236 -> 237 [label="" color=black]
		234 -> 236 [label="hasattr(loader, 'get_filename')" color=green]
		238 [label="if hasattr(loader, 'archive'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		238 -> 239 [label=calls style=dashed]
		subgraph cluster_238 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			239 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		240 [label="filename = loader.archive\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		240 -> 237 [label="" color=black]
		238 -> 240 [label="hasattr(loader, 'archive')" color=green]
		242 [label="__import__(import_name)\lfilename = sys.modules[import_name].__file__\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		242 -> 243 [label=calls style=dashed]
		subgraph cluster_242 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			243 [label=__import__ color="#E552FF" shape=tab style=filled]
		}
		242 -> 237 [label="" color=black]
		238 -> 242 [label="(not hasattr(loader, 'archive'))" color=red]
		234 -> 238 [label="(not hasattr(loader, 'get_filename'))" color=red]
		231 -> 234 [label="(not (loader is None or import_name == '__main__'))" color=red]
		228 -> 231 [label="" color=black]
	}
}
