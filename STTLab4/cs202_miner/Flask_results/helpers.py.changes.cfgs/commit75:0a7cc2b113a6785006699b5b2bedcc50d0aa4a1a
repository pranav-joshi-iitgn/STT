digraph "cluster0STTLab4/cs202_miner/Flask_results/helpers.py.changes.cfgs/commit75:0a7cc2b113a6785006699b5b2bedcc50d0aa4a1a" {
	graph [compound=True dpi=50 fontname="DejaVu Sans Mono" label="STTLab4/cs202_miner/Flask_results/helpers.py.changes.cfgs/commit75:0a7cc2b113a6785006699b5b2bedcc50d0aa4a1a" pack=False rankdir=TB ranksep=0.76 ratio=compress]
	node [fontname="DejaVu Sans Mono" fontsize=0.1 height=4 width=4]
	edge [fontname="DejaVu Sans Mono"]
	1 [label="\"\"\"\l    flask.helpers\l    ~~~~~~~~~~~~~\l\l    Implements various helpers.\l\l    :copyright: (c) 2014 by Armin Ronacher.\l    :license: BSD, see LICENSE for more details.\l\"\"\"\limport os\limport sys\limport pkgutil\limport posixpath\limport mimetypes\lfrom time import time\lfrom zlib import adler32\lfrom threading import RLock\lfrom werkzeug.routing import BuildError\lfrom functools import update_wrapper\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	2 [label="from werkzeug.urls import url_quote\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	4 [label="from urlparse import quote as url_quote\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	3 [label="from werkzeug.datastructures import Headers\lfrom werkzeug.exceptions import NotFound\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	5 [label="from werkzeug.wsgi import wrap_file\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
	7 [label="from werkzeug.utils import wrap_file\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	6 [label="from jinja2 import FileSystemLoader\lfrom .signals import message_flashed\lfrom .globals import session, _request_ctx_stack, _app_ctx_stack, current_app, request\lfrom ._compat import string_types, text_type\l_missing = object()\l_os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep] if sep not in\l    (None, '/'))\ldef _endpoint_from_view_func(view_func):...\ldef stream_with_context(generator_or_function):...\ldef make_response(*args):...\ldef url_for(endpoint, **values):...\ldef get_template_attribute(template_name, attribute):...\ldef flash(message, category='message'):...\ldef get_flashed_messages(with_categories=False, category_filter=[]):...\ldef send_file(filename_or_fp, mimetype=None, as_attachment=False,...\ldef safe_join(directory, filename):...\ldef send_from_directory(directory, filename, **options):...\ldef get_root_path(import_name):...\ldef _matching_loader_thinks_module_is_package(loader, mod_name):...\ldef find_package(import_name):...\lclass locked_cached_property(object):\l    \"\"\"A decorator that converts a function into a lazy property.  The\l    function wrapped is called the first time to retrieve the result\l    and then that calculated result is used the next time you access\l    the value.  Works like the one in Werkzeug but has a lock for\l    thread safety.\l    \"\"\"\l\l    def __init__(self, func, name=None, doc=None):\l        self.__name__ = name or func.__name__\l        self.__module__ = func.__module__\l        self.__doc__ = doc or func.__doc__\l        self.func = func\l        self.lock = RLock()\l\l    def __get__(self, obj, type=None):\l        if obj is None:\l            return self\l        with self.lock:\l            value = obj.__dict__.get(self.__name__, _missing)\l            if value is _missing:\l                value = self.func(obj)\l                obj.__dict__[self.__name__] = value\l            return value\lclass _PackageBoundObject(object):\l\l    def __init__(self, import_name, template_folder=None, root_path=None):\l        self.import_name = import_name\l        self.template_folder = template_folder\l        if root_path is None:\l            root_path = get_root_path(self.import_name)\l        self.root_path = root_path\l        self._static_folder = None\l        self._static_url_path = None\l\l    def _get_static_folder(self):\l        if self._static_folder is not None:\l            return os.path.join(self.root_path, self._static_folder)\l\l    def _set_static_folder(self, value):\l        self._static_folder = value\l    static_folder = property(_get_static_folder, _set_static_folder)\l    del _get_static_folder, _set_static_folder\l\l    def _get_static_url_path(self):\l        if self._static_url_path is None:\l            if self.static_folder is None:\l                return None\l            return '/' + os.path.basename(self.static_folder)\l        return self._static_url_path\l\l    def _set_static_url_path(self, value):\l        self._static_url_path = value\l    static_url_path = property(_get_static_url_path, _set_static_url_path)\l    del _get_static_url_path, _set_static_url_path\l\l    @property\l    def has_static_folder(self):\l        \"\"\"This is `True` if th...'s container has a\l        folder named ``'static'``.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        return self.static_folder is not None\l\l    @locked_cached_property\l    def jinja_loader(self):\l        \"\"\"The Jinja loader for this package bound object.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        if self.template_folder is not None:\l            return FileSystemLoader(os.path.join(self.root_path, self.\l                template_folder))\l\l    def get_send_file_max_age(self, filename):\l        \"\"\"Provides default cache_timeout for the :func:`send_file` functions.\l\l        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\l        the configuration of :data:`~flask.current_app`.\l\l        Static file functions such as :func:`send_from_directory` use this\l        function, and :func:`send_file` calls this function on\l        :data:`~flask.current_app` when the given cache_timeout is `None`. If a\l        cache_timeout is given in :func:`send_file`, that timeout is used;\l        otherwise, this method is called.\l\l        This allows subclasses to change the behavior when sending files based\l        on the filename.  For example, to set the cache timeout for .js files\l        to 60 seconds::\l\l            class MyFlask(flask.Flask):\l                def get_send_file_max_age(self, name):\l                    if name.lower().endswith('.js'):\l                        return 60\l                    return flask.Flask.get_send_file_max_age(self, name)\l\l        .. versionadded:: 0.9\l        \"\"\"\l        return current_app.config['SEND_FILE_MAX_AGE_DE...']\l\l    def send_static_file(self, filename):\l        \"\"\"Function used internally to send static files from the static\l        folder to the browser.\l\l        .. versionadded:: 0.5\l        \"\"\"\l        if not self.has_static_folder:\l            raise RuntimeError('No static folder for...')\l        cache_timeout = self.get_send_file_max_age(filename)\l        return send_from_directory(self.static_folder, filename,\l            cache_timeout=cache_timeout)\l\l    def open_resource(self, resource, mode='rb'):\l        \"\"\"Opens a resource fro...'s resource folder.  To see\l        how this works, consider the following folder structure::\l\l            /myapplication.py\l            /schema.sql\l            /static\l                /style.css\l            /templates\l                /layout.html\l                /index.html\l\l        If you want to open the `schema.sql` file you would do the\l        following::\l\l            with app.open_resource('schema.sql') as f:\l                contents = f.read()\l                do_something_with(contents)\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        :param mode: resource file opening mode, default is 'rb'.\l        \"\"\"\l        if mode not in ('r', 'rb'):\l            raise ValueError('Resources can only b...')\l        return open(os.path.join(self.root_path, resource), mode)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	6 -> 8 [label=calls style=dashed]
	6 -> 9 [label=calls style=dashed]
	subgraph cluster_6 {
		graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		8 [label=object color="#E552FF" shape=tab style=filled]
		9 [label=list color="#E552FF" shape=tab style=filled]
	}
	7 -> 6 [label="" color=black]
	5 -> 6 [label="" color=black]
	3 -> 5 [label="" color=black]
	4 -> 3 [label="" color=black]
	2 -> 3 [label="" color=black]
	1 -> 2 [label="" color=black]
	subgraph cluster3locked_cached_property {
		graph [compound=True fontname="DejaVu Sans Mono" label=locked_cached_property pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		348 [label="\"\"\"A decorator that converts a function into a lazy property.  The\l    function wrapped is called the first time to retrieve the result\l    and then that calculated result is used the next time you access\l    the value.  Works like the one in Werkzeug but has a lock for\l    thread safety.\l    \"\"\"\ldef __init__(self, func, name=None, doc=None):...\ldef __get__(self, obj, type=None):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		subgraph cluster6__init__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__init__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			350 [label="self.__name__ = name or func.__name__\lself.__module__ = func.__module__\lself.__doc__ = doc or func.__doc__\lself.func = func\lself.lock = RLock()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			350 -> 351 [label=calls style=dashed]
			subgraph cluster_350 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				351 [label=RLock color="#E552FF" shape=tab style=filled]
			}
		}
		subgraph cluster3__get__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__get__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			354 [label="if obj is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			355 [label="return self\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			354 -> 355 [label="obj is None" color=green]
			356 [label="value = obj.__dict__.get(self.__name__, _missing)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			356 -> 358 [label=calls style=dashed]
			subgraph cluster_356 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				358 [label="obj.__dict__.get" color="#E552FF" shape=tab style=filled]
			}
			359 [label="if value is _missing:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			360 [label="value = self.func(obj)\lobj.__dict__[self.__name__] = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			360 -> 362 [label=calls style=dashed]
			subgraph cluster_360 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				362 [label="self.func" color="#E552FF" shape=tab style=filled]
			}
			361 [label="return value\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			360 -> 361 [label="" color=black]
			359 -> 360 [label="value is _missing" color=green]
			359 -> 361 [label="(value is not _missing)" color=red]
			356 -> 359 [label="" color=black]
			354 -> 356 [label="(obj is not None)" color=red]
		}
	}
	subgraph cluster3_PackageBoundObject {
		graph [compound=True fontname="DejaVu Sans Mono" label=_PackageBoundObject pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		367 [label="def __init__(self, import_name, template_folder=None, root_path=None):...\ldef _get_static_folder(self):...\ldef _set_static_folder(self, value):...\lstatic_folder = property(_get_static_folder, _set_static_folder)\ldef _get_static_url_path(self):...\ldef _set_static_url_path(self, value):...\lstatic_url_path = property(_get_static_url_path, _set_static_url_path)\l@property...\l@locked_cached_property...\ldef get_send_file_max_age(self, filename):...\ldef send_static_file(self, filename):...\ldef open_resource(self, resource, mode='rb'):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		367 -> 384 [label=calls style=dashed]
		367 -> 398 [label=calls style=dashed]
		subgraph cluster_367 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			384 [label=property color="#E552FF" shape=tab style=filled]
			398 [label=property color="#E552FF" shape=tab style=filled]
		}
		subgraph cluster7__init__ {
			graph [compound=True fontname="DejaVu Sans Mono" label=__init__ pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			369 [label="self.import_name = import_name\lself.template_folder = template_folder\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			370 [label="if root_path is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			371 [label="root_path = get_root_path(self.import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			371 -> 373 [label=calls style=dashed]
			subgraph cluster_371 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				373 [label=get_root_path color="#E552FF" shape=tab style=filled]
			}
			372 [label="self.root_path = root_path\lself._static_folder = None\lself._static_url_path = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			371 -> 372 [label="" color=black]
			370 -> 371 [label="root_path is None" color=green]
			370 -> 372 [label="(root_path is not None)" color=red]
			369 -> 370 [label="" color=black]
		}
		subgraph cluster3_get_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			376 [label="if self._static_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			377 [label="return os.path.join(self.root_path, self._static_folder)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			376 -> 377 [label="self._static_folder is not None" color=green]
		}
		subgraph cluster3_set_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			382 [label="self._static_folder = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster3_get_static_url_path {
			graph [compound=True fontname="DejaVu Sans Mono" label=_get_static_url_path pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			386 [label="if self._static_url_path is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			387 [label="if self.static_folder is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			389 [label="return None\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			387 -> 389 [label="self.static_folder is None" color=green]
			390 [label="return '/' + os.path.basename(self.static_folder)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			387 -> 390 [label="(self.static_folder is not None)" color=red]
			386 -> 387 [label="self._static_url_path is None" color=green]
			388 [label="return self._static_url_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			386 -> 388 [label="(self._static_url_path is not None)" color=red]
		}
		subgraph cluster3_set_static_url_path {
			graph [compound=True fontname="DejaVu Sans Mono" label=_set_static_url_path pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			396 [label="self._static_url_path = value\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		}
		subgraph cluster3has_static_folder {
			graph [compound=True fontname="DejaVu Sans Mono" label=has_static_folder pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			400 [label="\"\"\"This is `True` if th...'s container has a\l        folder named ``'static'``.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			401 [label="return self.static_folder is not None\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			400 -> 401 [label="" color=black]
		}
		subgraph cluster3jinja_loader {
			graph [compound=True fontname="DejaVu Sans Mono" label=jinja_loader pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			405 [label="\"\"\"The Jinja loader for this package bound object.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			406 [label="if self.template_folder is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			407 [label="return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			406 -> 407 [label="self.template_folder is not None" color=green]
			405 -> 406 [label="" color=black]
		}
		subgraph cluster1get_send_file_max_age {
			graph [compound=True fontname="DejaVu Sans Mono" label=get_send_file_max_age pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			412 [label="\"\"\"Provides default cache_timeout for the :func:`send_file` functions.\l\l        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\l        the configuration of :data:`~flask.current_app`.\l\l        Static file functions such as :func:`send_from_directory` use this\l        function, and :func:`send_file` calls this function on\l        :data:`~flask.current_app` when the given cache_timeout is `None`. If a\l        cache_timeout is given in :func:`send_file`, that timeout is used;\l        otherwise, this method is called.\l\l        This allows subclasses to change the behavior when sending files based\l        on the filename.  For example, to set the cache timeout for .js files\l        to 60 seconds::\l\l            class MyFlask(flask.Flask):\l                def get_send_file_max_age(self, name):\l                    if name.lower().endswith('.js'):\l                        return 60\l                    return flask.Flask.get_send_file_max_age(self, name)\l\l        .. versionadded:: 0.9\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			413 [label="return current_app.config['SEND_FILE_MAX_AGE_DE...']\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			412 -> 413 [label="" color=black]
		}
		subgraph cluster3send_static_file {
			graph [compound=True fontname="DejaVu Sans Mono" label=send_static_file pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			417 [label="\"\"\"Function used internally to send static files from the static\l        folder to the browser.\l\l        .. versionadded:: 0.5\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			418 [label="if not self.has_static_folder:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			419 [label="raise RuntimeError('No static folder for...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			418 -> 419 [label="not self.has_static_folder" color=green]
			420 [label="cache_timeout = self.get_send_file_max_age(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			420 -> 422 [label=calls style=dashed]
			subgraph cluster_420 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				422 [label="self.get_send_file_max_age" color="#E552FF" shape=tab style=filled]
			}
			423 [label="return send_from_directory(self.static_folder, filename, cache_timeout=\l    cache_timeout)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			420 -> 423 [label="" color=black]
			418 -> 420 [label="(not not self.has_static_folder)" color=red]
			417 -> 418 [label="" color=black]
		}
		subgraph cluster3open_resource {
			graph [compound=True fontname="DejaVu Sans Mono" label=open_resource pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			427 [label="\"\"\"Opens a resource fro...'s resource folder.  To see\l        how this works, consider the following folder structure::\l\l            /myapplication.py\l            /schema.sql\l            /static\l                /style.css\l            /templates\l                /layout.html\l                /index.html\l\l        If you want to open the `schema.sql` file you would do the\l        following::\l\l            with app.open_resource('schema.sql') as f:\l                contents = f.read()\l                do_something_with(contents)\l\l        :param resource: the name of the resource.  To access resources within\l                         subfolders use forward slashes as separator.\l        :param mode: resource file opening mode, default is 'rb'.\l        \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			428 [label="if mode not in ('r', 'rb'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			429 [label="raise ValueError('Resources can only b...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			428 -> 429 [label="mode not in ('r', 'rb')" color=green]
			430 [label="return open(os.path.join(self.root_path, resource), mode)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			428 -> 430 [label="(mode in ('r', 'rb'))" color=red]
			427 -> 428 [label="" color=black]
		}
	}
	subgraph cluster3_endpoint_from_view_func {
		graph [compound=True fontname="DejaVu Sans Mono" label=_endpoint_from_view_func pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		11 [label="\"\"\"Internal helper that returns the default endpoint for a given\l    function.  This always is the function name.\l    \"\"\"\lassert view_func is not None, 'expected view func i...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		13 [label="return view_func.__name__\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		11 -> 13 [label="view_func is not None" color=black]
	}
	subgraph cluster1stream_with_context {
		graph [compound=True fontname="DejaVu Sans Mono" label=stream_with_context pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		17 [label="\"\"\"Request contexts disappear when the response is started on the server.\l    This is done for efficiency reasons and to make it less likely to encounter\l    memory leaks with badly written WSGI middlewares.  The downside is that if\l    you are using streamed responses, the generator cannot access request bound\l    information any more.\l\l    This function however can help you keep the context around for longer::\l\l        from flask import stream_with_context, request, Response\l\l        @app.route('/stream')\l        def streamed_response():\l            @stream_with_context\l            def generate():\l                yield 'Hello '\l                yield request.args['name']\l                yield '!'\l            return Response(generate())\l\l    Alternatively it can also be used around a specific generator::\l\l        from flask import stream_with_context, request, Response\l\l        @app.route('/stream')\l        def streamed_response():\l            def generate():\l                yield 'Hello '\l                yield request.args['name']\l                yield '!'\l            return Response(stream_with_context(generate()))\l\l    .. versionadded:: 0.9\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		18 [label="gen = iter(generator_or_function)\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		20 [label="def decorator(*args, **kwargs):...\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		27 [label="return update_wrapper(decorator, generator_or_function)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		20 -> 27 [label="" color=black]
		18 -> 29 [label=calls style=dashed]
		subgraph cluster_18 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			29 [label=iter color="#E552FF" shape=tab style=filled]
		}
		19 [label="def generator():...\lwrapped_g = generator()\lnext(wrapped_g)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		19 -> 49 [label=calls style=dashed]
		19 -> 50 [label=calls style=dashed]
		subgraph cluster_19 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			49 [label=generator color="#E552FF" shape=tab style=filled]
			50 [label=next color="#E552FF" shape=tab style=filled]
		}
		51 [label="return wrapped_g\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		19 -> 51 [label="" color=black]
		18 -> 19 [label="" color=black]
		17 -> 18 [label="" color=black]
		subgraph cluster1decorator {
			graph [compound=True fontname="DejaVu Sans Mono" label=decorator pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			22 [label="gen = generator_or_function()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			22 -> 23 [label=calls style=dashed]
			subgraph cluster_22 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				23 [label=generator_or_function color="#E552FF" shape=tab style=filled]
			}
			24 [label="return stream_with_context(gen)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
			22 -> 24 [label="" color=black]
		}
		subgraph cluster1generator {
			graph [compound=True fontname="DejaVu Sans Mono" label=generator pack=False rankdir=TB ranksep=0.02]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			31 [label="ctx = _request_ctx_stack.top\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			32 [label="if ctx is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			33 [label="raise RuntimeError(\l    'Attempted to stream ...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
			32 -> 33 [label="ctx is None" color=green]
			34 [label="yield None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			37 [label="try:\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
			39 [label="for item in gen:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
			40 [label="yield item\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			40 -> 39 [label="" color=black]
			39 -> 40 [label=gen color=green]
			38 [label="if hasattr(gen, 'close'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
			38 -> 43 [label=calls style=dashed]
			subgraph cluster_38 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				43 [label=hasattr color="#E552FF" shape=tab style=filled]
			}
			44 [label="gen.close()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
			44 -> 46 [label=calls style=dashed]
			subgraph cluster_44 {
				graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
				node [fontname="DejaVu Sans Mono"]
				edge [fontname="DejaVu Sans Mono"]
				46 [label="gen.close" color="#E552FF" shape=tab style=filled]
			}
			38 -> 44 [label="hasattr(gen, 'close')" color=green]
			39 -> 38 [label="" color=green]
			37 -> 39 [label="" color=black]
			34 -> 37 [label="" color=black]
			32 -> 34 [label="(ctx is not None)" color=red]
			31 -> 32 [label="" color=black]
		}
	}
	subgraph cluster3make_response {
		graph [compound=True fontname="DejaVu Sans Mono" label=make_response pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		55 [label="\"\"\"Sometimes it is necessary to set additional headers in a view.  Because\l    views do not have to return response objects but can return a value that\l    is converted into a response object by Flask itself, it becomes tricky to\l    add headers to it.  This function can be called instead of using a return\l    and you will get a response object which you can use to attach headers.\l\l    If view looked like this and you want to add a new header::\l\l        def index():\l            return render_template('index.html', foo=42)\l\l    You can now do something like this::\l\l        def index():\l            response = make_response(render_template('index.html', foo=42))\l            response.headers['X-Parachutes'] = 'parachutes are cool'\l            return response\l\l    This function accepts the very same arguments you can return from a\l    view function.  This for example creates a response with a 404 error\l    code::\l\l        response = make_response(render_template('not_found.html'), 404)\l\l    The other use case of this function is to force the return value of a\l    view function into a response which is helpful with view\l    decorators::\l\l        response = make_response(view_function())\l        response.headers['X-Parachutes'] = 'parachutes are cool'\l\l    Internally this function does the following things:\l\l    -   if no arguments are passed, it creates a new response argument\l    -   if one argument is passed, :meth:`flask.Flask.make_response`\l        is invoked with it.\l    -   if more than one argument is passed, the arguments are passed\l        to the :meth:`flask.Flask.make_response` function as tuple.\l\l    .. versionadded:: 0.6\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		56 [label="if not args:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		57 [label="return current_app.response_class()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		56 -> 57 [label="not args" color=green]
		58 [label="if len(args) == 1:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		58 -> 60 [label=calls style=dashed]
		subgraph cluster_58 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			60 [label=len color="#E552FF" shape=tab style=filled]
		}
		61 [label="args = args[0]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		62 [label="return current_app.make_response(args)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		61 -> 62 [label="" color=black]
		58 -> 61 [label="len(args) == 1" color=green]
		58 -> 62 [label="(len(args) != 1)" color=red]
		56 -> 58 [label="(not not args)" color=red]
		55 -> 56 [label="" color=black]
	}
	subgraph cluster3url_for {
		graph [compound=True fontname="DejaVu Sans Mono" label=url_for pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		66 [label="\"\"\"Generates a URL to the given endpoint with the method provided.\l\l    Variable arguments that are unknown to the target endpoint are appended\l    to the generated URL as query arguments.  If the value of a query argument\l    is `None`, the whole pair is skipped.  In case blueprints are active\l    you can shortcut references to the same blueprint by prefixing the\l    local endpoint with a dot (``.``).\l\l    This will reference the index function local to the current blueprint::\l\l        url_for('.index')\l\l    For more information, head over to the :ref:`Quickstart <url-building>`.\l\l    To integrate applications, :class:`Flask` has a hook to intercept URL build\l    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\l    function results in a :exc:`~werkzeug.routing.BuildError` when the current\l    app does not have a URL for the given endpoint and values.  When it does, the\l    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\l    it is not `None`, which can return a string to use as the result of\l    `url_for` (instead of `url_for`'s default to raise the\l    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\l    An example::\l\l        def external_url_handler(error, endpoint, values):\l            \"Looks up an external...\"\l            # This is an example of hooking the build_error_handler.\l            # Here, lookup_url is some utility function you've built\l            # which looks up the endpoint in some external URL registry.\l            url = lookup_url(endpoint, **values)\l            if url is None:\l                # External lookup did not have a URL.\l                # Re-raise the BuildError, in context of original traceback.\l                exc_type, exc_value, tb = sys.exc_info()\l                if exc_value is error:\l                    raise exc_type, exc_value, tb\l                else:\l                    raise error\l            # url_for will use this result, instead of raising BuildError.\l            return url\l\l        app.url_build_error_handlers.append(external_url_handler)\l\l    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\l    `endpoint` and `values` are the arguments passed into `url_for`.  Note\l    that this is for building URLs outside the current application, and not for\l    handling 404 NotFound errors.\l\l    .. versionadded:: 0.10\l       The `_scheme` parameter was added.\l\l    .. versionadded:: 0.9\l       The `_anchor` and `_method` parameters were added.\l\l    .. versionadded:: 0.9\l       Calls :meth:`Flask.handle_build_error` on\l       :exc:`~werkzeug.routing.BuildError`.\l\l    :param endpoint: the endpoint of the URL (name of the function)\l    :param values: the variable arguments of the URL rule\l    :param _external: if set to `True`, an absolute URL is generated. Server\l      address can be changed via `SERVER_NAME` configuration variable which\l      defaults to `localhost`.\l    :param _scheme: a string specifying the desired URL scheme. The `_external`\l      parameter must be set to `True` or a `ValueError` is raised. The default\l      behavior uses the same scheme as the current request, or\l      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\l      request context is available. As of Werkzeug 0.10, this also can be set\l      to an empty string to build protocol-relative URLs.\l    :param _anchor: if provided this is added as anchor to the URL.\l    :param _method: if provided this explicitly specifies an HTTP method.\l    \"\"\"\lappctx = _app_ctx_stack.top\lreqctx = _request_ctx_stack.top\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		67 [label="if appctx is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		68 [label="raise RuntimeError(\l    'Attempted to generat...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		67 -> 68 [label="appctx is None" color=green]
		69 [label="if reqctx is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		71 [label="url_adapter = reqctx.url_adapter\lblueprint_name = request.blueprint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		79 [label="if not reqctx.request._is_old_module:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		80 [label="if endpoint[:1] == '.':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		91 [label="if blueprint_name is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		93 [label="endpoint = blueprint_name + endpoint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		81 [label="external = values.pop('_external', False)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		81 -> 96 [label=calls style=dashed]
		subgraph cluster_81 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			96 [label="values.pop" color="#E552FF" shape=tab style=filled]
		}
		72 [label="anchor = values.pop('_anchor', None)\lmethod = values.pop('_method', None)\lscheme = values.pop('_scheme', None)\lappctx.app.inject_url_defaults(endpoint, values)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		72 -> 97 [label=calls style=dashed]
		72 -> 98 [label=calls style=dashed]
		72 -> 99 [label=calls style=dashed]
		72 -> 100 [label=calls style=dashed]
		subgraph cluster_72 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			97 [label="values.pop" color="#E552FF" shape=tab style=filled]
			98 [label="values.pop" color="#E552FF" shape=tab style=filled]
			99 [label="values.pop" color="#E552FF" shape=tab style=filled]
			100 [label="appctx.app.inject_url_defaults" color="#E552FF" shape=tab style=filled]
		}
		101 [label="if scheme is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		102 [label="if not external:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		104 [label="raise ValueError('When specifying _sch...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		102 -> 104 [label="not external" color=green]
		105 [label="url_adapter.url_scheme = scheme\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		107 [label="rv = url_adapter.build(endpoint, values, method=method, force_external=external\l    )\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		109 [label="values['_external'] = external\lvalues['_anchor'] = anchor\lvalues['_method'] = method\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		110 [label="return appctx.app.handle_url_build_error(error, endpoint, values)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		109 -> 110 [label="" color=black]
		107 -> 112 [label=calls style=dashed]
		subgraph cluster_107 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			112 [label="url_adapter.build" color="#E552FF" shape=tab style=filled]
		}
		108 [label="if anchor is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		113 [label="rv += '#' + url_quote(anchor)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		113 -> 115 [label=calls style=dashed]
		subgraph cluster_113 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			115 [label=url_quote color="#E552FF" shape=tab style=filled]
		}
		114 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		113 -> 114 [label="" color=black]
		108 -> 113 [label="anchor is not None" color=green]
		108 -> 114 [label="(anchor is None)" color=red]
		107 -> 108 [label="" color=black]
		105 -> 107 [label="" color=black]
		102 -> 105 [label="(not not external)" color=red]
		101 -> 102 [label="scheme is not None" color=green]
		101 -> 107 [label="(scheme is None)" color=red]
		72 -> 101 [label="" color=black]
		81 -> 72 [label="" color=black]
		93 -> 81 [label="" color=black]
		91 -> 93 [label="blueprint_name is not None" color=green]
		95 [label="endpoint = endpoint[1:]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		95 -> 81 [label="" color=black]
		91 -> 95 [label="(blueprint_name is None)" color=red]
		80 -> 91 [label="endpoint[:1] == '.'" color=green]
		80 -> 81 [label="(endpoint[:1] != '.')" color=red]
		79 -> 80 [label="not reqctx.request._is_old_module" color=green]
		82 [label="if '.' not in endpoint:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		83 [label="if blueprint_name is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		89 [label="endpoint = blueprint_name + '.' + endpoint\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		89 -> 81 [label="" color=black]
		83 -> 89 [label="blueprint_name is not None" color=green]
		83 -> 81 [label="(blueprint_name is None)" color=red]
		82 -> 83 [label="'.' not in endpoint" color=green]
		85 [label="if endpoint.startswith('.'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		85 -> 86 [label=calls style=dashed]
		subgraph cluster_85 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			86 [label="endpoint.startswith" color="#E552FF" shape=tab style=filled]
		}
		87 [label="endpoint = endpoint[1:]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		87 -> 81 [label="" color=black]
		85 -> 87 [label="endpoint.startswith('.')" color=green]
		85 -> 81 [label="(not endpoint.startswith('.'))" color=red]
		82 -> 85 [label="('.' in endpoint)" color=red]
		79 -> 82 [label="(not not reqctx.request._is_old_module)" color=red]
		71 -> 79 [label="" color=black]
		69 -> 71 [label="reqctx is not None" color=green]
		73 [label="url_adapter = appctx.url_adapter\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		74 [label="if url_adapter is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		75 [label="raise RuntimeError(\l    'Application was not ...'\l    )\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		74 -> 75 [label="url_adapter is None" color=green]
		76 [label="external = values.pop('_external', True)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		76 -> 78 [label=calls style=dashed]
		subgraph cluster_76 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			78 [label="values.pop" color="#E552FF" shape=tab style=filled]
		}
		76 -> 72 [label="" color=black]
		74 -> 76 [label="(url_adapter is not None)" color=red]
		73 -> 74 [label="" color=black]
		69 -> 73 [label="(reqctx is None)" color=red]
		67 -> 69 [label="(appctx is not None)" color=red]
		66 -> 67 [label="" color=black]
	}
	subgraph cluster3get_template_attribute {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_template_attribute pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		119 [label="\"\"\"Loads a macro (or variable) a template exports.  This can be used to\l    invoke a macro from within Python code.  If you for example have a\l    template named `_cider.html` with the following contents:\l\l    .. sourcecode:: html+jinja\l\l       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\l\l    You can access this from Python code like this::\l\l        hello = get_template_attribute('_cider.html', 'hello')\l        return hello('World')\l\l    .. versionadded:: 0.2\l\l    :param template_name: the name of the template\l    :param attribute: the name of the variable of macro to access\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		120 [label="return getattr(current_app.jinja_env.get_template(template_name).module,\l    attribute)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		119 -> 120 [label="" color=black]
	}
	subgraph cluster3flash {
		graph [compound=True fontname="DejaVu Sans Mono" label=flash pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		124 [label="\"\"\"Flashes a message to the next request.  In order to remove the\l    flashed message from the session and to display it to the user,\l    the template has to call :func:`get_flashed_messages`.\l\l    .. versionchanged:: 0.3\l       `category` parameter added.\l\l    :param message: the message to be flashed.\l    :param category: the category for the message.  The following values\l                     are recommended: ``'message'`` for any kind of message,\l                     ``'error'`` for errors, ``'info'`` for information\l                     messages and ``'warning'`` for warnings.  However any\l                     kind of string can be used as category.\l    \"\"\"\lflashes = session.get('_flashes', [])\lflashes.append((category, message))\lsession['_flashes'] = flashes\lmessage_flashed.send(current_app._get_current_object(), message=message,\l    category=category)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		124 -> 125 [label=calls style=dashed]
		124 -> 126 [label=calls style=dashed]
		124 -> 127 [label=calls style=dashed]
		subgraph cluster_124 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			125 [label="session.get" color="#E552FF" shape=tab style=filled]
			126 [label="flashes.append" color="#E552FF" shape=tab style=filled]
			127 [label="message_flashed.send" color="#E552FF" shape=tab style=filled]
			128 [label="current_app._get_current_object" color="#E552FF" shape=tab style=filled]
			127 -> 128 [color=black]
		}
	}
	subgraph cluster3get_flashed_messages {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_flashed_messages pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		131 [label="\"\"\"Pulls all flashed messages from the session and returns them.\l    Further calls in the same request to the function will return\l    the same messages.  By default just the messages are returned,\l    but when `with_categories` is set to `True`, the return value will\l    be a list of tuples in the form ``(category, message)`` instead.\l\l    Filter the flashed messages to one or more categories by providing those\l    categories in `category_filter`.  This allows rendering categories in\l    separate html blocks.  The `with_categories` and `category_filter`\l    arguments are distinct:\l\l    * `with_categories` controls whether categories are returned with message\l      text (`True` gives a tuple, where `False` gives just the message text).\l    * `category_filter` filters the messages down to only those matching the\l      provided categories.\l\l    See :ref:`message-flashing-pattern` for examples.\l\l    .. versionchanged:: 0.3\l       `with_categories` parameter added.\l\l    .. versionchanged:: 0.9\l        `category_filter` parameter added.\l\l    :param with_categories: set to `True` to also receive categories.\l    :param category_filter: whitelist of categories to limit return values\l    \"\"\"\lflashes = _request_ctx_stack.top.flashes\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		132 [label="if flashes is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		133 [label="_request_ctx_stack.top.flashes = flashes = session.pop('_flashes'\l    ) if '_flashes' in session else []\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		133 -> 135 [label=calls style=dashed]
		subgraph cluster_133 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			135 [label="session.pop" color="#E552FF" shape=tab style=filled]
		}
		134 [label="if category_filter:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		136 [label="flashes = list(filter(lambda f: f[0] in category_filter, flashes))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		136 -> 138 [label=calls style=dashed]
		subgraph cluster_136 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			138 [label=list color="#E552FF" shape=tab style=filled]
			139 [label=filter color="#E552FF" shape=tab style=filled]
			138 -> 139 [color=black]
		}
		137 [label="if not with_categories:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		140 [label="return [x[1] for x in flashes]\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		137 -> 140 [label="not with_categories" color=green]
		141 [label="return flashes\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		137 -> 141 [label="(not not with_categories)" color=red]
		136 -> 137 [label="" color=black]
		134 -> 136 [label=category_filter color=green]
		134 -> 137 [label="(not category_filter)" color=red]
		133 -> 134 [label="" color=black]
		132 -> 133 [label="flashes is None" color=green]
		132 -> 134 [label="(flashes is not None)" color=red]
		131 -> 132 [label="" color=black]
	}
	subgraph cluster3send_file {
		graph [compound=True fontname="DejaVu Sans Mono" label=send_file pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		146 [label="\"\"\"Sends the contents of a file to the client.  This will use the\l    most efficient method available and configured.  By default it will\l    try to use the WSGI server's file_wrapper support.  Alternatively\l    you can set the application's :attr:`~Flask.use_x_sendfile` attribute\l    to ``True`` to directly emit an `X-Sendfile` header.  This however\l    requires support of the underlying webserver for `X-Sendfile`.\l\l    By default it will try to guess the mimetype for you, but you can\l    also explicitly provide one.  For extra security you probably want\l    to send certain files as attachment (HTML for instance).  The mimetype\l    guessing requires a `filename` or an `attachment_filename` to be\l    provided.\l\l    Please never pass filenames to this function from user sources without\l    checking them first.  Something like this is usually sufficient to\l    avoid security problems::\l\l        if '..' in filename or file...'/'):\l            abort(404)\l\l    .. versionadded:: 0.2\l\l    .. versionadded:: 0.5\l       The `add_etags`, `cache_timeout` and `conditional` parameters were\l       added.  The default behavior is now to attach etags.\l\l    .. versionchanged:: 0.7\l       mimetype guessing and etag support for file objects was\l       deprecated because it was unreliable.  Pass a filename if you are\l       able to, otherwise attach an etag yourself.  This functionality\l       will be removed in Flask 1.0\l\l    .. versionchanged:: 0.9\l       cache_timeout pulls its default from application config, when None.\l\l    :param filename_or_fp: the filename of the file to send.  This is\l                           relative to the :attr:`~Flask.root_path` if a\l                           relative path is specified.\l                           Alternatively a file object might be provided\l                           in which case `X-Sendfile` might not work and\l                           fall back to the traditional method.  Make sure\l                           that the file pointer is positioned at the start\l                           of data to send before calling :func:`send_file`.\l    :param mimetype: the mimetype of the file if provided, otherwise\l                     auto detection happens.\l    :param as_attachment: set to `True` if you want to send this file with\l                          a ``Content-Disposition: attachment`` header.\l    :param attachment_filename: the filename for the attachment if it\l                                differs from the file's filename.\l    :param add_etags: set to `False` to disable attaching of etags.\l    :param conditional: set to `True` to enable conditional responses.\l\l    :param cache_timeout: the timeout in seconds for the headers. When `None`\l                          (default), this value is set by\l                          :meth:`~Flask.get_send_file_max_age` of\l                          :data:`~flask.current_app`.\l    \"\"\"\lmtime = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		147 [label="if isinstance(filename_or_fp, string_types):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		147 -> 148 [label=calls style=dashed]
		subgraph cluster_147 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			148 [label=isinstance color="#E552FF" shape=tab style=filled]
		}
		149 [label="filename = filename_or_fp\lfile = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		150 [label="if filename is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		162 [label="if not os.path.isabs(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		164 [label="filename = os.path.join(current_app.root_path, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		164 -> 166 [label=calls style=dashed]
		subgraph cluster_164 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			166 [label="os.path.join" color="#E552FF" shape=tab style=filled]
		}
		163 [label="if mimetype is None and (filename or attachment_filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		167 [label="mimetype = mimetypes.guess_type(filename or attachment_filename)[0]\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		167 -> 169 [label=calls style=dashed]
		subgraph cluster_167 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			169 [label="mimetypes.guess_type" color="#E552FF" shape=tab style=filled]
		}
		168 [label="if mimetype is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		170 [label="mimetype = 'application/octet-st...'\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		171 [label="headers = Headers()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		171 -> 172 [label=calls style=dashed]
		subgraph cluster_171 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			172 [label=Headers color="#E552FF" shape=tab style=filled]
		}
		173 [label="if as_attachment:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		174 [label="if attachment_filename is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		176 [label="if filename is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		178 [label="raise TypeError('filename unavailable...')\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		176 -> 178 [label="filename is None" color=green]
		179 [label="attachment_filename = os.path.basename(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		179 -> 181 [label=calls style=dashed]
		subgraph cluster_179 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			181 [label="os.path.basename" color="#E552FF" shape=tab style=filled]
		}
		177 [label="headers.add('Content-Disposition', 'attachment', filename=attachment_filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		177 -> 182 [label=calls style=dashed]
		subgraph cluster_177 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			182 [label="headers.add" color="#E552FF" shape=tab style=filled]
		}
		175 [label="if current_app.use_x_sendfile and filename:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		183 [label="if file is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		192 [label="file.close()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		192 -> 194 [label=calls style=dashed]
		subgraph cluster_192 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			194 [label="file.close" color="#E552FF" shape=tab style=filled]
		}
		193 [label="headers['X-Sendfile'] = filename\lheaders['Content-Length'] = os.path.getsize(filename)\ldata = None\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		193 -> 195 [label=calls style=dashed]
		subgraph cluster_193 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			195 [label="os.path.getsize" color="#E552FF" shape=tab style=filled]
		}
		184 [label="rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\l    direct_passthrough=True)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		184 -> 196 [label=calls style=dashed]
		subgraph cluster_184 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			196 [label="current_app.response_class" color="#E552FF" shape=tab style=filled]
		}
		197 [label="if mtime is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		198 [label="rv.last_modified = int(mtime)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		198 -> 200 [label=calls style=dashed]
		subgraph cluster_198 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			200 [label=int color="#E552FF" shape=tab style=filled]
		}
		199 [label="rv.cache_control.public = True\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		201 [label="if cache_timeout is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		202 [label="cache_timeout = current_app.get_send_file_max_age(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		202 -> 204 [label=calls style=dashed]
		subgraph cluster_202 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			204 [label="current_app.get_send_file_max_age" color="#E552FF" shape=tab style=filled]
		}
		203 [label="if cache_timeout is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		205 [label="rv.cache_control.max_age = cache_timeout\lrv.expires = int(time() + cache_timeout)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		205 -> 207 [label=calls style=dashed]
		subgraph cluster_205 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			207 [label=int color="#E552FF" shape=tab style=filled]
			208 [label=time color="#E552FF" shape=tab style=filled]
			207 -> 208 [color=black]
		}
		206 [label="if add_etags and filename is not None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		210 [label="return rv\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		206 -> 210 [label="(not (add_etags and filename is not None))" color=red]
		211 [label="rv.set_etag('flask-%s-%s-%s' % (os.path.getmtime(filename), os.path.getsize\l    (filename), adler32(filename.encode('utf-8') if isinstance(filename,\l    text_type) else filename) & 4294967295))\l" fillcolor=orange shape=Mdiamond style="filled,solid"]
		213 [label="warn(\l    'Access %s failed, ma...' %\l    filename, stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		213 -> 214 [label=calls style=dashed]
		subgraph cluster_213 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			214 [label=warn color="#E552FF" shape=tab style=filled]
		}
		212 [label="if conditional:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		221 [label="rv = rv.make_conditional(request)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		221 -> 223 [label=calls style=dashed]
		subgraph cluster_221 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			223 [label="rv.make_conditional" color="#E552FF" shape=tab style=filled]
		}
		224 [label="if rv.status_code == 304:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		225 [label="rv.headers.pop('x-sendfile', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		225 -> 227 [label=calls style=dashed]
		subgraph cluster_225 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			227 [label="rv.headers.pop" color="#E552FF" shape=tab style=filled]
		}
		225 -> 210 [label="" color=black]
		224 -> 225 [label="rv.status_code == 304" color=green]
		224 -> 210 [label="(rv.status_code != 304)" color=red]
		221 -> 224 [label="" color=black]
		212 -> 221 [label=conditional color=green]
		212 -> 210 [label="(not conditional)" color=red]
		213 -> 212 [label="" color=black]
		211 -> 215 [label=calls style=dashed]
		subgraph cluster_211 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			215 [label="rv.set_etag" color="#E552FF" shape=tab style=filled]
			216 [label="os.path.getmtime" color="#E552FF" shape=tab style=filled]
			215 -> 216 [color=black]
			217 [label="os.path.getsize" color="#E552FF" shape=tab style=filled]
			215 -> 217 [color=black]
			218 [label=adler32 color="#E552FF" shape=tab style=filled]
			215 -> 218 [color=black]
			219 [label=isinstance color="#E552FF" shape=tab style=filled]
			218 -> 219 [color=black]
			220 [label="filename.encode" color="#E552FF" shape=tab style=filled]
			218 -> 220 [color=black]
		}
		211 -> 212 [label="" color=black]
		206 -> 211 [label="add_etags and filename is not None" color=green]
		205 -> 206 [label="" color=black]
		203 -> 205 [label="cache_timeout is not None" color=green]
		203 -> 206 [label="(cache_timeout is None)" color=red]
		202 -> 203 [label="" color=black]
		201 -> 202 [label="cache_timeout is None" color=green]
		201 -> 203 [label="(cache_timeout is not None)" color=red]
		199 -> 201 [label="" color=black]
		198 -> 199 [label="" color=black]
		197 -> 198 [label="mtime is not None" color=green]
		197 -> 199 [label="(mtime is None)" color=red]
		184 -> 197 [label="" color=black]
		193 -> 184 [label="" color=black]
		192 -> 193 [label="" color=black]
		183 -> 192 [label="file is not None" color=green]
		183 -> 193 [label="(file is None)" color=red]
		175 -> 183 [label="current_app.use_x_sendfile and filename" color=green]
		185 [label="if file is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		186 [label="file = open(filename, 'rb')\lmtime = os.path.getmtime(filename)\lheaders['Content-Length'] = os.path.getsize(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		186 -> 188 [label=calls style=dashed]
		186 -> 189 [label=calls style=dashed]
		186 -> 190 [label=calls style=dashed]
		subgraph cluster_186 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			188 [label=open color="#E552FF" shape=tab style=filled]
			189 [label="os.path.getmtime" color="#E552FF" shape=tab style=filled]
			190 [label="os.path.getsize" color="#E552FF" shape=tab style=filled]
		}
		187 [label="data = wrap_file(request.environ, file)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		187 -> 191 [label=calls style=dashed]
		subgraph cluster_187 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			191 [label=wrap_file color="#E552FF" shape=tab style=filled]
		}
		187 -> 184 [label="" color=black]
		186 -> 187 [label="" color=black]
		185 -> 186 [label="file is None" color=green]
		185 -> 187 [label="(file is not None)" color=red]
		175 -> 185 [label="(not (current_app.use_x_sendfile and filename))" color=red]
		177 -> 175 [label="" color=black]
		179 -> 177 [label="" color=black]
		176 -> 179 [label="(filename is not None)" color=red]
		174 -> 176 [label="attachment_filename is None" color=green]
		174 -> 177 [label="(attachment_filename is not None)" color=red]
		173 -> 174 [label=as_attachment color=green]
		173 -> 175 [label="(not as_attachment)" color=red]
		171 -> 173 [label="" color=black]
		170 -> 171 [label="" color=black]
		168 -> 170 [label="mimetype is None" color=green]
		168 -> 171 [label="(mimetype is not None)" color=red]
		167 -> 168 [label="" color=black]
		163 -> 167 [label="mimetype is None and (filename or attachment_filename)" color=green]
		163 -> 168 [label="(not (mimetype is None and (filename or attachment_filename)))" color=red]
		164 -> 163 [label="" color=black]
		162 -> 164 [label="not os.path.isabs(filename)" color=green]
		162 -> 163 [label="(not not os.path.isabs(filename))" color=red]
		150 -> 162 [label="filename is not None" color=green]
		150 -> 163 [label="(filename is None)" color=red]
		149 -> 150 [label="" color=black]
		147 -> 149 [label="isinstance(filename_or_fp, string_types)" color=green]
		151 [label="from warnings import warn\lfile = filename_or_fp\lfilename = getattr(file, 'name', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		151 -> 152 [label=calls style=dashed]
		subgraph cluster_151 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			152 [label=getattr color="#E552FF" shape=tab style=filled]
		}
		153 [label="if not attachment_filename and not mimetype and isinstance(filename,\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		154 [label="warn(DeprecationWarning(\l    'The filename support...'\l    ), stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		154 -> 156 [label=calls style=dashed]
		subgraph cluster_154 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			156 [label=warn color="#E552FF" shape=tab style=filled]
			157 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
			156 -> 157 [color=black]
		}
		155 [label="if add_etags:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		158 [label="warn(DeprecationWarning(\l    'In future flask rele...'\l    ), stacklevel=2)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		158 -> 160 [label=calls style=dashed]
		subgraph cluster_158 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			160 [label=warn color="#E552FF" shape=tab style=filled]
			161 [label=DeprecationWarning color="#E552FF" shape=tab style=filled]
			160 -> 161 [color=black]
		}
		158 -> 150 [label="" color=black]
		155 -> 158 [label=add_etags color=green]
		155 -> 150 [label="(not add_etags)" color=red]
		154 -> 155 [label="" color=black]
		153 -> 154 [label="not attachment_filename and not mimetype and isinstance(filename, string_types)" color=red]
		153 -> 155 [label="(not (not attachment_filename and not mimetype and isinstance(filename,
    string_types)))" color=red]
		151 -> 153 [label="" color=black]
		147 -> 151 [label="(not isinstance(filename_or_fp, string_types))" color=red]
		146 -> 147 [label="" color=black]
	}
	subgraph cluster3safe_join {
		graph [compound=True fontname="DejaVu Sans Mono" label=safe_join pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		231 [label="\"\"\"Safely join `directory` and `filename`.\l\l    Example usage::\l\l        @app.route('/wiki/<path:filename...')\l        def wiki_page(filename):\l            filename = safe_join(app.config['WIKI_FOLDER'], filename)\l            with open(filename, 'rb') as fd:\l                content = fd.read() # Read and process the file content...\l\l    :param directory: the base directory.\l    :param filename: the untrusted filename relative to that directory.\l    :raises: :class:`~werkzeug.exceptions.NotFound` if the resulting path\l             would fall out of `directory`.\l    \"\"\"\lfilename = posixpath.normpath(filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		231 -> 232 [label=calls style=dashed]
		subgraph cluster_231 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			232 [label="posixpath.normpath" color="#E552FF" shape=tab style=filled]
		}
		233 [label="for sep in _os_alt_seps:\l" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
		234 [label="if sep in filename:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		236 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		234 -> 236 [label="sep in filename" color=green]
		234 -> 233 [label="(sep not in filename)" color=red]
		233 -> 234 [label=_os_alt_seps color=green]
		235 [label="if os.path.isabs(filename) or filename == '..' or filename.startsw...'../'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		239 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		235 -> 239 [label="os.path.isabs(filename) or filename == '..' or filename.startswith('../')" color=green]
		240 [label="return os.path.join(directory, filename)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		235 -> 240 [label="(not (os.path.isabs(filename) or filename == '..' or filename.startswith(
    '../')))" color=red]
		233 -> 235 [label="" color=green]
		231 -> 233 [label="" color=black]
	}
	subgraph cluster3send_from_directory {
		graph [compound=True fontname="DejaVu Sans Mono" label=send_from_directory pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		245 [label="\"\"\"Send a file from a given directory with :func:`send_file`.  This\l    is a secure way to quickly expose static files from an upload folder\l    or something similar.\l\l    Example usage::\l\l        @app.route('/uploads/<path:filen...')\l        def download_file(filename):\l            return send_from_directory(app.config['UPLOAD_FOLDER'],\l                                       filename, as_attachment=True)\l\l    .. admonition:: Sending files and Performance\l\l       It is strongly recommended to activate either `X-Sendfile` support in\l       your webserver or (if no authentication happens) to tell the webserver\l       to serve files for the given path on its own without calling into the\l       web application for improved performance.\l\l    .. versionadded:: 0.5\l\l    :param directory: the directory where all the files are stored.\l    :param filename: the filename relative to that directory to\l                     download.\l    :param options: optional keyword arguments that are directly\l                    forwarded to :func:`send_file`.\l    \"\"\"\lfilename = safe_join(directory, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		245 -> 246 [label=calls style=dashed]
		subgraph cluster_245 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			246 [label=safe_join color="#E552FF" shape=tab style=filled]
		}
		247 [label="if not os.path.isabs(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		248 [label="filename = os.path.join(current_app.root_path, filename)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		248 -> 250 [label=calls style=dashed]
		subgraph cluster_248 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			250 [label="os.path.join" color="#E552FF" shape=tab style=filled]
		}
		249 [label="if not os.path.isfile(filename):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		251 [label="raise NotFound()\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		249 -> 251 [label="not os.path.isfile(filename)" color=green]
		252 [label="options.setdefault('conditional', True)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		252 -> 254 [label=calls style=dashed]
		subgraph cluster_252 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			254 [label="options.setdefault" color="#E552FF" shape=tab style=filled]
		}
		255 [label="return send_file(filename, **options)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		252 -> 255 [label="" color=black]
		249 -> 252 [label="(not not os.path.isfile(filename))" color=red]
		248 -> 249 [label="" color=black]
		247 -> 248 [label="not os.path.isabs(filename)" color=green]
		247 -> 249 [label="(not not os.path.isabs(filename))" color=red]
		245 -> 247 [label="" color=black]
	}
	subgraph cluster2get_root_path {
		graph [compound=True fontname="DejaVu Sans Mono" label=get_root_path pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		259 [label="\"\"\"Returns the path to a package or cwd if that cannot be found.  This\l    returns the path of a package or the folder that contains a module.\l\l    Not to be confused with the package path returned by :func:`find_package`.\l    \"\"\"\lmod = sys.modules.get(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		259 -> 260 [label=calls style=dashed]
		subgraph cluster_259 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			260 [label="sys.modules.get" color="#E552FF" shape=tab style=filled]
		}
		261 [label="if mod is not None and hasattr(mod, '__file__'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		262 [label="return os.path.dirname(os.path.abspath(mod.__file__))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		261 -> 262 [label="mod is not None and hasattr(mod, '__file__')" color=green]
		263 [label="loader = pkgutil.get_loader(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		263 -> 265 [label=calls style=dashed]
		subgraph cluster_263 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			265 [label="pkgutil.get_loader" color="#E552FF" shape=tab style=filled]
		}
		266 [label="if loader is None or import_name == '__main__':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		267 [label="return os.getcwd()\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		266 -> 267 [label="loader is None or import_name == '__main__'" color=green]
		268 [label="if hasattr(loader, 'get_filename'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		268 -> 270 [label=calls style=dashed]
		subgraph cluster_268 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			270 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		271 [label="filepath = loader.get_filename(import_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		271 -> 280 [label=calls style=dashed]
		subgraph cluster_271 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			280 [label="loader.get_filename" color="#E552FF" shape=tab style=filled]
		}
		272 [label="return os.path.dirname(os.path.abspath(filepath))\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		271 -> 272 [label="" color=black]
		268 -> 271 [label="hasattr(loader, 'get_filename')" color=green]
		273 [label="__import__(import_name)\lmod = sys.modules[import_name]\lfilepath = getattr(mod, '__file__', None)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		273 -> 274 [label=calls style=dashed]
		273 -> 275 [label=calls style=dashed]
		subgraph cluster_273 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			274 [label=__import__ color="#E552FF" shape=tab style=filled]
			275 [label=getattr color="#E552FF" shape=tab style=filled]
		}
		276 [label="if filepath is None:\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		277 [label="raise RuntimeError(\l    'No root path can be ...\"%s\".  This can happen b...'s a namespace package.  In this case the root path needs to be explicitly provided.'\l     % import_name)\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		276 -> 277 [label="filepath is None" color=green]
		276 -> 272 [label="(filepath is not None)" color=red]
		273 -> 276 [label="" color=black]
		268 -> 273 [label="(not hasattr(loader, 'get_filename'))" color=red]
		266 -> 268 [label="(not (loader is None or import_name == '__main__'))" color=red]
		263 -> 266 [label="" color=black]
		261 -> 263 [label="(not (mod is not None and hasattr(mod, '__file__')))" color=red]
		259 -> 261 [label="" color=black]
	}
	subgraph cluster0_matching_loader_thinks_module_is_package {
		graph [compound=True fontname="DejaVu Sans Mono" label=_matching_loader_thinks_module_is_package pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		284 [label="\"\"\"Given the loader that loaded a module and the module this function\l    attempts to figure out if the given module is actually a package.\l    \"\"\"\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		285 [label="if hasattr(loader, 'is_package'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		285 -> 286 [label=calls style=dashed]
		subgraph cluster_285 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			286 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		287 [label="return loader.is_package(mod_name)\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		285 -> 287 [label="hasattr(loader, 'is_package')" color=green]
		289 [label="if loader.__class__.__module__ == '_frozen_importlib' and loader.__class_...'NamespaceLoader':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		290 [label="return True\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		289 -> 290 [label="loader.__class__.__module__ == '_frozen_importlib' and loader.__class__.__name__ == 'NamespaceLoader'" color=green]
		288 [label="raise AttributeError(\l    '%s.is_package() meth...'\l     % loader.__class__.__name__)\l" fillcolor="#98fb98" shape=house style="filled,solid"]
		289 -> 288 [label="(not (loader.__class__.__module__ == '_frozen_importlib' and loader.
    __class__.__name__ == 'NamespaceLoader'))" color=red]
		285 -> 289 [label="(not hasattr(loader, 'is_package'))" color=red]
		284 -> 285 [label="" color=black]
	}
	subgraph cluster2find_package {
		graph [compound=True fontname="DejaVu Sans Mono" label=find_package pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		297 [label="\"\"\"Finds a package and returns the prefix (or None if the package is\l    not installed) as well as the folder that contains the package or\l    module as a tuple.  The package path returned is the module that would\l    have to be added to the pythonpath in order to make it possible to\l    import the module.  The prefix is the path below which a UNIX like\l    folder structure exists (lib, share etc.).\l    \"\"\"\lroot_mod_name = import_name.split('.')[0]\lloader = pkgutil.get_loader(root_mod_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		297 -> 298 [label=calls style=dashed]
		297 -> 299 [label=calls style=dashed]
		subgraph cluster_297 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			298 [label="import_name.split" color="#E552FF" shape=tab style=filled]
			299 [label="pkgutil.get_loader" color="#E552FF" shape=tab style=filled]
		}
		300 [label="if loader is None or import_name == '__main__':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		301 [label="package_path = os.getcwd()\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		301 -> 321 [label=calls style=dashed]
		subgraph cluster_301 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			321 [label="os.getcwd" color="#E552FF" shape=tab style=filled]
		}
		302 [label="site_parent, site_folder = os.path.split(package_path)\lpy_prefix = os.path.abspath(sys.prefix)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		302 -> 322 [label=calls style=dashed]
		302 -> 323 [label=calls style=dashed]
		subgraph cluster_302 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			322 [label="os.path.split" color="#E552FF" shape=tab style=filled]
			323 [label="os.path.abspath" color="#E552FF" shape=tab style=filled]
		}
		324 [label="if package_path.startswith(py_prefix):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		324 -> 325 [label=calls style=dashed]
		subgraph cluster_324 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			325 [label="package_path.startswith" color="#E552FF" shape=tab style=filled]
		}
		326 [label="return py_prefix, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		324 -> 326 [label="package_path.startswith(py_prefix)" color=green]
		328 [label="if site_folder.lower() == 'site-packages':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		328 -> 329 [label=calls style=dashed]
		subgraph cluster_328 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			329 [label="site_folder.lower" color="#E552FF" shape=tab style=filled]
		}
		330 [label="parent, folder = os.path.split(site_parent)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		330 -> 332 [label=calls style=dashed]
		subgraph cluster_330 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			332 [label="os.path.split" color="#E552FF" shape=tab style=filled]
		}
		333 [label="if folder.lower() == 'lib':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		333 -> 334 [label=calls style=dashed]
		subgraph cluster_333 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			334 [label="folder.lower" color="#E552FF" shape=tab style=filled]
		}
		335 [label="base_dir = parent\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		336 [label="return base_dir, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		335 -> 336 [label="" color=black]
		333 -> 335 [label="folder.lower() == 'lib'" color=green]
		337 [label="if os.path.basename(parent).lower() == 'lib':\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		337 -> 338 [label=calls style=dashed]
		subgraph cluster_337 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			338 [label="os.path.basename.lower" color="#E552FF" shape=tab style=filled]
		}
		339 [label="base_dir = os.path.dirname(parent)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		339 -> 342 [label=calls style=dashed]
		subgraph cluster_339 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			342 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
		}
		339 -> 336 [label="" color=black]
		337 -> 339 [label="os.path.basename(parent).lower() == 'lib'" color=green]
		341 [label="base_dir = site_parent\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		341 -> 336 [label="" color=black]
		337 -> 341 [label="(os.path.basename(parent).lower() != 'lib')" color=red]
		333 -> 337 [label="(folder.lower() != 'lib')" color=red]
		330 -> 333 [label="" color=black]
		328 -> 330 [label="site_folder.lower() == 'site-packages'" color=green]
		327 [label="return None, package_path\l" fillcolor="#98fb98" shape=parallelogram style="filled,solid"]
		328 -> 327 [label="(site_folder.lower() != 'site-packages')" color=red]
		324 -> 328 [label="(not package_path.startswith(py_prefix))" color=red]
		302 -> 324 [label="" color=black]
		301 -> 302 [label="" color=black]
		300 -> 301 [label="loader is None or import_name == '__main__'" color=green]
		303 [label="if hasattr(loader, 'get_filename'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		303 -> 304 [label=calls style=dashed]
		subgraph cluster_303 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			304 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		305 [label="filename = loader.get_filename(root_mod_name)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		305 -> 313 [label=calls style=dashed]
		subgraph cluster_305 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			313 [label="loader.get_filename" color="#E552FF" shape=tab style=filled]
		}
		306 [label="package_path = os.path.abspath(os.path.dirname(filename))\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		306 -> 314 [label=calls style=dashed]
		subgraph cluster_306 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			314 [label="os.path.abspath" color="#E552FF" shape=tab style=filled]
			315 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
			314 -> 315 [color=black]
		}
		316 [label="if _matching_loader_thinks_module_is_package(loader, root_mod_name):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		316 -> 317 [label=calls style=dashed]
		subgraph cluster_316 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			317 [label=_matching_loader_thinks_module_is_package color="#E552FF" shape=tab style=filled]
		}
		318 [label="package_path = os.path.dirname(package_path)\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		318 -> 320 [label=calls style=dashed]
		subgraph cluster_318 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			320 [label="os.path.dirname" color="#E552FF" shape=tab style=filled]
		}
		318 -> 302 [label="" color=black]
		316 -> 318 [label="_matching_loader_thinks_module_is_package(loader, root_mod_name)" color=green]
		316 -> 302 [label="(not _matching_loader_thinks_module_is_package(loader, root_mod_name))" color=red]
		306 -> 316 [label="" color=black]
		305 -> 306 [label="" color=black]
		303 -> 305 [label="hasattr(loader, 'get_filename')" color=green]
		307 [label="if hasattr(loader, 'archive'):\l" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		307 -> 308 [label=calls style=dashed]
		subgraph cluster_307 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			308 [label=hasattr color="#E552FF" shape=tab style=filled]
		}
		309 [label="filename = loader.archive\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		309 -> 306 [label="" color=black]
		307 -> 309 [label="hasattr(loader, 'archive')" color=green]
		311 [label="__import__(import_name)\lfilename = sys.modules[import_name].__file__\l" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		311 -> 312 [label=calls style=dashed]
		subgraph cluster_311 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			312 [label=__import__ color="#E552FF" shape=tab style=filled]
		}
		311 -> 306 [label="" color=black]
		307 -> 311 [label="(not hasattr(loader, 'archive'))" color=red]
		303 -> 307 [label="(not hasattr(loader, 'get_filename'))" color=red]
		300 -> 303 [label="(not (loader is None or import_name == '__main__'))" color=red]
		297 -> 300 [label="" color=black]
	}
}
